!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A1p0	rng-stream.cc	/^const double A1p0[3][3] = {$/;"	m	namespace:__anon3	file:
A1p127	rng-stream.cc	/^const double A1p127[3][3] = {$/;"	m	namespace:__anon3	file:
A1p76	rng-stream.cc	/^const double A1p76[3][3] = {$/;"	m	namespace:__anon3	file:
A2p0	rng-stream.cc	/^const double A2p0[3][3] = {$/;"	m	namespace:__anon3	file:
A2p127	rng-stream.cc	/^const double A2p127[3][3] = {$/;"	m	namespace:__anon3	file:
A2p76	rng-stream.cc	/^const double A2p76[3][3] = {$/;"	m	namespace:__anon3	file:
ALL	test.h	/^    ALL = 0,$/;"	e	enum:ns3::TestSuite::Type
APointerChecker	pointer.h	/^class APointerChecker : public PointerChecker$/;"	c	namespace:ns3::internal
ASSERT_ON_FAILURE	test.h	44;"	d
ATTRIBUTE_ACCESSOR_DEFINE	attribute-helper.h	100;"	d
ATTRIBUTE_ACCESSOR_HELPER_H	attribute-accessor-helper.h	21;"	d
ATTRIBUTE_CHECKER_DEFINE	attribute-helper.h	162;"	d
ATTRIBUTE_CHECKER_IMPLEMENT	attribute-helper.h	216;"	d
ATTRIBUTE_CHECKER_IMPLEMENT_WITH_NAME	attribute-helper.h	222;"	d
ATTRIBUTE_CONSTRUCTION_LIST_H	attribute-construction-list.h	21;"	d
ATTRIBUTE_CONVERTER_DEFINE	attribute-helper.h	152;"	d
ATTRIBUTE_H	attribute.h	21;"	d
ATTRIBUTE_HELPER_CPP	attribute-helper.h	246;"	d
ATTRIBUTE_HELPER_H	attribute-helper.h	21;"	d
ATTRIBUTE_HELPER_HEADER	attribute-helper.h	235;"	d
ATTRIBUTE_VALUE_DEFINE	attribute-helper.h	140;"	d
ATTRIBUTE_VALUE_DEFINE_WITH_NAME	attribute-helper.h	112;"	d
ATTRIBUTE_VALUE_IMPLEMENT	attribute-helper.h	205;"	d
ATTRIBUTE_VALUE_IMPLEMENT_WITH_NAME	attribute-helper.h	167;"	d
ATTR_CONSTRUCT	type-id.h	/^    ATTR_CONSTRUCT = 1<<2, \/**< The attribute can be written at construction-time *\/$/;"	e	enum:ns3::TypeId::AttributeFlag
ATTR_GET	type-id.h	/^    ATTR_GET = 1<<0, \/**< The attribute can be read *\/$/;"	e	enum:ns3::TypeId::AttributeFlag
ATTR_SET	type-id.h	/^    ATTR_SET = 1<<1, \/**< The attribute can be written *\/$/;"	e	enum:ns3::TypeId::AttributeFlag
ATTR_SGC	type-id.h	/^    ATTR_SGC = ATTR_GET | ATTR_SET | ATTR_CONSTRUCT, \/**< The attribute can be read, and written at any time *\/$/;"	e	enum:ns3::TypeId::AttributeFlag
Abs	int64x64.h	/^inline int64x64_t Abs (const int64x64_t &value)$/;"	f	namespace:ns3
Abs	nstime.h	/^inline Time Abs (const Time &time)$/;"	f	namespace:ns3
AccessorHelper	attribute-accessor-helper.h	/^  AccessorHelper () {}$/;"	f	class:ns3::AccessorHelper
AccessorHelper	attribute-accessor-helper.h	/^class AccessorHelper : public AttributeAccessor$/;"	c	namespace:ns3
AccessorTrait	attribute-accessor-helper.h	/^struct AccessorTrait$/;"	s	namespace:ns3
Acquire	ptr.h	/^Ptr<T>::Acquire (void) const$/;"	f	class:ns3::Ptr
Add	attribute-construction-list.cc	/^AttributeConstructionList::Add (std::string name, Ptr<const AttributeChecker> checker, Ptr<AttributeValue> value)$/;"	f	class:ns3::AttributeConstructionList
Add	enum.cc	/^EnumChecker::Add (int v, std::string name)$/;"	f	class:ns3::EnumChecker
Add	names.cc	/^Names::Add (Ptr<Object> context, std::string name, Ptr<Object> object)$/;"	f	class:ns3::Names
Add	names.cc	/^Names::Add (std::string name, Ptr<Object> object)$/;"	f	class:ns3::Names
Add	names.cc	/^Names::Add (std::string path, std::string name, Ptr<Object> object)$/;"	f	class:ns3::Names
Add	names.cc	/^NamesPriv::Add (Ptr<Object> context, std::string name, Ptr<Object> object)$/;"	f	class:ns3::NamesPriv
Add	names.cc	/^NamesPriv::Add (std::string name, Ptr<Object> object)$/;"	f	class:ns3::NamesPriv
Add	names.cc	/^NamesPriv::Add (std::string path, std::string name, Ptr<Object> object)$/;"	f	class:ns3::NamesPriv
Add	test.h	/^TestVectors<T>::Add (T vector)$/;"	f	class:ns3::TestVectors
AddAttribute	type-id.cc	/^IidManager::AddAttribute (uint16_t uid, $/;"	f	class:__anon4::IidManager
AddAttribute	type-id.cc	/^TypeId::AddAttribute (std::string name,$/;"	f	class:ns3::TypeId
AddConstructor	type-id.cc	/^IidManager::AddConstructor (uint16_t uid, ns3::Callback<ns3::ObjectBase *> callback)$/;"	f	class:__anon4::IidManager
AddConstructor	type-id.h	/^TypeId::AddConstructor (void)$/;"	f	class:ns3::TypeId
AddDefault	enum.cc	/^EnumChecker::AddDefault (int v, std::string name)$/;"	f	class:ns3::EnumChecker
AddTestCase	test.cc	/^TestCase::AddTestCase (TestCase *testCase)$/;"	f	class:ns3::TestCase
AddTestSuite	test.cc	/^TestRunnerImpl::AddTestSuite (TestSuite *testSuite)$/;"	f	class:ns3::TestRunnerImpl
AddTraceSource	type-id.cc	/^IidManager::AddTraceSource (uint16_t uid,$/;"	f	class:__anon4::IidManager
AddTraceSource	type-id.cc	/^TypeId::AddTraceSource (std::string name,$/;"	f	class:ns3::TypeId
AddValue	command-line.cc	/^CommandLine::AddValue (const std::string &name,$/;"	f	class:ns3::CommandLine
AddValue	command-line.h	/^CommandLine::AddValue (const std::string &name,$/;"	f	class:ns3::CommandLine
AdvanceState	rng-stream.cc	/^void RngStream::AdvanceState (int32_t e, int32_t c)$/;"	f	class:ns3::RngStream
AggregateIterator	object.cc	/^Object::AggregateIterator::AggregateIterator ()$/;"	f	class:ns3::Object::AggregateIterator
AggregateIterator	object.cc	/^Object::AggregateIterator::AggregateIterator (Ptr<const Object> object)$/;"	f	class:ns3::Object::AggregateIterator
AggregateIterator	object.h	/^  class AggregateIterator$/;"	c	class:ns3::Object
AggregateObject	object.cc	/^Object::AggregateObject (Ptr<Object> o)$/;"	f	class:ns3::Object
Aggregates	object.h	/^  struct Aggregates {$/;"	s	class:ns3::Object
AllocateUid	type-id.cc	/^IidManager::AllocateUid (std::string name)$/;"	f	class:__anon4::IidManager
AnObjectPtrContainerChecker	object-ptr-container.h	/^class AnObjectPtrContainerChecker : public ObjectPtrContainerChecker$/;"	c	namespace:ns3::internal
Append	system-path.cc	/^std::string Append (std::string left, std::string right)$/;"	f	namespace:ns3::SystemPath
Arg1Type	type-traits.h	/^    typedef V1 Arg1Type;$/;"	t	struct:TypeTraits::FunctionPtrTraits
Arg1Type	type-traits.h	/^    typedef W1 Arg1Type;$/;"	t	struct:TypeTraits::PtrToMemberTraits
Arg2Type	type-traits.h	/^    typedef V2 Arg2Type;$/;"	t	struct:TypeTraits::FunctionPtrTraits
Arg2Type	type-traits.h	/^    typedef W2 Arg2Type;$/;"	t	struct:TypeTraits::PtrToMemberTraits
Arg3Type	type-traits.h	/^    typedef V3 Arg3Type;$/;"	t	struct:TypeTraits::FunctionPtrTraits
Arg3Type	type-traits.h	/^    typedef W3 Arg3Type;$/;"	t	struct:TypeTraits::PtrToMemberTraits
Arg4Type	type-traits.h	/^    typedef V4 Arg4Type;$/;"	t	struct:TypeTraits::FunctionPtrTraits
Arg4Type	type-traits.h	/^    typedef W4 Arg4Type;$/;"	t	struct:TypeTraits::PtrToMemberTraits
Arg5Type	type-traits.h	/^    typedef V5 Arg5Type;$/;"	t	struct:TypeTraits::FunctionPtrTraits
Arg5Type	type-traits.h	/^    typedef W5 Arg5Type;$/;"	t	struct:TypeTraits::PtrToMemberTraits
Arg6Type	type-traits.h	/^    typedef V6 Arg6Type;$/;"	t	struct:TypeTraits::FunctionPtrTraits
Arg6Type	type-traits.h	/^    typedef W6 Arg6Type;$/;"	t	struct:TypeTraits::PtrToMemberTraits
ArrayMatcher	config.cc	/^ArrayMatcher::ArrayMatcher (std::string element)$/;"	f	class:ns3::ArrayMatcher
ArrayMatcher	config.cc	/^class ArrayMatcher$/;"	c	namespace:ns3	file:
Assign	callback.h	/^  void Assign (const CallbackBase &other) {$/;"	f	class:ns3::Callback
AttributeAccessor	attribute.cc	/^AttributeAccessor::AttributeAccessor ()$/;"	f	class:ns3::AttributeAccessor
AttributeAccessor	attribute.h	/^class AttributeAccessor : public SimpleRefCount<AttributeAccessor>$/;"	c	namespace:ns3
AttributeChecker	attribute.cc	/^AttributeChecker::AttributeChecker ()$/;"	f	class:ns3::AttributeChecker
AttributeChecker	attribute.h	/^class AttributeChecker : public SimpleRefCount<AttributeChecker>$/;"	c	namespace:ns3
AttributeConstructionList	attribute-construction-list.cc	/^AttributeConstructionList::AttributeConstructionList ()$/;"	f	class:ns3::AttributeConstructionList
AttributeConstructionList	attribute-construction-list.h	/^class AttributeConstructionList$/;"	c	namespace:ns3
AttributeFlag	type-id.h	/^  enum AttributeFlag {$/;"	g	class:ns3::TypeId
AttributeInformation	type-id.h	/^  struct AttributeInformation {$/;"	s	class:ns3::TypeId
AttributeValue	attribute.cc	/^AttributeValue::AttributeValue ()$/;"	f	class:ns3::AttributeValue
AttributeValue	attribute.h	/^class AttributeValue : public SimpleRefCount<AttributeValue>$/;"	c	namespace:ns3
BOOLEAN_H	boolean.h	21;"	d
BREAKPOINT_H	breakpoint.h	22;"	d
BVT	test.h	/^    BVT = 1,    \/**< This test suite implements a Build Verification Test *\/$/;"	e	enum:ns3::TestSuite::Type
Begin	attribute-construction-list.cc	/^AttributeConstructionList::Begin (void) const$/;"	f	class:ns3::AttributeConstructionList
Begin	config.cc	/^MatchContainer::Begin (void) const$/;"	f	class:ns3::Config::MatchContainer
Begin	global-value.cc	/^GlobalValue::Begin (void)$/;"	f	class:ns3::GlobalValue
Begin	object-ptr-container.cc	/^ObjectPtrContainerValue::Begin (void) const$/;"	f	class:ns3::ObjectPtrContainerValue
Bg	rng-stream.h	/^  double Cg[6], Bg[6], Ig[6];$/;"	m	class:ns3::RngStream
BinaryHeap	heap-scheduler.h	/^  typedef std::vector<Event> BinaryHeap;$/;"	t	class:ns3::HeapScheduler
Bind	callback.h	/^  Callback<R,T2,T3,T4,T5,T6,T7,T8,T9> Bind (T a) {$/;"	f	class:ns3::Callback
Bind	global-value.cc	/^GlobalValue::Bind (std::string name, const AttributeValue &value)$/;"	f	class:ns3::GlobalValue
BindFailSafe	global-value.cc	/^GlobalValue::BindFailSafe (std::string name, const AttributeValue &value)$/;"	f	class:ns3::GlobalValue
BooleanValue	boolean.cc	/^BooleanValue::BooleanValue ()$/;"	f	class:ns3::BooleanValue
BooleanValue	boolean.cc	/^BooleanValue::BooleanValue (bool value)$/;"	f	class:ns3::BooleanValue
BooleanValue	boolean.h	/^class BooleanValue : public AttributeValue$/;"	c	namespace:ns3
BottomUp	heap-scheduler.cc	/^HeapScheduler::BottomUp (void)$/;"	f	class:ns3::HeapScheduler
BoundFunctorCallbackImpl	callback.h	/^  BoundFunctorCallbackImpl (FUNCTOR functor, ARG a)$/;"	f	class:ns3::BoundFunctorCallbackImpl
BoundFunctorCallbackImpl	callback.h	/^class BoundFunctorCallbackImpl : public CallbackImpl<R,T1,T2,T3,T4,T5,T6,T7,T8,empty> {$/;"	c	namespace:ns3
BreakpointFallback	breakpoint.cc	/^BreakpointFallback (void)$/;"	f	namespace:ns3
Broadcast	unix-system-condition.cc	/^SystemCondition::Broadcast (void) $/;"	f	class:ns3::SystemCondition
Broadcast	unix-system-condition.cc	/^SystemConditionPrivate::Broadcast (void)$/;"	f	class:ns3::SystemConditionPrivate
Bucket	calendar-scheduler.h	/^  typedef std::list<Scheduler::Event> Bucket;$/;"	t	class:ns3::CalendarScheduler
CAIRO_WIDEINT_H	cairo-wideint-private.h	33;"	d
CALENDAR_SCHEDULER_H	calendar-scheduler.h	22;"	d
CALLBACK_H	callback.h	22;"	d
CANCEL_ON_DESTROY	timer.h	/^    CANCEL_ON_DESTROY = (1 << 3),$/;"	e	enum:ns3::Timer::DestroyPolicy
CDF	random-variable.cc	/^EmpiricalVariable::CDF (double v, double c)$/;"	f	class:ns3::EmpiricalVariable
CDF	random-variable.cc	/^void EmpiricalVariableImpl::CDF (double v, double c)$/;"	f	class:ns3::EmpiricalVariableImpl
CHECK_ON_DESTROY	timer.h	/^    CHECK_ON_DESTROY = (1 << 5)$/;"	e	enum:ns3::Timer::DestroyPolicy
CIterator	attribute-construction-list.h	/^  typedef std::list<struct Item>::const_iterator CIterator;$/;"	t	class:ns3::AttributeConstructionList
COMMAND_LINE_H	command-line.h	21;"	d
CONFIG_H	config.h	21;"	d
CONTINUE_ON_FAILURE	test.h	52;"	d
CONTINUE_ON_FAILURE_RETURNS_BOOL	test.h	60;"	d
CalculateDistance	vector.cc	/^CalculateDistance (const Vector2D &a, const Vector2D &b)$/;"	f	namespace:ns3
CalculateDistance	vector.cc	/^CalculateDistance (const Vector3D &a, const Vector3D &b)$/;"	f	namespace:ns3
CalculateNewWidth	calendar-scheduler.cc	/^CalendarScheduler::CalculateNewWidth (void)$/;"	f	class:ns3::CalendarScheduler
CalendarScheduler	calendar-scheduler.cc	/^CalendarScheduler::CalendarScheduler ()$/;"	f	class:ns3::CalendarScheduler
CalendarScheduler	calendar-scheduler.h	/^class CalendarScheduler : public Scheduler$/;"	c	namespace:ns3
Callback	callback.h	/^  Callback () {}$/;"	f	class:ns3::Callback
Callback	callback.h	/^  Callback (FUNCTOR const &functor, bool, bool) $/;"	f	class:ns3::Callback
Callback	callback.h	/^  Callback (OBJ_PTR const &objPtr, MEM_PTR mem_ptr)$/;"	f	class:ns3::Callback
Callback	callback.h	/^  Callback (Ptr<CallbackImpl<R,T1,T2,T3,T4,T5,T6,T7,T8,T9> > const &impl)$/;"	f	class:ns3::Callback
Callback	callback.h	/^class Callback : public CallbackBase {$/;"	c	namespace:ns3
CallbackBase	callback.h	/^  CallbackBase () : m_impl () {}$/;"	f	class:ns3::CallbackBase
CallbackBase	callback.h	/^  CallbackBase (Ptr<CallbackImplBase> impl) : m_impl (impl) {}$/;"	f	class:ns3::CallbackBase
CallbackBase	callback.h	/^class CallbackBase {$/;"	c	namespace:ns3
CallbackImpl	callback.h	/^class CallbackImpl : public CallbackImplBase {$/;"	c	namespace:ns3
CallbackImpl	callback.h	/^class CallbackImpl<R,T1,T2,T3,T4,T5,T6,T7,T8,empty> : public CallbackImplBase {$/;"	c	namespace:ns3
CallbackImpl	callback.h	/^class CallbackImpl<R,T1,T2,T3,T4,T5,T6,T7,empty,empty> : public CallbackImplBase {$/;"	c	namespace:ns3
CallbackImpl	callback.h	/^class CallbackImpl<R,T1,T2,T3,T4,T5,T6,empty,empty,empty> : public CallbackImplBase {$/;"	c	namespace:ns3
CallbackImpl	callback.h	/^class CallbackImpl<R,T1,T2,T3,T4,T5,empty,empty,empty,empty> : public CallbackImplBase {$/;"	c	namespace:ns3
CallbackImpl	callback.h	/^class CallbackImpl<R,T1,T2,T3,T4,empty,empty,empty,empty,empty> : public CallbackImplBase {$/;"	c	namespace:ns3
CallbackImpl	callback.h	/^class CallbackImpl<R,T1,T2,T3,empty,empty,empty,empty,empty,empty> : public CallbackImplBase {$/;"	c	namespace:ns3
CallbackImpl	callback.h	/^class CallbackImpl<R,T1,T2,empty,empty,empty,empty,empty,empty,empty> : public CallbackImplBase {$/;"	c	namespace:ns3
CallbackImpl	callback.h	/^class CallbackImpl<R,T1,empty,empty,empty,empty,empty,empty,empty,empty> : public CallbackImplBase {$/;"	c	namespace:ns3
CallbackImpl	callback.h	/^class CallbackImpl<R,empty,empty,empty,empty,empty,empty,empty,empty,empty> : public CallbackImplBase {$/;"	c	namespace:ns3
CallbackImplBase	callback.h	/^class CallbackImplBase : public SimpleRefCount<CallbackImplBase>$/;"	c	namespace:ns3
CallbackItem	command-line.h	/^  class CallbackItem : public Item$/;"	c	class:ns3::CommandLine
CallbackList	traced-callback.h	/^  typedef std::list<Callback<void,T1,T2,T3,T4,T5,T6,T7,T8> > CallbackList;$/;"	t	class:ns3::TracedCallback
CallbackTraits	callback.h	/^struct CallbackTraits<T *>$/;"	s	namespace:ns3
CallbackTraits	ptr.h	/^struct CallbackTraits<Ptr<T> >$/;"	s	namespace:ns3
CallbackValue	callback.cc	/^CallbackValue::CallbackValue ()$/;"	f	class:ns3::CallbackValue
CallbackValue	callback.cc	/^CallbackValue::CallbackValue (const CallbackBase &base)$/;"	f	class:ns3::CallbackValue
CallbackValue	callback.h	/^class CallbackValue : public AttributeValue$/;"	c	namespace:ns3
Cancel	default-simulator-impl.cc	/^DefaultSimulatorImpl::Cancel (const EventId &id)$/;"	f	class:ns3::DefaultSimulatorImpl
Cancel	event-id.cc	/^EventId::Cancel (void)$/;"	f	class:ns3::EventId
Cancel	event-impl.cc	/^EventImpl::Cancel (void)$/;"	f	class:ns3::EventImpl
Cancel	realtime-simulator-impl.cc	/^RealtimeSimulatorImpl::Cancel (const EventId &id)$/;"	f	class:ns3::RealtimeSimulatorImpl
Cancel	simulator.cc	/^Simulator::Cancel (const EventId &ev)$/;"	f	class:ns3::Simulator
Cancel	timer.cc	/^Timer::Cancel (void)$/;"	f	class:ns3::Timer
Canonicalize	config.cc	/^Resolver::Canonicalize (void)$/;"	f	class:ns3::Resolver
Cg	rng-stream.h	/^  double Cg[6], Bg[6], Ig[6];$/;"	m	class:ns3::RngStream
Check	enum.cc	/^EnumChecker::Check (const AttributeValue &value) const$/;"	f	class:ns3::EnumChecker
Check	object-ptr-container.h	/^  virtual bool Check (const AttributeValue &value) const {$/;"	f	class:ns3::internal::AnObjectPtrContainerChecker
Check	object.cc	/^Object::Check (void) const$/;"	f	class:ns3::Object
Check	pointer.h	/^  virtual bool Check (const AttributeValue &val) const {$/;"	f	class:ns3::internal::APointerChecker
CheckEnvironmentVariables	log.cc	/^static void CheckEnvironmentVariables (void)$/;"	f	namespace:ns3
CheckLoose	object.cc	/^Object::CheckLoose (void) const$/;"	f	class:ns3::Object
CheckSeed	random-variable.cc	/^bool SeedManager::CheckSeed (uint32_t seed)$/;"	f	class:ns3::SeedManager
CheckSeed	rng-stream.cc	/^RngStream::CheckSeed (uint32_t seed)$/;"	f	class:ns3::RngStream
CheckSeed	rng-stream.cc	/^bool RngStream::CheckSeed (const uint32_t seed[6])$/;"	f	class:ns3::RngStream
CheckType	callback.h	/^  bool CheckType (const CallbackBase & other) const {$/;"	f	class:ns3::Callback
Cleanup	simple-ref-count.h	/^  static void Cleanup (void) {}$/;"	f	class:ns3::SimpleRefCount
Clear	command-line.cc	/^CommandLine::Clear (void)$/;"	f	class:ns3::CommandLine
Clear	names.cc	/^Names::Clear (void)$/;"	f	class:ns3::Names
Clear	names.cc	/^NamesPriv::Clear (void)$/;"	f	class:ns3::NamesPriv
CommandLine	command-line.cc	/^CommandLine::CommandLine ()$/;"	f	class:ns3::CommandLine
CommandLine	command-line.cc	/^CommandLine::CommandLine (const CommandLine &cmd)$/;"	f	class:ns3::CommandLine
CommandLine	command-line.h	/^class CommandLine$/;"	c	namespace:ns3
Compare	int64x64-cairo.h	/^  inline int Compare (const int64x64_t &o) const$/;"	f	class:ns3::int64x64_t
Compare	nstime.h	/^  inline int Compare (const Time &o) const$/;"	f	class:ns3::Time
CompleteConstruct	object.h	/^Ptr<T> CompleteConstruct (T *p)$/;"	f	namespace:ns3
ComponentExists	log.cc	/^static bool ComponentExists(std::string componentName) $/;"	f	namespace:ns3
ComponentList	log.cc	/^typedef std::list<std::pair <std::string, LogComponent *> > ComponentList;$/;"	t	namespace:ns3	file:
ComponentListI	log.cc	/^typedef std::list<std::pair <std::string, LogComponent *> >::iterator ComponentListI;$/;"	t	namespace:ns3	file:
Config	config.cc	/^namespace Config {$/;"	n	namespace:ns3	file:
Config	config.h	/^namespace Config {$/;"	n	namespace:ns3
ConfigImpl	config.cc	/^class ConfigImpl $/;"	c	namespace:ns3	file:
Connect	config.cc	/^ConfigImpl::Connect (std::string path, const CallbackBase &cb)$/;"	f	class:ns3::ConfigImpl
Connect	config.cc	/^Connect (std::string path, const CallbackBase &cb)$/;"	f	namespace:ns3::Config
Connect	config.cc	/^MatchContainer::Connect (std::string name, const CallbackBase &cb)$/;"	f	class:ns3::Config::MatchContainer
Connect	traced-callback.h	/^TracedCallback<T1,T2,T3,T4,T5,T6,T7,T8>::Connect (const CallbackBase & callback, std::string path)$/;"	f	class:ns3::TracedCallback
Connect	traced-value.h	/^  void Connect (const CallbackBase &cb, std::string path) {$/;"	f	class:ns3::TracedValue
ConnectWithoutContext	config.cc	/^ConfigImpl::ConnectWithoutContext (std::string path, const CallbackBase &cb)$/;"	f	class:ns3::ConfigImpl
ConnectWithoutContext	config.cc	/^MatchContainer::ConnectWithoutContext (std::string name, const CallbackBase &cb)$/;"	f	class:ns3::Config::MatchContainer
ConnectWithoutContext	config.cc	/^void ConnectWithoutContext (std::string path, const CallbackBase &cb)$/;"	f	namespace:ns3::Config
ConnectWithoutContext	traced-callback.h	/^TracedCallback<T1,T2,T3,T4,T5,T6,T7,T8>::ConnectWithoutContext (const CallbackBase & callback)$/;"	f	class:ns3::TracedCallback
ConnectWithoutContext	traced-value.h	/^  void ConnectWithoutContext (const CallbackBase &cb) {$/;"	f	class:ns3::TracedValue
ConstCast	ptr.h	/^ConstCast (Ptr<T2> const&p)$/;"	f	namespace:ns3
ConstantVariable	random-variable.cc	/^ConstantVariable::ConstantVariable ()$/;"	f	class:ns3::ConstantVariable
ConstantVariable	random-variable.cc	/^ConstantVariable::ConstantVariable (double c)$/;"	f	class:ns3::ConstantVariable
ConstantVariable	random-variable.h	/^class ConstantVariable : public RandomVariable$/;"	c	namespace:ns3
ConstantVariableImpl	random-variable.cc	/^ConstantVariableImpl::ConstantVariableImpl ()$/;"	f	class:ns3::ConstantVariableImpl
ConstantVariableImpl	random-variable.cc	/^ConstantVariableImpl::ConstantVariableImpl (const ConstantVariableImpl& c)$/;"	f	class:ns3::ConstantVariableImpl
ConstantVariableImpl	random-variable.cc	/^ConstantVariableImpl::ConstantVariableImpl (double c)$/;"	f	class:ns3::ConstantVariableImpl
ConstantVariableImpl	random-variable.cc	/^class ConstantVariableImpl : public RandomVariableBase$/;"	c	namespace:ns3	file:
Construct	object.cc	/^Object::Construct (const AttributeConstructionList &attributes)$/;"	f	class:ns3::Object
ConstructSelf	object-base.cc	/^ObjectBase::ConstructSelf (const AttributeConstructionList &attributes)$/;"	f	class:ns3::ObjectBase
Copy	attribute.cc	/^EmptyAttributeValue::Copy (void) const$/;"	f	class:ns3::EmptyAttributeValue
Copy	boolean.cc	/^BooleanValue::Copy (void) const$/;"	f	class:ns3::BooleanValue
Copy	callback.cc	/^CallbackValue::Copy (void) const$/;"	f	class:ns3::CallbackValue
Copy	command-line.cc	/^CommandLine::Copy (const CommandLine &cmd)$/;"	f	class:ns3::CommandLine
Copy	enum.cc	/^EnumChecker::Copy (const AttributeValue &source, AttributeValue &destination) const$/;"	f	class:ns3::EnumChecker
Copy	enum.cc	/^EnumValue::Copy (void) const$/;"	f	class:ns3::EnumValue
Copy	object-ptr-container.cc	/^ObjectPtrContainerValue::Copy (void) const$/;"	f	class:ns3::ObjectPtrContainerValue
Copy	object-ptr-container.h	/^  virtual bool Copy (const AttributeValue &source, AttributeValue &destination) const {$/;"	f	class:ns3::internal::AnObjectPtrContainerChecker
Copy	pointer.cc	/^PointerValue::Copy (void) const$/;"	f	class:ns3::PointerValue
Copy	pointer.h	/^  virtual bool Copy (const AttributeValue &source, AttributeValue &destination) const {$/;"	f	class:ns3::internal::APointerChecker
Copy	ptr.h	/^Ptr<T> Copy (Ptr<T> object)$/;"	f	namespace:ns3
Copy	ptr.h	/^Ptr<T> Copy (Ptr<const T> object)$/;"	f	namespace:ns3
Copy	random-variable.cc	/^RandomVariableBase* ConstantVariableImpl::Copy () const$/;"	f	class:ns3::ConstantVariableImpl
Copy	random-variable.cc	/^RandomVariableBase* DeterministicVariableImpl::Copy () const$/;"	f	class:ns3::DeterministicVariableImpl
Copy	random-variable.cc	/^RandomVariableBase* EmpiricalVariableImpl::Copy () const$/;"	f	class:ns3::EmpiricalVariableImpl
Copy	random-variable.cc	/^RandomVariableBase* ErlangVariableImpl::Copy () const$/;"	f	class:ns3::ErlangVariableImpl
Copy	random-variable.cc	/^RandomVariableBase* ExponentialVariableImpl::Copy () const$/;"	f	class:ns3::ExponentialVariableImpl
Copy	random-variable.cc	/^RandomVariableBase* GammaVariableImpl::Copy () const$/;"	f	class:ns3::GammaVariableImpl
Copy	random-variable.cc	/^RandomVariableBase* IntEmpiricalVariableImpl::Copy () const$/;"	f	class:ns3::IntEmpiricalVariableImpl
Copy	random-variable.cc	/^RandomVariableBase* LogNormalVariableImpl::Copy () const$/;"	f	class:ns3::LogNormalVariableImpl
Copy	random-variable.cc	/^RandomVariableBase* NormalVariableImpl::Copy () const$/;"	f	class:ns3::NormalVariableImpl
Copy	random-variable.cc	/^RandomVariableBase* ParetoVariableImpl::Copy () const$/;"	f	class:ns3::ParetoVariableImpl
Copy	random-variable.cc	/^RandomVariableBase* SequentialVariableImpl::Copy () const$/;"	f	class:ns3::SequentialVariableImpl
Copy	random-variable.cc	/^RandomVariableBase* TriangularVariableImpl::Copy () const$/;"	f	class:ns3::TriangularVariableImpl
Copy	random-variable.cc	/^RandomVariableBase* UniformVariableImpl::Copy () const$/;"	f	class:ns3::UniformVariableImpl
Copy	random-variable.cc	/^RandomVariableBase* WeibullVariableImpl::Copy () const$/;"	f	class:ns3::WeibullVariableImpl
Copy	random-variable.cc	/^RandomVariableBase* ZetaVariableImpl::Copy () const$/;"	f	class:ns3::ZetaVariableImpl
Copy	random-variable.cc	/^RandomVariableBase* ZipfVariableImpl::Copy () const$/;"	f	class:ns3::ZipfVariableImpl
CopyObject	object.h	/^Ptr<T> CopyObject (Ptr<T> object)$/;"	f	namespace:ns3
CopyObject	object.h	/^Ptr<T> CopyObject (Ptr<const T> object)$/;"	f	namespace:ns3
Create	enum.cc	/^EnumChecker::Create (void) const$/;"	f	class:ns3::EnumChecker
Create	object-factory.cc	/^ObjectFactory::Create (void) const$/;"	f	class:ns3::ObjectFactory
Create	object-factory.h	/^ObjectFactory::Create (void) const$/;"	f	class:ns3::ObjectFactory
Create	object-ptr-container.h	/^  virtual Ptr<AttributeValue> Create (void) const {$/;"	f	class:ns3::internal::AnObjectPtrContainerChecker
Create	pointer.h	/^  virtual Ptr<AttributeValue> Create (void) const {$/;"	f	class:ns3::internal::APointerChecker
Create	ptr.h	/^Ptr<T> Create (T1 a1)$/;"	f	namespace:ns3
Create	ptr.h	/^Ptr<T> Create (T1 a1, T2 a2)$/;"	f	namespace:ns3
Create	ptr.h	/^Ptr<T> Create (T1 a1, T2 a2, T3 a3)$/;"	f	namespace:ns3
Create	ptr.h	/^Ptr<T> Create (T1 a1, T2 a2, T3 a3, T4 a4)$/;"	f	namespace:ns3
Create	ptr.h	/^Ptr<T> Create (T1 a1, T2 a2, T3 a3, T4 a4, T5 a5)$/;"	f	namespace:ns3
Create	ptr.h	/^Ptr<T> Create (T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6)$/;"	f	namespace:ns3
Create	ptr.h	/^Ptr<T> Create (T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7)$/;"	f	namespace:ns3
Create	ptr.h	/^Ptr<T> Create (void)$/;"	f	namespace:ns3
CreateDataDirFilename	test.cc	/^TestCase::CreateDataDirFilename (std::string filename)$/;"	f	class:ns3::TestCase
CreateObject	object.h	/^Ptr<T> CreateObject (T1 a1)$/;"	f	namespace:ns3
CreateObject	object.h	/^Ptr<T> CreateObject (T1 a1, T2 a2)$/;"	f	namespace:ns3
CreateObject	object.h	/^Ptr<T> CreateObject (T1 a1, T2 a2, T3 a3)$/;"	f	namespace:ns3
CreateObject	object.h	/^Ptr<T> CreateObject (T1 a1, T2 a2, T3 a3, T4 a4)$/;"	f	namespace:ns3
CreateObject	object.h	/^Ptr<T> CreateObject (T1 a1, T2 a2, T3 a3, T4 a4, T5 a5)$/;"	f	namespace:ns3
CreateObject	object.h	/^Ptr<T> CreateObject (T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6)$/;"	f	namespace:ns3
CreateObject	object.h	/^Ptr<T> CreateObject (T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7)$/;"	f	namespace:ns3
CreateObject	object.h	/^Ptr<T> CreateObject (void)$/;"	f	namespace:ns3
CreateObjectWithAttributes	object-factory.h	/^CreateObjectWithAttributes (std::string n1, const AttributeValue & v1,$/;"	f	namespace:ns3
CreateTempDirFilename	test.cc	/^TestCase::CreateTempDirFilename (std::string filename)$/;"	f	class:ns3::TestCase
CreateValidValue	attribute.cc	/^AttributeChecker::CreateValidValue (const AttributeValue &value) const$/;"	f	class:ns3::AttributeChecker
CriticalSection	system-mutex.h	/^class CriticalSection$/;"	c	namespace:ns3
CriticalSection	unix-system-mutex.cc	/^CriticalSection::CriticalSection (SystemMutex &mutex)$/;"	f	class:ns3::CriticalSection
DEFAULT_DELETER_H	default-deleter.h	2;"	d
DEFAULT_SIMULATOR_IMPL_H	default-simulator-impl.h	22;"	d
DEF_TYPE	type-name.cc	7;"	d	file:
DEF_TYPE	type-name.h	17;"	d
DEF_TYPE	type-name.h	32;"	d
Data	unix-fd-reader.h	/^    Data () : m_buf (0), m_len (0) {}$/;"	f	struct:ns3::FdReader::Data
Data	unix-fd-reader.h	/^    Data (uint8_t *buf, ssize_t len) : m_buf (buf), m_len (len) {}$/;"	f	struct:ns3::FdReader::Data
Data	unix-fd-reader.h	/^  struct Data$/;"	s	class:ns3::FdReader
DefaultDeleter	default-deleter.h	/^struct DefaultDeleter$/;"	s	namespace:ns3
DefaultSimulatorImpl	default-simulator-impl.cc	/^DefaultSimulatorImpl::DefaultSimulatorImpl ()$/;"	f	class:ns3::DefaultSimulatorImpl
DefaultSimulatorImpl	default-simulator-impl.h	/^class DefaultSimulatorImpl : public SimulatorImpl$/;"	c	namespace:ns3
Delete	default-deleter.h	/^  inline static void Delete (T *object) {$/;"	f	struct:ns3::DefaultDeleter
Delete	object.h	/^ObjectDeleter::Delete (Object *object)$/;"	f	class:ns3::ObjectDeleter
DeleteObject	simulation-singleton.h	/^SimulationSingleton<T>::DeleteObject (void)$/;"	f	class:ns3::SimulationSingleton
Demangle	callback.cc	/^CallbackBase::Demangle (const std::string& mangled)$/;"	f	class:ns3::CallbackBase
DeserializeFromString	attribute.cc	/^EmptyAttributeValue::DeserializeFromString (std::string value, Ptr<const AttributeChecker> checker)$/;"	f	class:ns3::EmptyAttributeValue
DeserializeFromString	boolean.cc	/^BooleanValue::DeserializeFromString (std::string value, Ptr<const AttributeChecker> checker)$/;"	f	class:ns3::BooleanValue
DeserializeFromString	callback.cc	/^CallbackValue::DeserializeFromString (std::string value, Ptr<const AttributeChecker> checker)$/;"	f	class:ns3::CallbackValue
DeserializeFromString	enum.cc	/^EnumValue::DeserializeFromString (std::string value, Ptr<const AttributeChecker> checker)$/;"	f	class:ns3::EnumValue
DeserializeFromString	object-ptr-container.cc	/^ObjectPtrContainerValue::DeserializeFromString (std::string value, Ptr<const AttributeChecker> checker)$/;"	f	class:ns3::ObjectPtrContainerValue
DeserializeFromString	pointer.cc	/^PointerValue::DeserializeFromString (std::string value, Ptr<const AttributeChecker> checker)$/;"	f	class:ns3::PointerValue
Destroy	default-simulator-impl.cc	/^DefaultSimulatorImpl::Destroy ()$/;"	f	class:ns3::DefaultSimulatorImpl
Destroy	realtime-simulator-impl.cc	/^RealtimeSimulatorImpl::Destroy ()$/;"	f	class:ns3::RealtimeSimulatorImpl
Destroy	simulator.cc	/^Simulator::Destroy (void)$/;"	f	class:ns3::Simulator
DestroyEvent	unix-fd-reader.cc	/^void FdReader::DestroyEvent (void)$/;"	f	class:ns3::FdReader
DestroyEvents	default-simulator-impl.h	/^  typedef std::list<EventId> DestroyEvents;$/;"	t	class:ns3::DefaultSimulatorImpl
DestroyEvents	realtime-simulator-impl.h	/^  typedef std::list<EventId> DestroyEvents;$/;"	t	class:ns3::RealtimeSimulatorImpl
DestroyPolicy	timer.h	/^  enum DestroyPolicy$/;"	g	class:ns3::Timer
DeterministicVariable	random-variable.cc	/^DeterministicVariable::DeterministicVariable (double* d, uint32_t c)$/;"	f	class:ns3::DeterministicVariable
DeterministicVariable	random-variable.h	/^class DeterministicVariable : public RandomVariable$/;"	c	namespace:ns3
DeterministicVariableImpl	random-variable.cc	/^DeterministicVariableImpl::DeterministicVariableImpl (double* d, uint32_t c)$/;"	f	class:ns3::DeterministicVariableImpl
DeterministicVariableImpl	random-variable.cc	/^class DeterministicVariableImpl : public RandomVariableBase$/;"	c	namespace:ns3	file:
Dirname	system-path.cc	/^std::string Dirname (std::string path)$/;"	f	namespace:ns3::SystemPath
Disable	log.cc	/^LogComponent::Disable (enum LogLevel level)$/;"	f	class:ns3::LogComponent
Disconnect	config.cc	/^ConfigImpl::Disconnect (std::string path, const CallbackBase &cb)$/;"	f	class:ns3::ConfigImpl
Disconnect	config.cc	/^Disconnect (std::string path, const CallbackBase &cb)$/;"	f	namespace:ns3::Config
Disconnect	config.cc	/^MatchContainer::Disconnect (std::string name, const CallbackBase &cb)$/;"	f	class:ns3::Config::MatchContainer
Disconnect	traced-callback.h	/^TracedCallback<T1,T2,T3,T4,T5,T6,T7,T8>::Disconnect (const CallbackBase & callback, std::string path)$/;"	f	class:ns3::TracedCallback
Disconnect	traced-value.h	/^  void Disconnect (const CallbackBase &cb, std::string path) {$/;"	f	class:ns3::TracedValue
DisconnectWithoutContext	config.cc	/^ConfigImpl::DisconnectWithoutContext (std::string path, const CallbackBase &cb)$/;"	f	class:ns3::ConfigImpl
DisconnectWithoutContext	config.cc	/^MatchContainer::DisconnectWithoutContext (std::string name, const CallbackBase &cb)$/;"	f	class:ns3::Config::MatchContainer
DisconnectWithoutContext	config.cc	/^void DisconnectWithoutContext (std::string path, const CallbackBase &cb)$/;"	f	namespace:ns3::Config
DisconnectWithoutContext	traced-callback.h	/^TracedCallback<T1,T2,T3,T4,T5,T6,T7,T8>::DisconnectWithoutContext (const CallbackBase & callback)$/;"	f	class:ns3::TracedCallback
DisconnectWithoutContext	traced-value.h	/^  void DisconnectWithoutContext (const CallbackBase &cb) {$/;"	f	class:ns3::TracedValue
Dispose	object.cc	/^Object::Dispose (void)$/;"	f	class:ns3::Object
Div	int64x64-128.cc	/^int64x64_t::Div (int64x64_t const &o)$/;"	f	class:ns3::int64x64_t
Div	int64x64-cairo.cc	/^int64x64_t::Div (int64x64_t const &o)$/;"	f	class:ns3::int64x64_t
Divu	int64x64-128.cc	/^int64x64_t::Divu (uint128_t a, uint128_t b)$/;"	f	class:ns3::int64x64_t
DoAddConstructor	type-id.cc	/^TypeId::DoAddConstructor (Callback<ObjectBase *> cb)$/;"	f	class:ns3::TypeId
DoArrayResolve	config.cc	/^Resolver::DoArrayResolve (std::string path, const ObjectPtrContainerValue &container)$/;"	f	class:ns3::Resolver
DoAssign	callback.h	/^  void DoAssign (Ptr<const CallbackImplBase> other) {$/;"	f	class:ns3::Callback
DoCheckType	callback.h	/^  bool DoCheckType (Ptr<const CallbackImplBase> other) const {$/;"	f	class:ns3::Callback
DoDelete	object.cc	/^Object::DoDelete (void)$/;"	f	class:ns3::Object
DoDispose	default-simulator-impl.cc	/^DefaultSimulatorImpl::DoDispose (void)$/;"	f	class:ns3::DefaultSimulatorImpl
DoDispose	object.cc	/^Object::DoDispose (void)$/;"	f	class:ns3::Object
DoDispose	realtime-simulator-impl.cc	/^RealtimeSimulatorImpl::DoDispose (void)$/;"	f	class:ns3::RealtimeSimulatorImpl
DoEventEnd	wall-clock-synchronizer.cc	/^WallClockSynchronizer::DoEventEnd (void)$/;"	f	class:ns3::WallClockSynchronizer
DoEventStart	wall-clock-synchronizer.cc	/^WallClockSynchronizer::DoEventStart (void)$/;"	f	class:ns3::WallClockSynchronizer
DoGetCurrentRealtime	wall-clock-synchronizer.cc	/^WallClockSynchronizer::DoGetCurrentRealtime (void)$/;"	f	class:ns3::WallClockSynchronizer
DoGetDrift	wall-clock-synchronizer.cc	/^WallClockSynchronizer::DoGetDrift (uint64_t ns)$/;"	f	class:ns3::WallClockSynchronizer
DoGetObject	object.cc	/^Object::DoGetObject (TypeId tid) const$/;"	f	class:ns3::Object
DoInsert	calendar-scheduler.cc	/^CalendarScheduler::DoInsert (const Event &ev)$/;"	f	class:ns3::CalendarScheduler
DoMakeAccessorHelperOne	attribute-accessor-helper.h	/^DoMakeAccessorHelperOne (U T::*memberVariable)$/;"	f	namespace:ns3
DoMakeAccessorHelperOne	attribute-accessor-helper.h	/^DoMakeAccessorHelperOne (void (T::*setter)(U))$/;"	f	namespace:ns3
DoMakeAccessorHelperTwo	attribute-accessor-helper.h	/^DoMakeAccessorHelperTwo (void (T::*setter)(U),$/;"	f	namespace:ns3
DoMakeTraceSourceAccessor	trace-source-accessor.h	/^DoMakeTraceSourceAccessor (SOURCE T::*a)$/;"	f	namespace:ns3
DoPeekImpl	callback.h	/^  CallbackImpl<R,T1,T2,T3,T4,T5,T6,T7,T8,T9> *DoPeekImpl (void) const {$/;"	f	class:ns3::Callback
DoRealtime	wall-clock-synchronizer.cc	/^WallClockSynchronizer::DoRealtime (void)$/;"	f	class:ns3::WallClockSynchronizer
DoRemoveNext	calendar-scheduler.cc	/^CalendarScheduler::DoRemoveNext (void)$/;"	f	class:ns3::CalendarScheduler
DoResize	calendar-scheduler.cc	/^CalendarScheduler::DoResize (uint32_t newSize, uint32_t newWidth)$/;"	f	class:ns3::CalendarScheduler
DoResolve	config.cc	/^Resolver::DoResolve (std::string path, Ptr<Object> root)$/;"	f	class:ns3::Resolver
DoResolveOne	config.cc	/^Resolver::DoResolveOne (Ptr<Object> object)$/;"	f	class:ns3::Resolver
DoRun	system-thread.cc	/^SystemThread::DoRun (void *arg)$/;"	f	class:ns3::SystemThread
DoRun	test.cc	/^TestSuite::DoRun (void)$/;"	f	class:ns3::TestSuite
DoSchedule	simulator.cc	/^Simulator::DoSchedule (Time const &time, EventImpl *impl)$/;"	f	class:ns3::Simulator
DoScheduleDestroy	simulator.cc	/^Simulator::DoScheduleDestroy (EventImpl *impl)$/;"	f	class:ns3::Simulator
DoScheduleNow	simulator.cc	/^Simulator::DoScheduleNow (EventImpl *impl)$/;"	f	class:ns3::Simulator
DoSet	object-base.cc	/^ObjectBase::DoSet (Ptr<const AttributeAccessor> accessor, $/;"	f	class:ns3::ObjectBase
DoSetCondition	wall-clock-synchronizer.cc	/^WallClockSynchronizer::DoSetCondition (bool cond)$/;"	f	class:ns3::WallClockSynchronizer
DoSetOrigin	wall-clock-synchronizer.cc	/^WallClockSynchronizer::DoSetOrigin (uint64_t ns)$/;"	f	class:ns3::WallClockSynchronizer
DoSetup	test.cc	/^TestCase::DoSetup (void)$/;"	f	class:ns3::TestCase
DoSignal	wall-clock-synchronizer.cc	/^WallClockSynchronizer::DoSignal (void)$/;"	f	class:ns3::WallClockSynchronizer
DoStart	object.cc	/^Object::DoStart (void)$/;"	f	class:ns3::Object
DoSynchronize	wall-clock-synchronizer.cc	/^WallClockSynchronizer::DoSynchronize (uint64_t nsCurrent, uint64_t nsDelay)$/;"	f	class:ns3::WallClockSynchronizer
DoTeardown	test.cc	/^TestCase::DoTeardown (void)$/;"	f	class:ns3::TestCase
DriftCorrect	wall-clock-synchronizer.cc	/^WallClockSynchronizer::DriftCorrect (uint64_t nsNow, uint64_t nsDelay)$/;"	f	class:ns3::WallClockSynchronizer
DynamicCast	ptr.h	/^DynamicCast (Ptr<T2> const&p)$/;"	f	namespace:ns3
EMPTY_H	empty.h	2;"	d
ENUM_VALUE_H	enum.h	21;"	d
EVENT_ID_H	event-id.h	21;"	d
EVENT_IMPL_H	event-impl.h	21;"	d
EXAMPLE	test.h	/^    EXAMPLE,    \/**< This test suite implements an Example Test *\/$/;"	e	enum:ns3::TestSuite::Type
EXPIRED	timer.h	/^    EXPIRED,$/;"	e	enum:ns3::Timer::State
EmpiricalVariable	random-variable.cc	/^EmpiricalVariable::EmpiricalVariable ()$/;"	f	class:ns3::EmpiricalVariable
EmpiricalVariable	random-variable.cc	/^EmpiricalVariable::EmpiricalVariable (const RandomVariableBase &variable)$/;"	f	class:ns3::EmpiricalVariable
EmpiricalVariable	random-variable.h	/^class EmpiricalVariable : public RandomVariable$/;"	c	namespace:ns3
EmpiricalVariableImpl	random-variable.cc	/^EmpiricalVariableImpl::EmpiricalVariableImpl ()$/;"	f	class:ns3::EmpiricalVariableImpl
EmpiricalVariableImpl	random-variable.cc	/^EmpiricalVariableImpl::EmpiricalVariableImpl (const EmpiricalVariableImpl& c)$/;"	f	class:ns3::EmpiricalVariableImpl
EmpiricalVariableImpl	random-variable.cc	/^class EmpiricalVariableImpl : public RandomVariableBase$/;"	c	namespace:ns3	file:
EmptyAttributeValue	attribute.cc	/^EmptyAttributeValue::EmptyAttributeValue ()$/;"	f	class:ns3::EmptyAttributeValue
EmptyAttributeValue	attribute.h	/^class EmptyAttributeValue : public AttributeValue$/;"	c	namespace:ns3
Enable	log.cc	/^LogComponent::Enable (enum LogLevel level)$/;"	f	class:ns3::LogComponent
End	attribute-construction-list.cc	/^AttributeConstructionList::End (void) const$/;"	f	class:ns3::AttributeConstructionList
End	config.cc	/^MatchContainer::End (void) const$/;"	f	class:ns3::Config::MatchContainer
End	global-value.cc	/^GlobalValue::End (void)$/;"	f	class:ns3::GlobalValue
End	object-ptr-container.cc	/^ObjectPtrContainerValue::End (void) const$/;"	f	class:ns3::ObjectPtrContainerValue
End	unix-system-wall-clock-ms.cc	/^SystemWallClockMs::End (void)$/;"	f	class:ns3::SystemWallClockMs
End	unix-system-wall-clock-ms.cc	/^SystemWallClockMsPrivate::End (void)$/;"	f	class:ns3::SystemWallClockMsPrivate
End	win32-system-wall-clock-ms.cc	/^SystemWallClockMs::End (void)$/;"	f	class:ns3::SystemWallClockMs
End	win32-system-wall-clock-ms.cc	/^SystemWallClockMsPrivate::End (void)$/;"	f	class:ns3::SystemWallClockMsPrivate
EnsureGlobalInitialized	rng-stream.cc	/^RngStream::EnsureGlobalInitialized (void)$/;"	f	class:ns3::RngStream
EnumChecker	enum.cc	/^EnumChecker::EnumChecker ()$/;"	f	class:ns3::EnumChecker
EnumChecker	enum.h	/^class EnumChecker : public AttributeChecker$/;"	c	namespace:ns3
EnumValue	enum.cc	/^EnumValue::EnumValue ()$/;"	f	class:ns3::EnumValue
EnumValue	enum.cc	/^EnumValue::EnumValue (int v)$/;"	f	class:ns3::EnumValue
EnumValue	enum.h	/^class EnumValue : public AttributeValue$/;"	c	namespace:ns3
EnvVarCheck	log.cc	/^LogComponent::EnvVarCheck (char const * name)$/;"	f	class:ns3::LogComponent
Equals	system-thread.cc	/^SystemThread::Equals (SystemThread::ThreadId id)$/;"	f	class:ns3::SystemThread
ErlangVariable	random-variable.cc	/^ErlangVariable::ErlangVariable ()$/;"	f	class:ns3::ErlangVariable
ErlangVariable	random-variable.cc	/^ErlangVariable::ErlangVariable (unsigned int k, double lambda)$/;"	f	class:ns3::ErlangVariable
ErlangVariable	random-variable.h	/^class ErlangVariable : public RandomVariable$/;"	c	namespace:ns3
ErlangVariableImpl	random-variable.cc	/^ErlangVariableImpl::ErlangVariableImpl (unsigned int k, double lambda)$/;"	f	class:ns3::ErlangVariableImpl
ErlangVariableImpl	random-variable.cc	/^class ErlangVariableImpl : public RandomVariableBase$/;"	c	namespace:ns3	file:
Event	scheduler.h	/^  struct Event$/;"	s	class:ns3::Scheduler
EventEnd	synchronizer.cc	/^Synchronizer::EventEnd (void)$/;"	f	class:ns3::Synchronizer
EventId	event-id.cc	/^EventId::EventId ()$/;"	f	class:ns3::EventId
EventId	event-id.cc	/^EventId::EventId (const Ptr<EventImpl> &impl, uint64_t ts, uint32_t context, uint32_t uid)$/;"	f	class:ns3::EventId
EventId	event-id.h	/^class EventId {$/;"	c	namespace:ns3
EventImpl	event-impl.cc	/^EventImpl::EventImpl ()$/;"	f	class:ns3::EventImpl
EventImpl	event-impl.h	/^class EventImpl : public SimpleRefCount<EventImpl>$/;"	c	namespace:ns3
EventKey	scheduler.h	/^  struct EventKey$/;"	s	class:ns3::Scheduler
EventMap	map-scheduler.h	/^  typedef std::map<Scheduler::EventKey, EventImpl*> EventMap;$/;"	t	class:ns3::MapScheduler
EventMapCI	map-scheduler.h	/^  typedef std::map<Scheduler::EventKey, EventImpl*>::const_iterator EventMapCI;$/;"	t	class:ns3::MapScheduler
EventMapI	map-scheduler.h	/^  typedef std::map<Scheduler::EventKey, EventImpl*>::iterator EventMapI;$/;"	t	class:ns3::MapScheduler
EventMemberImplObjTraits	make-event.h	/^struct EventMemberImplObjTraits<T *>$/;"	s	namespace:ns3
EventMemberImplObjTraits	ptr.h	/^struct EventMemberImplObjTraits<Ptr<T> >$/;"	s	namespace:ns3
EventStart	synchronizer.cc	/^Synchronizer::EventStart (void)$/;"	f	class:ns3::Synchronizer
EventWithContext	default-simulator-impl.h	/^  struct EventWithContext {$/;"	s	class:ns3::DefaultSimulatorImpl
Events	list-scheduler.h	/^  typedef std::list<Event> Events;$/;"	t	class:ns3::ListScheduler
EventsI	list-scheduler.h	/^  typedef std::list<Event>::iterator EventsI;$/;"	t	class:ns3::ListScheduler
EventsWithContext	default-simulator-impl.h	/^  typedef std::list<struct EventWithContext> EventsWithContext;$/;"	t	class:ns3::DefaultSimulatorImpl
Exch	heap-scheduler.cc	/^HeapScheduler::Exch (uint32_t a, uint32_t b)$/;"	f	class:ns3::HeapScheduler
Expire	watchdog.cc	/^Watchdog::Expire (void)$/;"	f	class:ns3::Watchdog
ExponentialVariable	random-variable.cc	/^ExponentialVariable::ExponentialVariable ()$/;"	f	class:ns3::ExponentialVariable
ExponentialVariable	random-variable.cc	/^ExponentialVariable::ExponentialVariable (double m)$/;"	f	class:ns3::ExponentialVariable
ExponentialVariable	random-variable.cc	/^ExponentialVariable::ExponentialVariable (double m, double b)$/;"	f	class:ns3::ExponentialVariable
ExponentialVariable	random-variable.h	/^class ExponentialVariable : public RandomVariable$/;"	c	namespace:ns3
ExponentialVariableImpl	random-variable.cc	/^ExponentialVariableImpl::ExponentialVariableImpl ()$/;"	f	class:ns3::ExponentialVariableImpl
ExponentialVariableImpl	random-variable.cc	/^ExponentialVariableImpl::ExponentialVariableImpl (const ExponentialVariableImpl& c)$/;"	f	class:ns3::ExponentialVariableImpl
ExponentialVariableImpl	random-variable.cc	/^ExponentialVariableImpl::ExponentialVariableImpl (double m)$/;"	f	class:ns3::ExponentialVariableImpl
ExponentialVariableImpl	random-variable.cc	/^ExponentialVariableImpl::ExponentialVariableImpl (double m, double b)$/;"	f	class:ns3::ExponentialVariableImpl
ExponentialVariableImpl	random-variable.cc	/^class ExponentialVariableImpl : public RandomVariableBase$/;"	c	namespace:ns3	file:
FATAL_IMPL_H	fatal-impl.h	22;"	d
FS	nstime.h	/^    FS = 5,$/;"	e	enum:ns3::Time::Unit
FatalImpl	fatal-impl.cc	/^namespace FatalImpl {$/;"	n	namespace:ns3	file:
FatalImpl	fatal-impl.h	/^namespace FatalImpl {$/;"	n	namespace:ns3
FdReader	unix-fd-reader.cc	/^FdReader::FdReader ()$/;"	f	class:ns3::FdReader
FdReader	unix-fd-reader.h	/^class FdReader : public SimpleRefCount<FdReader>$/;"	c	namespace:ns3
FemtoSeconds	nstime.h	/^inline Time FemtoSeconds (int64x64_t fs)$/;"	f	namespace:ns3
FemtoSeconds	nstime.h	/^inline Time FemtoSeconds (uint64_t fs)$/;"	f	namespace:ns3
FilterTests	test.cc	/^TestRunnerImpl::FilterTests (std::string testName, enum TestSuite::Type testType) const$/;"	f	class:ns3::TestRunnerImpl
Find	attribute-construction-list.cc	/^AttributeConstructionList::Find (Ptr<const AttributeChecker> checker) const$/;"	f	class:ns3::AttributeConstructionList
Find	names.cc	/^NamesPriv::Find (Ptr<Object> context, std::string name)$/;"	f	class:ns3::NamesPriv
Find	names.cc	/^NamesPriv::Find (std::string path)$/;"	f	class:ns3::NamesPriv
Find	names.cc	/^NamesPriv::Find (std::string path, std::string name)$/;"	f	class:ns3::NamesPriv
Find	names.h	/^Names::Find (Ptr<Object> context, std::string name)$/;"	f	class:ns3::Names
Find	names.h	/^Names::Find (std::string name)$/;"	f	class:ns3::Names
Find	names.h	/^Names::Find (std::string path, std::string name)$/;"	f	class:ns3::Names
FindInternal	names.cc	/^Names::FindInternal (Ptr<Object> context, std::string name)$/;"	f	class:ns3::Names
FindInternal	names.cc	/^Names::FindInternal (std::string name)$/;"	f	class:ns3::Names
FindInternal	names.cc	/^Names::FindInternal (std::string path, std::string name)$/;"	f	class:ns3::Names
FindName	names.cc	/^Names::FindName (Ptr<Object> object)$/;"	f	class:ns3::Names
FindName	names.cc	/^NamesPriv::FindName (Ptr<Object> object)$/;"	f	class:ns3::NamesPriv
FindPath	names.cc	/^Names::FindPath (Ptr<Object> object)$/;"	f	class:ns3::Names
FindPath	names.cc	/^NamesPriv::FindPath (Ptr<Object> object)$/;"	f	class:ns3::NamesPriv
FindSelfDirectory	system-path.cc	/^std::string FindSelfDirectory (void)$/;"	f	namespace:ns3::SystemPath
FlushStreams	fatal-impl.cc	/^FlushStreams (void)$/;"	f	namespace:ns3::FatalImpl
From	nstime.h	/^  inline static Time From (const int64x64_t &value)$/;"	f	class:ns3::Time
From	nstime.h	/^  static inline Time From (const int64x64_t &from, enum Unit timeUnit)$/;"	f	class:ns3::Time
FromDouble	nstime.h	/^  inline static Time FromDouble (double value, enum Unit timeUnit)$/;"	f	class:ns3::Time
FromInteger	nstime.h	/^  inline static Time FromInteger (uint64_t value, enum Unit timeUnit)$/;"	f	class:ns3::Time
FunctionPointerTraits	type-traits.h	/^  typedef FunctionPtrTraits<T> FunctionPointerTraits;$/;"	t	struct:TypeTraits
FunctionPtrTraits	type-traits.h	/^  struct FunctionPtrTraits <U (*)(V1)>$/;"	s	struct:TypeTraits
FunctionPtrTraits	type-traits.h	/^  struct FunctionPtrTraits <U (*)(V1,V2)>$/;"	s	struct:TypeTraits
FunctionPtrTraits	type-traits.h	/^  struct FunctionPtrTraits <U (*)(V1,V2,V3)>$/;"	s	struct:TypeTraits
FunctionPtrTraits	type-traits.h	/^  struct FunctionPtrTraits <U (*)(V1,V2,V3,V4)>$/;"	s	struct:TypeTraits
FunctionPtrTraits	type-traits.h	/^  struct FunctionPtrTraits <U (*)(V1,V2,V3,V4,V5)>$/;"	s	struct:TypeTraits
FunctionPtrTraits	type-traits.h	/^  struct FunctionPtrTraits <U (*)(V1,V2,V3,V4,V5,V6)>$/;"	s	struct:TypeTraits
FunctionPtrTraits	type-traits.h	/^  struct FunctionPtrTraits <U (*)(void)>$/;"	s	struct:TypeTraits
FunctionPtrTraits	type-traits.h	/^  template <typename U> struct FunctionPtrTraits$/;"	s	struct:TypeTraits
FunctorCallbackImpl	callback.h	/^  FunctorCallbackImpl (T const &functor)$/;"	f	class:ns3::FunctorCallbackImpl
FunctorCallbackImpl	callback.h	/^class FunctorCallbackImpl : public CallbackImpl<R,T1,T2,T3,T4,T5,T6,T7,T8,T9> {$/;"	c	namespace:ns3
GLOBAL_VALUE_H	global-value.h	21;"	d
GammaVariable	random-variable.cc	/^GammaVariable::GammaVariable ()$/;"	f	class:ns3::GammaVariable
GammaVariable	random-variable.cc	/^GammaVariable::GammaVariable (double alpha, double beta)$/;"	f	class:ns3::GammaVariable
GammaVariable	random-variable.h	/^class GammaVariable : public RandomVariable$/;"	c	namespace:ns3
GammaVariableImpl	random-variable.cc	/^GammaVariableImpl::GammaVariableImpl (double alpha, double beta)$/;"	f	class:ns3::GammaVariableImpl
GammaVariableImpl	random-variable.cc	/^class GammaVariableImpl : public RandomVariableBase$/;"	c	namespace:ns3	file:
Get	attribute-accessor-helper.h	/^  virtual bool Get (const ObjectBase * object, AttributeValue &val) const {$/;"	f	class:ns3::AccessorHelper
Get	boolean.cc	/^BooleanValue::Get (void) const$/;"	f	class:ns3::BooleanValue
Get	config.cc	/^MatchContainer::Get (uint32_t i) const$/;"	f	class:ns3::Config::MatchContainer
Get	enum.cc	/^EnumValue::Get (void) const$/;"	f	class:ns3::EnumValue
Get	names.cc	/^NamesPriv::Get (void)$/;"	f	class:ns3::NamesPriv
Get	object-ptr-container.cc	/^ObjectPtrContainerAccessor::Get (const ObjectBase * object, AttributeValue &value) const$/;"	f	class:ns3::ObjectPtrContainerAccessor
Get	object-ptr-container.cc	/^ObjectPtrContainerValue::Get (uint32_t i) const$/;"	f	class:ns3::ObjectPtrContainerValue
Get	pointer.h	/^PointerValue::Get (void) const$/;"	f	class:ns3::PointerValue
Get	simulation-singleton.h	/^SimulationSingleton<T>::Get (void)$/;"	f	class:ns3::SimulationSingleton
Get	singleton.h	/^Singleton<T>::Get (void)$/;"	f	class:ns3::Singleton
Get	test.h	/^TestVectors<T>::Get (uint32_t i) const$/;"	f	class:ns3::TestVectors
Get	traced-value.h	/^  T Get (void) const {$/;"	f	class:ns3::TracedValue
GetAccessor	boolean.h	/^bool BooleanValue::GetAccessor (T &v) const$/;"	f	class:ns3::BooleanValue
GetAccessor	callback.h	/^bool CallbackValue::GetAccessor (T &value) const$/;"	f	class:ns3::CallbackValue
GetAccessor	enum.h	/^bool EnumValue::GetAccessor (T &v) const$/;"	f	class:ns3::EnumValue
GetAccessor	pointer.h	/^PointerValue::GetAccessor (Ptr<T> &v) const$/;"	f	class:ns3::PointerValue
GetAggregateIterator	object.cc	/^Object::GetAggregateIterator (void) const$/;"	f	class:ns3::Object
GetAttribute	object-base.cc	/^ObjectBase::GetAttribute (std::string name, AttributeValue &value) const$/;"	f	class:ns3::ObjectBase
GetAttribute	type-id.cc	/^IidManager::GetAttribute(uint16_t uid, uint32_t i) const$/;"	f	class:__anon4::IidManager
GetAttribute	type-id.cc	/^TypeId::GetAttribute(uint32_t i) const$/;"	f	class:ns3::TypeId
GetAttributeFailSafe	object-base.cc	/^ObjectBase::GetAttributeFailSafe (std::string name, AttributeValue &value) const$/;"	f	class:ns3::ObjectBase
GetAttributeFullName	type-id.cc	/^TypeId::GetAttributeFullName (uint32_t i) const$/;"	f	class:ns3::TypeId
GetAttributeN	type-id.cc	/^IidManager::GetAttributeN (uint16_t uid) const$/;"	f	class:__anon4::IidManager
GetAttributeN	type-id.cc	/^TypeId::GetAttributeN (void) const$/;"	f	class:ns3::TypeId
GetBound	random-variable.cc	/^NormalVariableImpl::GetBound (void) const$/;"	f	class:ns3::NormalVariableImpl
GetChecker	global-value.cc	/^GlobalValue::GetChecker (void) const$/;"	f	class:ns3::GlobalValue
GetComponentList	log.cc	/^ComponentList *GetComponentList (void)$/;"	f	namespace:ns3
GetCondition	unix-system-condition.cc	/^SystemCondition::GetCondition (void) $/;"	f	class:ns3::SystemCondition
GetCondition	unix-system-condition.cc	/^SystemConditionPrivate::GetCondition (void)$/;"	f	class:ns3::SystemConditionPrivate
GetConstructor	type-id.cc	/^IidManager::GetConstructor (uint16_t uid) const$/;"	f	class:__anon4::IidManager
GetConstructor	type-id.cc	/^TypeId::GetConstructor (void) const$/;"	f	class:ns3::TypeId
GetContext	default-simulator-impl.cc	/^DefaultSimulatorImpl::GetContext (void) const$/;"	f	class:ns3::DefaultSimulatorImpl
GetContext	event-id.cc	/^EventId::GetContext (void) const$/;"	f	class:ns3::EventId
GetContext	realtime-simulator-impl.cc	/^RealtimeSimulatorImpl::GetContext (void) const$/;"	f	class:ns3::RealtimeSimulatorImpl
GetContext	simulator.cc	/^Simulator::GetContext (void)$/;"	f	class:ns3::Simulator
GetCurrentRealtime	synchronizer.cc	/^Synchronizer::GetCurrentRealtime (void)$/;"	f	class:ns3::Synchronizer
GetDelay	timer.cc	/^Timer::GetDelay (void) const$/;"	f	class:ns3::Timer
GetDelayLeft	default-simulator-impl.cc	/^DefaultSimulatorImpl::GetDelayLeft (const EventId &id) const$/;"	f	class:ns3::DefaultSimulatorImpl
GetDelayLeft	realtime-simulator-impl.cc	/^RealtimeSimulatorImpl::GetDelayLeft (const EventId &id) const$/;"	f	class:ns3::RealtimeSimulatorImpl
GetDelayLeft	simulator.cc	/^Simulator::GetDelayLeft (const EventId &id)$/;"	f	class:ns3::Simulator
GetDelayLeft	timer.cc	/^Timer::GetDelayLeft (void) const$/;"	f	class:ns3::Timer
GetDouble	int64x64-128.h	/^  inline double GetDouble (void) const$/;"	f	class:ns3::int64x64_t
GetDouble	int64x64-cairo.h	/^  inline double GetDouble (void) const$/;"	f	class:ns3::int64x64_t
GetDouble	int64x64-double.h	/^  inline double GetDouble (void) const$/;"	f	class:ns3::int64x64_t
GetDouble	nstime.h	/^  inline double GetDouble (void) const$/;"	f	class:ns3::Time
GetDrift	synchronizer.cc	/^Synchronizer::GetDrift (uint64_t ts)$/;"	f	class:ns3::Synchronizer
GetElapsedReal	unix-system-wall-clock-ms.cc	/^SystemWallClockMs::GetElapsedReal (void) const$/;"	f	class:ns3::SystemWallClockMs
GetElapsedReal	unix-system-wall-clock-ms.cc	/^SystemWallClockMsPrivate::GetElapsedReal (void) const$/;"	f	class:ns3::SystemWallClockMsPrivate
GetElapsedReal	win32-system-wall-clock-ms.cc	/^SystemWallClockMs::GetElapsedReal (void) const$/;"	f	class:ns3::SystemWallClockMs
GetElapsedReal	win32-system-wall-clock-ms.cc	/^SystemWallClockMsPrivate::GetElapsedReal (void) const$/;"	f	class:ns3::SystemWallClockMsPrivate
GetElapsedSystem	unix-system-wall-clock-ms.cc	/^SystemWallClockMs::GetElapsedSystem (void) const$/;"	f	class:ns3::SystemWallClockMs
GetElapsedSystem	unix-system-wall-clock-ms.cc	/^SystemWallClockMsPrivate::GetElapsedSystem (void) const$/;"	f	class:ns3::SystemWallClockMsPrivate
GetElapsedSystem	win32-system-wall-clock-ms.cc	/^SystemWallClockMs::GetElapsedSystem (void) const$/;"	f	class:ns3::SystemWallClockMs
GetElapsedSystem	win32-system-wall-clock-ms.cc	/^SystemWallClockMsPrivate::GetElapsedSystem (void) const$/;"	f	class:ns3::SystemWallClockMsPrivate
GetElapsedUser	unix-system-wall-clock-ms.cc	/^SystemWallClockMs::GetElapsedUser (void) const$/;"	f	class:ns3::SystemWallClockMs
GetElapsedUser	unix-system-wall-clock-ms.cc	/^SystemWallClockMsPrivate::GetElapsedUser (void) const$/;"	f	class:ns3::SystemWallClockMsPrivate
GetElapsedUser	win32-system-wall-clock-ms.cc	/^SystemWallClockMs::GetElapsedUser (void) const$/;"	f	class:ns3::SystemWallClockMs
GetElapsedUser	win32-system-wall-clock-ms.cc	/^SystemWallClockMsPrivate::GetElapsedUser (void) const$/;"	f	class:ns3::SystemWallClockMsPrivate
GetErrorStatus	test.cc	/^TestCase::GetErrorStatus (void) const$/;"	f	class:ns3::TestCase
GetFemtoSeconds	nstime.h	/^  inline int64_t GetFemtoSeconds (void) const$/;"	f	class:ns3::Time
GetGroupName	type-id.cc	/^IidManager::GetGroupName (uint16_t uid) const$/;"	f	class:__anon4::IidManager
GetGroupName	type-id.cc	/^TypeId::GetGroupName (void) const$/;"	f	class:ns3::TypeId
GetHardLimit	realtime-simulator-impl.cc	/^RealtimeSimulatorImpl::GetHardLimit (void) const$/;"	f	class:ns3::RealtimeSimulatorImpl
GetHelp	global-value.cc	/^GlobalValue::GetHelp (void) const$/;"	f	class:ns3::GlobalValue
GetHigh	int64x64-128.h	/^  inline int64_t GetHigh (void) const$/;"	f	class:ns3::int64x64_t
GetHigh	int64x64-cairo.h	/^  inline int64_t GetHigh (void) const$/;"	f	class:ns3::int64x64_t
GetHigh	int64x64-double.h	/^  inline int64_t GetHigh (void) const$/;"	f	class:ns3::int64x64_t
GetImpl	callback.h	/^  Ptr<CallbackImplBase> GetImpl (void) const { return m_impl; }$/;"	f	class:ns3::CallbackBase
GetImpl	simulator.cc	/^static SimulatorImpl * GetImpl (void)$/;"	f	namespace:ns3
GetImplementation	simulator.cc	/^Simulator::GetImplementation (void)$/;"	f	class:ns3::Simulator
GetInstanceTypeId	object.cc	/^Object::GetInstanceTypeId (void) const$/;"	f	class:ns3::Object
GetInteger	nstime.h	/^  inline int64_t GetInteger (void) const$/;"	f	class:ns3::Time
GetInteger	random-variable.cc	/^RandomVariable::GetInteger (void) const$/;"	f	class:ns3::RandomVariable
GetInteger	random-variable.cc	/^uint32_t ConstantVariableImpl::GetInteger ()$/;"	f	class:ns3::ConstantVariableImpl
GetInteger	random-variable.cc	/^uint32_t IntEmpiricalVariableImpl::GetInteger ()$/;"	f	class:ns3::IntEmpiricalVariableImpl
GetInteger	random-variable.cc	/^uint32_t RandomVariableBase::GetInteger ()$/;"	f	class:ns3::RandomVariableBase
GetInteger	random-variable.cc	/^uint32_t UniformVariable::GetInteger (uint32_t s, uint32_t l)$/;"	f	class:ns3::UniformVariable
GetItemTypeId	object-ptr-container.h	/^  virtual TypeId GetItemTypeId (void) const {$/;"	f	class:ns3::internal::AnObjectPtrContainerChecker
GetLow	int64x64-128.h	/^  inline uint64_t GetLow (void) const$/;"	f	class:ns3::int64x64_t
GetLow	int64x64-cairo.h	/^  inline uint64_t GetLow (void) const$/;"	f	class:ns3::int64x64_t
GetLow	int64x64-double.h	/^  inline uint64_t GetLow (void) const$/;"	f	class:ns3::int64x64_t
GetMatchedPath	config.cc	/^MatchContainer::GetMatchedPath (uint32_t i) const$/;"	f	class:ns3::Config::MatchContainer
GetMax	random-variable.cc	/^UniformVariableImpl::GetMax (void) const$/;"	f	class:ns3::UniformVariableImpl
GetMaximumSimulationTime	default-simulator-impl.cc	/^DefaultSimulatorImpl::GetMaximumSimulationTime (void) const$/;"	f	class:ns3::DefaultSimulatorImpl
GetMaximumSimulationTime	realtime-simulator-impl.cc	/^RealtimeSimulatorImpl::GetMaximumSimulationTime (void) const$/;"	f	class:ns3::RealtimeSimulatorImpl
GetMaximumSimulationTime	simulator.cc	/^Simulator::GetMaximumSimulationTime (void)$/;"	f	class:ns3::Simulator
GetMean	random-variable.cc	/^NormalVariableImpl::GetMean (void) const$/;"	f	class:ns3::NormalVariableImpl
GetMicroSeconds	nstime.h	/^  inline int64_t GetMicroSeconds (void) const$/;"	f	class:ns3::Time
GetMilliSeconds	nstime.h	/^  inline int64_t GetMilliSeconds (void) const$/;"	f	class:ns3::Time
GetMin	random-variable.cc	/^UniformVariableImpl::GetMin (void) const$/;"	f	class:ns3::UniformVariableImpl
GetN	config.cc	/^MatchContainer::GetN (void) const$/;"	f	class:ns3::Config::MatchContainer
GetN	object-ptr-container.cc	/^ObjectPtrContainerValue::GetN (void) const$/;"	f	class:ns3::ObjectPtrContainerValue
GetN	test.h	/^TestVectors<T>::GetN (void) const$/;"	f	class:ns3::TestVectors
GetName	global-value.cc	/^GlobalValue::GetName (void) const$/;"	f	class:ns3::GlobalValue
GetName	test.cc	/^TestCase::GetName (void) const$/;"	f	class:ns3::TestCase
GetName	type-id.cc	/^IidManager::GetName (uint16_t uid) const$/;"	f	class:__anon4::IidManager
GetName	type-id.cc	/^TypeId::GetName (void) const$/;"	f	class:ns3::TypeId
GetNanoSeconds	nstime.h	/^  inline int64_t GetNanoSeconds (void) const$/;"	f	class:ns3::Time
GetNormalizedRealtime	wall-clock-synchronizer.cc	/^WallClockSynchronizer::GetNormalizedRealtime (void)$/;"	f	class:ns3::WallClockSynchronizer
GetNsResolution	time.cc	/^Time::GetNsResolution (void)$/;"	f	class:ns3::Time
GetObject	object.h	/^Object::GetObject () const$/;"	f	class:ns3::Object
GetObject	object.h	/^Object::GetObject (TypeId tid) const$/;"	f	class:ns3::Object
GetObject	pointer.cc	/^PointerValue::GetObject (void) const$/;"	f	class:ns3::PointerValue
GetObject	simulation-singleton.h	/^SimulationSingleton<T>::GetObject (void)$/;"	f	class:ns3::SimulationSingleton
GetObjectIid	object-base.cc	/^GetObjectIid (void)$/;"	f	namespace:ns3
GetOrigin	synchronizer.cc	/^Synchronizer::GetOrigin (void)$/;"	f	class:ns3::Synchronizer
GetPackageRun	rng-stream.cc	/^RngStream::GetPackageRun (void)$/;"	f	class:ns3::RngStream
GetPackageSeed	rng-stream.cc	/^RngStream::GetPackageSeed (uint32_t seed[6])$/;"	f	class:ns3::RngStream
GetParent	type-id.cc	/^IidManager::GetParent (uint16_t uid) const$/;"	f	class:__anon4::IidManager
GetParent	type-id.cc	/^TypeId::GetParent (void) const$/;"	f	class:ns3::TypeId
GetPath	config.cc	/^MatchContainer::GetPath (void) const$/;"	f	class:ns3::Config::MatchContainer
GetPicoSeconds	nstime.h	/^  inline int64_t GetPicoSeconds (void) const$/;"	f	class:ns3::Time
GetPointeeTypeId	pointer.h	/^  virtual TypeId GetPointeeTypeId (void) const {$/;"	f	class:ns3::internal::APointerChecker
GetPointer	ptr.h	/^T * GetPointer (const Ptr<T> &p)$/;"	f	namespace:ns3
GetRealtime	wall-clock-synchronizer.cc	/^WallClockSynchronizer::GetRealtime (void)$/;"	f	class:ns3::WallClockSynchronizer
GetReference	callback.h	/^  static T & GetReference (T * const p)$/;"	f	struct:ns3::CallbackTraits
GetReference	make-event.h	/^  static T &GetReference (T *p)$/;"	f	struct:ns3::EventMemberImplObjTraits
GetReference	ptr.h	/^  static T & GetReference (Ptr<T> const p)$/;"	f	struct:ns3::CallbackTraits
GetReference	ptr.h	/^  static T &GetReference (Ptr<T> p) {$/;"	f	struct:ns3::EventMemberImplObjTraits
GetReference	timer-impl.h	/^  static T &GetReference (T *p)$/;"	f	struct:ns3::TimerImplMemberTraits
GetReferenceCount	simple-ref-count.h	/^  inline uint32_t GetReferenceCount (void) const$/;"	f	class:ns3::SimpleRefCount
GetRegistered	type-id.cc	/^IidManager::GetRegistered (uint32_t i) const$/;"	f	class:__anon4::IidManager
GetRegistered	type-id.cc	/^TypeId::GetRegistered (uint32_t i)$/;"	f	class:ns3::TypeId
GetRegisteredN	type-id.cc	/^IidManager::GetRegisteredN (void) const$/;"	f	class:__anon4::IidManager
GetRegisteredN	type-id.cc	/^TypeId::GetRegisteredN (void)$/;"	f	class:ns3::TypeId
GetResolution	time.cc	/^Time::GetResolution (void)$/;"	f	class:ns3::Time
GetResolvedPath	config.cc	/^Resolver::GetResolvedPath (void) const$/;"	f	class:ns3::Resolver
GetRootNamespaceObject	config.cc	/^ConfigImpl::GetRootNamespaceObject (uint32_t i) const$/;"	f	class:ns3::ConfigImpl
GetRootNamespaceObject	config.cc	/^Ptr<Object> GetRootNamespaceObject (uint32_t i)$/;"	f	namespace:ns3::Config
GetRootNamespaceObjectN	config.cc	/^ConfigImpl::GetRootNamespaceObjectN (void) const$/;"	f	class:ns3::ConfigImpl
GetRootNamespaceObjectN	config.cc	/^uint32_t GetRootNamespaceObjectN (void)$/;"	f	namespace:ns3::Config
GetRun	random-variable.cc	/^uint32_t SeedManager::GetRun ()$/;"	f	class:ns3::SeedManager
GetSeconds	nstime.h	/^  inline double GetSeconds (void) const$/;"	f	class:ns3::Time
GetSeed	random-variable.cc	/^uint32_t SeedManager::GetSeed ()$/;"	f	class:ns3::SeedManager
GetState	rng-stream.cc	/^void RngStream::GetState (uint32_t seed[6]) const$/;"	f	class:ns3::RngStream
GetState	timer.cc	/^Timer::GetState (void) const$/;"	f	class:ns3::Timer
GetStreamList	fatal-impl.cc	/^std::list<std::ostream*> *GetStreamList (void)$/;"	f	namespace:ns3::FatalImpl::__anon1
GetSynchronizationMode	realtime-simulator-impl.cc	/^RealtimeSimulatorImpl::GetSynchronizationMode (void) const$/;"	f	class:ns3::RealtimeSimulatorImpl
GetSystemId	default-simulator-impl.cc	/^DefaultSimulatorImpl::GetSystemId (void) const$/;"	f	class:ns3::DefaultSimulatorImpl
GetSystemId	realtime-simulator-impl.cc	/^RealtimeSimulatorImpl::GetSystemId (void) const$/;"	f	class:ns3::RealtimeSimulatorImpl
GetSystemId	simulator.cc	/^Simulator::GetSystemId (void)$/;"	f	class:ns3::Simulator
GetTempDir	test.cc	/^TestRunnerImpl::GetTempDir (void) const$/;"	f	class:ns3::TestRunnerImpl
GetTestType	test.cc	/^TestSuite::GetTestType (void)$/;"	f	class:ns3::TestSuite
GetTimeStep	nstime.h	/^  inline int64_t GetTimeStep (void) const$/;"	f	class:ns3::Time
GetTopLevelSourceDir	test.cc	/^TestRunnerImpl::GetTopLevelSourceDir (void) const$/;"	f	class:ns3::TestRunnerImpl
GetTraceSource	type-id.cc	/^IidManager::GetTraceSource(uint16_t uid, uint32_t i) const$/;"	f	class:__anon4::IidManager
GetTraceSource	type-id.cc	/^TypeId::GetTraceSource(uint32_t i) const$/;"	f	class:ns3::TypeId
GetTraceSourceN	type-id.cc	/^IidManager::GetTraceSourceN (uint16_t uid) const$/;"	f	class:__anon4::IidManager
GetTraceSourceN	type-id.cc	/^TypeId::GetTraceSourceN (void) const$/;"	f	class:ns3::TypeId
GetTs	event-id.cc	/^EventId::GetTs (void) const$/;"	f	class:ns3::EventId
GetTypeId	calendar-scheduler.cc	/^CalendarScheduler::GetTypeId (void)$/;"	f	class:ns3::CalendarScheduler
GetTypeId	default-simulator-impl.cc	/^DefaultSimulatorImpl::GetTypeId (void)$/;"	f	class:ns3::DefaultSimulatorImpl
GetTypeId	heap-scheduler.cc	/^HeapScheduler::GetTypeId (void)$/;"	f	class:ns3::HeapScheduler
GetTypeId	list-scheduler.cc	/^ListScheduler::GetTypeId (void)$/;"	f	class:ns3::ListScheduler
GetTypeId	map-scheduler.cc	/^MapScheduler::GetTypeId (void)$/;"	f	class:ns3::MapScheduler
GetTypeId	object-base.cc	/^ObjectBase::GetTypeId (void)$/;"	f	class:ns3::ObjectBase
GetTypeId	object-factory.cc	/^ObjectFactory::GetTypeId (void) const$/;"	f	class:ns3::ObjectFactory
GetTypeId	object.cc	/^Object::GetTypeId (void)$/;"	f	class:ns3::Object
GetTypeId	realtime-simulator-impl.cc	/^RealtimeSimulatorImpl::GetTypeId (void)$/;"	f	class:ns3::RealtimeSimulatorImpl
GetTypeId	scheduler.cc	/^Scheduler::GetTypeId (void)$/;"	f	class:ns3::Scheduler
GetTypeId	simulator-impl.cc	/^SimulatorImpl::GetTypeId (void)$/;"	f	class:ns3::SimulatorImpl
GetTypeId	synchronizer.cc	/^Synchronizer::GetTypeId (void)$/;"	f	class:ns3::Synchronizer
GetUid	event-id.cc	/^EventId::GetUid (void) const$/;"	f	class:ns3::EventId
GetUid	type-id.cc	/^IidManager::GetUid (std::string name) const$/;"	f	class:__anon4::IidManager
GetUid	type-id.cc	/^TypeId::GetUid (void) const$/;"	f	class:ns3::TypeId
GetUnderlyingTypeInformation	enum.cc	/^EnumChecker::GetUnderlyingTypeInformation (void) const$/;"	f	class:ns3::EnumChecker
GetUnderlyingTypeInformation	object-ptr-container.h	/^  virtual std::string GetUnderlyingTypeInformation (void) const {$/;"	f	class:ns3::internal::AnObjectPtrContainerChecker
GetUnderlyingTypeInformation	pointer.h	/^  virtual std::string GetUnderlyingTypeInformation (void) const {$/;"	f	class:ns3::internal::APointerChecker
GetValue	global-value.cc	/^GlobalValue::GetValue (AttributeValue &value) const$/;"	f	class:ns3::GlobalValue
GetValue	random-variable.cc	/^ErlangVariableImpl::GetValue ()$/;"	f	class:ns3::ErlangVariableImpl
GetValue	random-variable.cc	/^ErlangVariableImpl::GetValue (unsigned int k, double lambda)$/;"	f	class:ns3::ErlangVariableImpl
GetValue	random-variable.cc	/^GammaVariableImpl::GetValue ()$/;"	f	class:ns3::GammaVariableImpl
GetValue	random-variable.cc	/^GammaVariableImpl::GetValue (double alpha, double beta)$/;"	f	class:ns3::GammaVariableImpl
GetValue	random-variable.cc	/^LogNormalVariableImpl::GetValue ()$/;"	f	class:ns3::LogNormalVariableImpl
GetValue	random-variable.cc	/^RandomVariable::GetValue (void) const$/;"	f	class:ns3::RandomVariable
GetValue	random-variable.cc	/^ZetaVariableImpl::GetValue ()$/;"	f	class:ns3::ZetaVariableImpl
GetValue	random-variable.cc	/^ZipfVariableImpl::GetValue ()$/;"	f	class:ns3::ZipfVariableImpl
GetValue	random-variable.cc	/^double ConstantVariableImpl::GetValue ()$/;"	f	class:ns3::ConstantVariableImpl
GetValue	random-variable.cc	/^double DeterministicVariableImpl::GetValue ()$/;"	f	class:ns3::DeterministicVariableImpl
GetValue	random-variable.cc	/^double EmpiricalVariableImpl::GetValue ()$/;"	f	class:ns3::EmpiricalVariableImpl
GetValue	random-variable.cc	/^double ErlangVariable::GetValue (unsigned int k, double lambda) const$/;"	f	class:ns3::ErlangVariable
GetValue	random-variable.cc	/^double ErlangVariable::GetValue (void) const$/;"	f	class:ns3::ErlangVariable
GetValue	random-variable.cc	/^double ExponentialVariableImpl::GetValue ()$/;"	f	class:ns3::ExponentialVariableImpl
GetValue	random-variable.cc	/^double GammaVariable::GetValue (double alpha, double beta) const$/;"	f	class:ns3::GammaVariable
GetValue	random-variable.cc	/^double GammaVariable::GetValue (void) const$/;"	f	class:ns3::GammaVariable
GetValue	random-variable.cc	/^double NormalVariableImpl::GetValue ()$/;"	f	class:ns3::NormalVariableImpl
GetValue	random-variable.cc	/^double ParetoVariableImpl::GetValue ()$/;"	f	class:ns3::ParetoVariableImpl
GetValue	random-variable.cc	/^double SequentialVariableImpl::GetValue ()$/;"	f	class:ns3::SequentialVariableImpl
GetValue	random-variable.cc	/^double TriangularVariableImpl::GetValue ()$/;"	f	class:ns3::TriangularVariableImpl
GetValue	random-variable.cc	/^double UniformVariable::GetValue (double s, double l)$/;"	f	class:ns3::UniformVariable
GetValue	random-variable.cc	/^double UniformVariable::GetValue (void) const$/;"	f	class:ns3::UniformVariable
GetValue	random-variable.cc	/^double UniformVariableImpl::GetValue ()$/;"	f	class:ns3::UniformVariableImpl
GetValue	random-variable.cc	/^double UniformVariableImpl::GetValue (double s, double l)$/;"	f	class:ns3::UniformVariableImpl
GetValue	random-variable.cc	/^double WeibullVariableImpl::GetValue ()$/;"	f	class:ns3::WeibullVariableImpl
GetValueByName	global-value.cc	/^GlobalValue::GetValueByName (std::string name, AttributeValue &value)$/;"	f	class:ns3::GlobalValue
GetValueByNameFailSafe	global-value.cc	/^GlobalValue::GetValueByNameFailSafe (std::string name, AttributeValue &value)$/;"	f	class:ns3::GlobalValue
GetValueTypeName	enum.cc	/^EnumChecker::GetValueTypeName (void) const$/;"	f	class:ns3::EnumChecker
GetValueTypeName	object-ptr-container.h	/^  virtual std::string GetValueTypeName (void) const {$/;"	f	class:ns3::internal::AnObjectPtrContainerChecker
GetValueTypeName	pointer.h	/^  virtual std::string GetValueTypeName (void) const {$/;"	f	class:ns3::internal::APointerChecker
GetVariance	random-variable.cc	/^NormalVariableImpl::GetVariance (void) const$/;"	f	class:ns3::NormalVariableImpl
GetVector	global-value.cc	/^GlobalValue::GetVector (void)$/;"	f	class:ns3::GlobalValue
GlobalValue	global-value.cc	/^GlobalValue::GlobalValue (std::string name, std::string help,$/;"	f	class:ns3::GlobalValue
GlobalValue	global-value.h	/^class GlobalValue$/;"	c	namespace:ns3
HAVE_MKDIR_H	system-path.cc	33;"	d	file:
HAVE_OPENDIR	system-path.cc	28;"	d	file:
HAVE_STDINT_H	cairo-wideint-private.h	42;"	d
HAVE_STDINT_H	cairo-wideint-private.h	44;"	d
HAVE_UINT64_T	cairo-wideint-private.h	37;"	d
HAVE_UINT64_T	cairo-wideint-private.h	64;"	d
HEAP_SCHEDULER_H	heap-scheduler.h	22;"	d
HP128_MASK_LO	int64x64-128.h	113;"	d
HP128_MASK_LO	int64x64-128.h	17;"	d
HP128_MAX_64	int64x64-128.h	112;"	d
HP128_MAX_64	int64x64-128.h	16;"	d
HPCAIRO_MAX_64	int64x64-cairo.h	26;"	d
HPCAIRO_MAX_64	int64x64-cairo.h	32;"	d
HPCAIRO_MAX_64	int64x64-cairo.h	80;"	d
HPCAIRO_MAX_64	int64x64-cairo.h	89;"	d
HandleArgument	command-line.cc	/^CommandLine::HandleArgument (std::string name, std::string value) const$/;"	f	class:ns3::CommandLine
HasAttribute	type-id.cc	/^IidManager::HasAttribute (uint16_t uid,$/;"	f	class:__anon4::IidManager
HasConstructor	type-id.cc	/^IidManager::HasConstructor (uint16_t uid) const$/;"	f	class:__anon4::IidManager
HasConstructor	type-id.cc	/^TypeId::HasConstructor (void) const$/;"	f	class:ns3::TypeId
HasGetter	object-ptr-container.cc	/^ObjectPtrContainerAccessor::HasGetter (void) const$/;"	f	class:ns3::ObjectPtrContainerAccessor
HasNext	object.cc	/^Object::AggregateIterator::HasNext (void) const$/;"	f	class:ns3::Object::AggregateIterator
HasParent	type-id.cc	/^TypeId::HasParent (void) const$/;"	f	class:ns3::TypeId
HasSetter	object-ptr-container.cc	/^ObjectPtrContainerAccessor::HasSetter (void) const$/;"	f	class:ns3::ObjectPtrContainerAccessor
HasTraceSource	type-id.cc	/^IidManager::HasTraceSource (uint16_t uid,$/;"	f	class:__anon4::IidManager
HasUnderlyingTypeInformation	enum.cc	/^EnumChecker::HasUnderlyingTypeInformation (void) const$/;"	f	class:ns3::EnumChecker
HasUnderlyingTypeInformation	object-ptr-container.h	/^  virtual bool HasUnderlyingTypeInformation (void) const {$/;"	f	class:ns3::internal::AnObjectPtrContainerChecker
HasUnderlyingTypeInformation	pointer.h	/^  virtual bool HasUnderlyingTypeInformation (void) const {$/;"	f	class:ns3::internal::APointerChecker
Hash	calendar-scheduler.cc	/^CalendarScheduler::Hash (uint64_t ts) const$/;"	f	class:ns3::CalendarScheduler
HeapScheduler	heap-scheduler.cc	/^HeapScheduler::HeapScheduler ()$/;"	f	class:ns3::HeapScheduler
HeapScheduler	heap-scheduler.h	/^class HeapScheduler : public Scheduler$/;"	c	namespace:ns3
HideFromDocumentation	type-id.cc	/^IidManager::HideFromDocumentation (uint16_t uid)$/;"	f	class:__anon4::IidManager
HideFromDocumentation	type-id.cc	/^TypeId::HideFromDocumentation (void)$/;"	f	class:ns3::TypeId
I	cairo-wideint-private.h	331;"	d
I	cairo-wideint-private.h	89;"	d
INFINITE_VALUE	random-variable.cc	/^  static const double INFINITE_VALUE;$/;"	m	class:ns3::NormalVariableImpl	file:
INFINITE_VALUE	random-variable.cc	/^const double NormalVariableImpl::INFINITE_VALUE = 1e307;$/;"	m	class:ns3::NormalVariableImpl	file:
INT16_MAX	cairo-wideint-private.h	70;"	d
INT16_MIN	cairo-wideint-private.h	67;"	d
INT64X64_128_H	int64x64-128.h	3;"	d
INT64X64_CAIRO_H	int64x64-cairo.h	3;"	d
INT64X64_DOUBLE_H	int64x64-double.h	3;"	d
INT64X64_H	int64x64.h	2;"	d
INT64X64_OP_ARITH	int64x64.h	32;"	d
INT64X64_OP_ARITH_TYPE	int64x64.h	18;"	d
INT64X64_OP_CMP	int64x64.h	61;"	d
INT64X64_OP_CMP_TYPE	int64x64.h	51;"	d
INTEGER_H	integer.h	21;"	d
INT_TO_TYPE_H	int-to-type.h	2;"	d
Ig	rng-stream.h	/^  double Cg[6], Bg[6], Ig[6];$/;"	m	class:ns3::RngStream
IidInformation	type-id.cc	/^  struct IidInformation {$/;"	s	class:__anon4::IidManager	file:
IidManager	type-id.cc	/^IidManager::IidManager ()$/;"	f	class:__anon4::IidManager
IidManager	type-id.cc	/^class IidManager$/;"	c	namespace:__anon4	file:
IncreasedPrecis	rng-stream.cc	/^void RngStream::IncreasedPrecis (bool incp)$/;"	f	class:ns3::RngStream
Indent	test.cc	/^Indent::Indent (int _level)$/;"	f	class:ns3::Indent
Indent	test.cc	/^struct Indent$/;"	s	namespace:ns3	file:
Information	nstime.h	/^  struct Information$/;"	s	class:ns3::Time
Init	calendar-scheduler.cc	/^CalendarScheduler::Init (uint32_t nBuckets,$/;"	f	class:ns3::CalendarScheduler
InitializeFromEnv	global-value.cc	/^GlobalValue::InitializeFromEnv (void)$/;"	f	class:ns3::GlobalValue
InitializeStream	rng-stream.cc	/^void RngStream::InitializeStream ()$/;"	f	class:ns3::RngStream
Insert	calendar-scheduler.cc	/^CalendarScheduler::Insert (const Event &ev)$/;"	f	class:ns3::CalendarScheduler
Insert	heap-scheduler.cc	/^HeapScheduler::Insert (const Event &ev)$/;"	f	class:ns3::HeapScheduler
Insert	list-scheduler.cc	/^ListScheduler::Insert (const Event &ev)$/;"	f	class:ns3::ListScheduler
Insert	map-scheduler.cc	/^MapScheduler::Insert (const Event &ev)$/;"	f	class:ns3::MapScheduler
Instance	test.cc	/^TestRunnerImpl::Instance (void)$/;"	f	class:ns3::TestRunnerImpl
IntEmpiricalVariable	random-variable.cc	/^IntEmpiricalVariable::IntEmpiricalVariable ()$/;"	f	class:ns3::IntEmpiricalVariable
IntEmpiricalVariable	random-variable.h	/^class IntEmpiricalVariable : public EmpiricalVariable$/;"	c	namespace:ns3
IntEmpiricalVariableImpl	random-variable.cc	/^IntEmpiricalVariableImpl::IntEmpiricalVariableImpl ()$/;"	f	class:ns3::IntEmpiricalVariableImpl
IntEmpiricalVariableImpl	random-variable.cc	/^class IntEmpiricalVariableImpl : public EmpiricalVariableImpl$/;"	c	namespace:ns3	file:
IntToType	int-to-type.h	/^struct IntToType$/;"	s	namespace:ns3
Interpolate	random-variable.cc	/^double EmpiricalVariableImpl::Interpolate (double c1, double c2,$/;"	f	class:ns3::EmpiricalVariableImpl
Interpolate	random-variable.cc	/^double IntEmpiricalVariableImpl::Interpolate (double c1, double c2,$/;"	f	class:ns3::IntEmpiricalVariableImpl
InvA1	rng-stream.cc	/^const double InvA1[3][3] = {          \/\/ Inverse of A1p0$/;"	m	namespace:__anon3	file:
InvA2	rng-stream.cc	/^const double InvA2[3][3] = {          \/\/ Inverse of A2p0$/;"	m	namespace:__anon3	file:
Invert	int64x64-128.cc	/^int64x64_t::Invert (uint64_t v)$/;"	f	class:ns3::int64x64_t
Invert	int64x64-cairo.cc	/^int64x64_t::Invert (uint64_t v)$/;"	f	class:ns3::int64x64_t
Invert	int64x64-double.h	/^  static inline int64x64_t Invert (uint64_t v)$/;"	f	class:ns3::int64x64_t
Invoke	event-impl.cc	/^EventImpl::Invoke (void)$/;"	f	class:ns3::EventImpl
IsBottom	heap-scheduler.cc	/^HeapScheduler::IsBottom (uint32_t id) const$/;"	f	class:ns3::HeapScheduler
IsCancelled	event-impl.cc	/^EventImpl::IsCancelled (void)$/;"	f	class:ns3::EventImpl
IsChildOf	type-id.cc	/^TypeId::IsChildOf (TypeId other) const$/;"	f	class:ns3::TypeId
IsDuplicateName	names.cc	/^NamesPriv::IsDuplicateName (NameNode *node, std::string name)$/;"	f	class:ns3::NamesPriv
IsEmpty	calendar-scheduler.cc	/^CalendarScheduler::IsEmpty (void) const$/;"	f	class:ns3::CalendarScheduler
IsEmpty	heap-scheduler.cc	/^HeapScheduler::IsEmpty (void) const$/;"	f	class:ns3::HeapScheduler
IsEmpty	list-scheduler.cc	/^ListScheduler::IsEmpty (void) const$/;"	f	class:ns3::ListScheduler
IsEmpty	map-scheduler.cc	/^MapScheduler::IsEmpty (void) const$/;"	f	class:ns3::MapScheduler
IsEnabled	log.cc	/^LogComponent::IsEnabled (enum LogLevel level) const$/;"	f	class:ns3::LogComponent
IsEqual	callback.h	/^  bool IsEqual (const CallbackBase &other) const {$/;"	f	class:ns3::Callback
IsEqual	callback.h	/^  virtual bool IsEqual (Ptr<const CallbackImplBase> other) const {$/;"	f	class:ns3::BoundFunctorCallbackImpl
IsEqual	callback.h	/^  virtual bool IsEqual (Ptr<const CallbackImplBase> other) const {$/;"	f	class:ns3::FunctorCallbackImpl
IsEqual	callback.h	/^  virtual bool IsEqual (Ptr<const CallbackImplBase> other) const {$/;"	f	class:ns3::MemPtrCallbackImpl
IsExpired	default-simulator-impl.cc	/^DefaultSimulatorImpl::IsExpired (const EventId &ev) const$/;"	f	class:ns3::DefaultSimulatorImpl
IsExpired	event-id.cc	/^EventId::IsExpired (void) const$/;"	f	class:ns3::EventId
IsExpired	realtime-simulator-impl.cc	/^RealtimeSimulatorImpl::IsExpired (const EventId &ev) const$/;"	f	class:ns3::RealtimeSimulatorImpl
IsExpired	simulator.cc	/^Simulator::IsExpired (const EventId &id)$/;"	f	class:ns3::Simulator
IsExpired	timer.cc	/^Timer::IsExpired (void) const$/;"	f	class:ns3::Timer
IsFailed	test.cc	/^TestCase::IsFailed (void) const$/;"	f	class:ns3::TestCase
IsFinished	default-simulator-impl.cc	/^DefaultSimulatorImpl::IsFinished (void) const$/;"	f	class:ns3::DefaultSimulatorImpl
IsFinished	realtime-simulator-impl.cc	/^RealtimeSimulatorImpl::IsFinished (void) const$/;"	f	class:ns3::RealtimeSimulatorImpl
IsFinished	simulator.cc	/^Simulator::IsFinished (void)$/;"	f	class:ns3::Simulator
IsFunctionPointer	type-traits.h	/^    enum { IsFunctionPointer = 0};$/;"	e	enum:TypeTraits::FunctionPtrTraits::__anon10
IsFunctionPointer	type-traits.h	/^    enum { IsFunctionPointer = 1};$/;"	e	enum:TypeTraits::FunctionPtrTraits::__anon11
IsFunctionPointer	type-traits.h	/^    enum { IsFunctionPointer = 1};$/;"	e	enum:TypeTraits::FunctionPtrTraits::__anon13
IsFunctionPointer	type-traits.h	/^    enum { IsFunctionPointer = 1};$/;"	e	enum:TypeTraits::FunctionPtrTraits::__anon15
IsFunctionPointer	type-traits.h	/^    enum { IsFunctionPointer = 1};$/;"	e	enum:TypeTraits::FunctionPtrTraits::__anon17
IsFunctionPointer	type-traits.h	/^    enum { IsFunctionPointer = 1};$/;"	e	enum:TypeTraits::FunctionPtrTraits::__anon19
IsFunctionPointer	type-traits.h	/^    enum { IsFunctionPointer = 1};$/;"	e	enum:TypeTraits::FunctionPtrTraits::__anon21
IsFunctionPointer	type-traits.h	/^    enum { IsFunctionPointer = 1};$/;"	e	enum:TypeTraits::FunctionPtrTraits::__anon23
IsFunctionPointer	type-traits.h	/^  enum { IsFunctionPointer = FunctionPtrTraits<T>::IsFunctionPointer};$/;"	e	enum:TypeTraits::__anon57
IsLessStrictly	heap-scheduler.cc	/^HeapScheduler::IsLessStrictly (uint32_t a, uint32_t b) const$/;"	f	class:ns3::HeapScheduler
IsNamed	names.cc	/^NamesPriv::IsNamed (Ptr<Object> object)$/;"	f	class:ns3::NamesPriv
IsNegative	int64x64-cairo.h	/^  inline bool IsNegative (void) const$/;"	f	class:ns3::int64x64_t
IsNegative	nstime.h	/^  inline bool IsNegative (void) const$/;"	f	class:ns3::Time
IsNoneEnabled	log.cc	/^LogComponent::IsNoneEnabled (void) const$/;"	f	class:ns3::LogComponent
IsNull	callback.h	/^  bool IsNull (void) const {$/;"	f	class:ns3::Callback
IsPointer	type-traits.h	/^    enum { IsPointer = 0};$/;"	e	enum:TypeTraits::PointerTraits::__anon8
IsPointer	type-traits.h	/^    enum { IsPointer = 1};$/;"	e	enum:TypeTraits::PointerTraits::__anon9
IsPointer	type-traits.h	/^  enum { IsPointer = PointerTraits<T>::IsPointer};$/;"	e	enum:TypeTraits::__anon55
IsPointerToMember	type-traits.h	/^    enum { IsPointerToMember = 0};$/;"	e	enum:TypeTraits::PtrToMemberTraits::__anon25
IsPointerToMember	type-traits.h	/^    enum { IsPointerToMember = 1};$/;"	e	enum:TypeTraits::PtrToMemberTraits::__anon26
IsPointerToMember	type-traits.h	/^    enum { IsPointerToMember = 1};$/;"	e	enum:TypeTraits::PtrToMemberTraits::__anon28
IsPointerToMember	type-traits.h	/^    enum { IsPointerToMember = 1};$/;"	e	enum:TypeTraits::PtrToMemberTraits::__anon30
IsPointerToMember	type-traits.h	/^    enum { IsPointerToMember = 1};$/;"	e	enum:TypeTraits::PtrToMemberTraits::__anon32
IsPointerToMember	type-traits.h	/^    enum { IsPointerToMember = 1};$/;"	e	enum:TypeTraits::PtrToMemberTraits::__anon34
IsPointerToMember	type-traits.h	/^    enum { IsPointerToMember = 1};$/;"	e	enum:TypeTraits::PtrToMemberTraits::__anon36
IsPointerToMember	type-traits.h	/^    enum { IsPointerToMember = 1};$/;"	e	enum:TypeTraits::PtrToMemberTraits::__anon38
IsPointerToMember	type-traits.h	/^    enum { IsPointerToMember = 1};$/;"	e	enum:TypeTraits::PtrToMemberTraits::__anon40
IsPointerToMember	type-traits.h	/^    enum { IsPointerToMember = 1};$/;"	e	enum:TypeTraits::PtrToMemberTraits::__anon42
IsPointerToMember	type-traits.h	/^    enum { IsPointerToMember = 1};$/;"	e	enum:TypeTraits::PtrToMemberTraits::__anon44
IsPointerToMember	type-traits.h	/^    enum { IsPointerToMember = 1};$/;"	e	enum:TypeTraits::PtrToMemberTraits::__anon46
IsPointerToMember	type-traits.h	/^    enum { IsPointerToMember = 1};$/;"	e	enum:TypeTraits::PtrToMemberTraits::__anon48
IsPointerToMember	type-traits.h	/^    enum { IsPointerToMember = 1};$/;"	e	enum:TypeTraits::PtrToMemberTraits::__anon50
IsPointerToMember	type-traits.h	/^    enum { IsPointerToMember = 1};$/;"	e	enum:TypeTraits::PtrToMemberTraits::__anon52
IsPointerToMember	type-traits.h	/^  enum { IsPointerToMember = PtrToMemberTraits<T>::IsPointerToMember};$/;"	e	enum:TypeTraits::__anon54
IsPositive	nstime.h	/^  inline bool IsPositive (void) const$/;"	f	class:ns3::Time
IsReference	type-traits.h	/^    enum { IsReference = 0};$/;"	e	enum:TypeTraits::ReferenceTraits::__anon6
IsReference	type-traits.h	/^    enum { IsReference = 1};$/;"	e	enum:TypeTraits::ReferenceTraits::__anon7
IsReference	type-traits.h	/^  enum { IsReference = ReferenceTraits<T>::IsReference};$/;"	e	enum:TypeTraits::__anon56
IsRoot	heap-scheduler.cc	/^HeapScheduler::IsRoot (uint32_t id) const$/;"	f	class:ns3::HeapScheduler
IsRunning	event-id.cc	/^EventId::IsRunning (void) const$/;"	f	class:ns3::EventId
IsRunning	timer.cc	/^Timer::IsRunning (void) const$/;"	f	class:ns3::Timer
IsStatusFailure	test.cc	/^TestCase::IsStatusFailure (void) const$/;"	f	class:ns3::TestCase
IsStatusSuccess	test.cc	/^TestCase::IsStatusSuccess (void) const$/;"	f	class:ns3::TestCase
IsStrictlyNegative	nstime.h	/^  inline bool IsStrictlyNegative (void) const$/;"	f	class:ns3::Time
IsStrictlyPositive	nstime.h	/^  inline bool IsStrictlyPositive (void) const$/;"	f	class:ns3::Time
IsSuspended	timer.cc	/^Timer::IsSuspended (void) const$/;"	f	class:ns3::Timer
IsTopLevelSourceDir	test.cc	/^TestRunnerImpl::IsTopLevelSourceDir (std::string path) const$/;"	f	class:ns3::TestRunnerImpl
IsZero	nstime.h	/^  inline bool IsZero (void) const$/;"	f	class:ns3::Time
Item	attribute-construction-list.h	/^  struct Item $/;"	s	class:ns3::AttributeConstructionList
Item	command-line.h	/^  class Item $/;"	c	class:ns3::CommandLine
Items	command-line.h	/^  typedef std::list<Item *> Items;$/;"	t	class:ns3::CommandLine
Iterator	config.h	/^  typedef std::vector<Ptr<Object> >::const_iterator Iterator;$/;"	t	class:ns3::Config::MatchContainer
Iterator	global-value.h	/^  typedef Vector::const_iterator Iterator;$/;"	t	class:ns3::GlobalValue
Iterator	object-ptr-container.h	/^  typedef std::map<uint32_t, Ptr<Object> >::const_iterator Iterator;$/;"	t	class:ns3::ObjectPtrContainerValue
Iterator	type-id.cc	/^  typedef std::vector<struct IidInformation>::const_iterator Iterator;$/;"	t	class:__anon4::IidManager	file:
Join	system-path.cc	/^std::string Join (std::list<std::string>::const_iterator begin,$/;"	f	namespace:ns3::SystemPath
Join	system-thread.cc	/^SystemThread::Join (void)$/;"	f	class:ns3::SystemThread
LAST	nstime.h	/^    LAST = 6$/;"	e	enum:ns3::Time::Unit
LIST_SCHEDULER_H	list-scheduler.h	22;"	d
LOG_ALL	log.h	/^  LOG_ALL            = 0x1fffffff, \/\/ print everything$/;"	e	enum:ns3::LogLevel
LOG_DEBUG	log.h	/^  LOG_DEBUG          = 0x00000004, \/\/ rare ad-hoc debug messages$/;"	e	enum:ns3::LogLevel
LOG_ERROR	log.h	/^  LOG_ERROR          = 0x00000001, \/\/ serious error messages only$/;"	e	enum:ns3::LogLevel
LOG_FUNCTION	log.h	/^  LOG_FUNCTION       = 0x00000010, \/\/ function tracing$/;"	e	enum:ns3::LogLevel
LOG_H	log.h	22;"	d
LOG_INFO	log.h	/^  LOG_INFO           = 0x00000008, \/\/ informational messages (e.g., banners)$/;"	e	enum:ns3::LogLevel
LOG_LEVEL_ALL	log.h	/^  LOG_LEVEL_ALL      = LOG_ALL,$/;"	e	enum:ns3::LogLevel
LOG_LEVEL_DEBUG	log.h	/^  LOG_LEVEL_DEBUG    = 0x00000007,$/;"	e	enum:ns3::LogLevel
LOG_LEVEL_ERROR	log.h	/^  LOG_LEVEL_ERROR    = 0x00000001,$/;"	e	enum:ns3::LogLevel
LOG_LEVEL_FUNCTION	log.h	/^  LOG_LEVEL_FUNCTION = 0x0000001f, $/;"	e	enum:ns3::LogLevel
LOG_LEVEL_INFO	log.h	/^  LOG_LEVEL_INFO     = 0x0000000f,$/;"	e	enum:ns3::LogLevel
LOG_LEVEL_LOGIC	log.h	/^  LOG_LEVEL_LOGIC    = 0x0000003f,$/;"	e	enum:ns3::LogLevel
LOG_LEVEL_WARN	log.h	/^  LOG_LEVEL_WARN     = 0x00000003,$/;"	e	enum:ns3::LogLevel
LOG_LOGIC	log.h	/^  LOG_LOGIC          = 0x00000020, \/\/ control flow tracing within functions$/;"	e	enum:ns3::LogLevel
LOG_NONE	log.h	/^  LOG_NONE           = 0x00000000, \/\/ no logging$/;"	e	enum:ns3::LogLevel
LOG_PREFIX_FUNC	log.h	/^  LOG_PREFIX_FUNC    = 0x80000000, \/\/ prefix all trace prints with function$/;"	e	enum:ns3::LogLevel
LOG_PREFIX_NODE	log.h	/^  LOG_PREFIX_NODE    = 0x20000000  \/\/ prefix all trace prints with simulation node$/;"	e	enum:ns3::LogLevel
LOG_PREFIX_TIME	log.h	/^  LOG_PREFIX_TIME    = 0x40000000, \/\/ prefix all trace prints with simulation time$/;"	e	enum:ns3::LogLevel
LOG_WARN	log.h	/^  LOG_WARN           = 0x00000002, \/\/ warning messages$/;"	e	enum:ns3::LogLevel
Last	heap-scheduler.cc	/^HeapScheduler::Last (void) const$/;"	f	class:ns3::HeapScheduler
LeftChild	heap-scheduler.cc	/^HeapScheduler::LeftChild (uint32_t id) const$/;"	f	class:ns3::HeapScheduler
ListScheduler	list-scheduler.cc	/^ListScheduler::ListScheduler ()$/;"	f	class:ns3::ListScheduler
ListScheduler	list-scheduler.h	/^class ListScheduler : public Scheduler$/;"	c	namespace:ns3
Lock	unix-system-mutex.cc	/^SystemMutex::Lock ()$/;"	f	class:ns3::SystemMutex
Lock	unix-system-mutex.cc	/^SystemMutexPrivate::Lock (void)$/;"	f	class:ns3::SystemMutexPrivate
LogComponent	log.cc	/^LogComponent::LogComponent (char const * name)$/;"	f	class:ns3::LogComponent
LogComponent	log.h	/^class LogComponent {$/;"	c	namespace:ns3
LogComponentDisable	log.cc	/^LogComponentDisable (char const *name, enum LogLevel level)$/;"	f	namespace:ns3
LogComponentDisableAll	log.cc	/^LogComponentDisableAll (enum LogLevel level)$/;"	f	namespace:ns3
LogComponentEnable	log.cc	/^LogComponentEnable (char const *name, enum LogLevel level)$/;"	f	namespace:ns3
LogComponentEnableAll	log.cc	/^LogComponentEnableAll (enum LogLevel level)$/;"	f	namespace:ns3
LogComponentPrintList	log.cc	/^LogComponentPrintList (void)$/;"	f	namespace:ns3
LogGetNodePrinter	log.cc	/^LogNodePrinter LogGetNodePrinter (void)$/;"	f	namespace:ns3
LogGetTimePrinter	log.cc	/^LogTimePrinter LogGetTimePrinter (void)$/;"	f	namespace:ns3
LogLevel	log.h	/^enum LogLevel {$/;"	g	namespace:ns3
LogNodePrinter	log.h	/^typedef void (*LogNodePrinter)(std::ostream &os);$/;"	t	namespace:ns3
LogNormalVariable	random-variable.cc	/^LogNormalVariable::LogNormalVariable (double mu, double sigma)$/;"	f	class:ns3::LogNormalVariable
LogNormalVariable	random-variable.h	/^class LogNormalVariable : public RandomVariable$/;"	c	namespace:ns3
LogNormalVariableImpl	random-variable.cc	/^LogNormalVariableImpl::LogNormalVariableImpl (double mu, double sigma)$/;"	f	class:ns3::LogNormalVariableImpl
LogNormalVariableImpl	random-variable.cc	/^class LogNormalVariableImpl : public RandomVariableBase$/;"	c	namespace:ns3	file:
LogSetNodePrinter	log.cc	/^void LogSetNodePrinter (LogNodePrinter printer)$/;"	f	namespace:ns3
LogSetTimePrinter	log.cc	/^void LogSetTimePrinter (LogTimePrinter printer)$/;"	f	namespace:ns3
LogTimePrinter	log.h	/^typedef void (*LogTimePrinter)(std::ostream &os);$/;"	t	namespace:ns3
LookupAttributeByName	type-id.cc	/^TypeId::LookupAttributeByName (std::string name, struct TypeId::AttributeInformation *info) const$/;"	f	class:ns3::TypeId
LookupByName	type-id.cc	/^TypeId::LookupByName (std::string name)$/;"	f	class:ns3::TypeId
LookupByNameFailSafe	type-id.cc	/^TypeId::LookupByNameFailSafe (std::string name, TypeId *tid)$/;"	f	class:ns3::TypeId
LookupInformation	type-id.cc	/^IidManager::LookupInformation (uint16_t uid) const$/;"	f	class:__anon4::IidManager
LookupMatches	config.cc	/^Config::MatchContainer LookupMatches (std::string path)$/;"	f	namespace:ns3::Config
LookupMatches	config.cc	/^ConfigImpl::LookupMatches (std::string path)$/;"	f	class:ns3::ConfigImpl
LookupTraceSourceByName	type-id.cc	/^TypeId::LookupTraceSourceByName (std::string name) const$/;"	f	class:ns3::TypeId
MAKE_EVENT_H	make-event.h	2;"	d
MAP_SCHEDULER_H	map-scheduler.h	22;"	d
MASK_HI	int64x64-128.cc	17;"	d	file:
MASK_LO	int64x64-128.cc	16;"	d	file:
MS	nstime.h	/^    MS = 1,$/;"	e	enum:ns3::Time::Unit
MakeAccessorHelper	attribute-accessor-helper.h	/^MakeAccessorHelper (T1 a1)$/;"	f	namespace:ns3
MakeAccessorHelper	attribute-accessor-helper.h	/^MakeAccessorHelper (T1 a1, T2 a2)$/;"	f	namespace:ns3
MakeBoundCallback	callback.h	/^Callback<R,T1,T2,T3,T4,T5,T6,T7,T8> MakeBoundCallback (R (*fnPtr)(TX,T1,T2,T3,T4,T5,T6,T7,T8), ARG a) {$/;"	f	namespace:ns3
MakeBoundCallback	callback.h	/^Callback<R,T1,T2,T3,T4,T5,T6,T7> MakeBoundCallback (R (*fnPtr)(TX,T1,T2,T3,T4,T5,T6,T7), ARG a) {$/;"	f	namespace:ns3
MakeBoundCallback	callback.h	/^Callback<R,T1,T2,T3,T4,T5,T6> MakeBoundCallback (R (*fnPtr)(TX,T1,T2,T3,T4,T5,T6), ARG a) {$/;"	f	namespace:ns3
MakeBoundCallback	callback.h	/^Callback<R,T1,T2,T3,T4,T5> MakeBoundCallback (R (*fnPtr)(TX,T1,T2,T3,T4,T5), ARG a) {$/;"	f	namespace:ns3
MakeBoundCallback	callback.h	/^Callback<R,T1,T2,T3,T4> MakeBoundCallback (R (*fnPtr)(TX,T1,T2,T3,T4), ARG a) {$/;"	f	namespace:ns3
MakeBoundCallback	callback.h	/^Callback<R,T1,T2,T3> MakeBoundCallback (R (*fnPtr)(TX,T1,T2,T3), ARG a) {$/;"	f	namespace:ns3
MakeBoundCallback	callback.h	/^Callback<R,T1,T2> MakeBoundCallback (R (*fnPtr)(TX,T1,T2), ARG a) {$/;"	f	namespace:ns3
MakeBoundCallback	callback.h	/^Callback<R,T1> MakeBoundCallback (R (*fnPtr)(TX,T1), ARG a) {$/;"	f	namespace:ns3
MakeBoundCallback	callback.h	/^Callback<R> MakeBoundCallback (R (*fnPtr)(TX), ARG a) {$/;"	f	namespace:ns3
MakeCallback	callback.h	/^Callback<R,T1,T2,T3,T4,T5,T6,T7,T8,T9> MakeCallback (R (*fnPtr)(T1,T2,T3,T4,T5,T6,T7,T8,T9)) {$/;"	f	namespace:ns3
MakeCallback	callback.h	/^Callback<R,T1,T2,T3,T4,T5,T6,T7,T8> MakeCallback (R (*fnPtr)(T1,T2,T3,T4,T5,T6,T7,T8)) {$/;"	f	namespace:ns3
MakeCallback	callback.h	/^Callback<R,T1,T2,T3,T4,T5,T6,T7> MakeCallback (R (*fnPtr)(T1,T2,T3,T4,T5,T6,T7)) {$/;"	f	namespace:ns3
MakeCallback	callback.h	/^Callback<R,T1,T2,T3,T4,T5,T6> MakeCallback (R (*fnPtr)(T1,T2,T3,T4,T5,T6)) {$/;"	f	namespace:ns3
MakeCallback	callback.h	/^Callback<R,T1,T2,T3,T4,T5> MakeCallback (R (*fnPtr)(T1,T2,T3,T4,T5)) {$/;"	f	namespace:ns3
MakeCallback	callback.h	/^Callback<R,T1,T2,T3,T4> MakeCallback (R (*fnPtr)(T1,T2,T3,T4)) {$/;"	f	namespace:ns3
MakeCallback	callback.h	/^Callback<R,T1,T2,T3> MakeCallback (R (*fnPtr)(T1,T2,T3)) {$/;"	f	namespace:ns3
MakeCallback	callback.h	/^Callback<R,T1,T2> MakeCallback (R (*fnPtr)(T1,T2)) {$/;"	f	namespace:ns3
MakeCallback	callback.h	/^Callback<R,T1> MakeCallback (R (*fnPtr)(T1)) {$/;"	f	namespace:ns3
MakeCallback	callback.h	/^Callback<R> MakeCallback (R (*fnPtr)()) {$/;"	f	namespace:ns3
MakeDirectories	system-path.cc	/^MakeDirectories (std::string path)$/;"	f	namespace:ns3::SystemPath
MakeDoubleChecker	double.cc	/^Ptr<const AttributeChecker> MakeDoubleChecker (double min, double max, std::string name)$/;"	f	namespace:ns3::internal
MakeDoubleChecker	double.h	/^Ptr<const AttributeChecker> MakeDoubleChecker (double min)$/;"	f	namespace:ns3
MakeDoubleChecker	double.h	/^Ptr<const AttributeChecker> MakeDoubleChecker (double min, double max)$/;"	f	namespace:ns3
MakeDoubleChecker	double.h	/^Ptr<const AttributeChecker> MakeDoubleChecker (void)$/;"	f	namespace:ns3
MakeEnumAccessor	enum.h	/^Ptr<const AttributeAccessor> MakeEnumAccessor (T1 a1)$/;"	f	namespace:ns3
MakeEnumAccessor	enum.h	/^Ptr<const AttributeAccessor> MakeEnumAccessor (T1 a1, T2 a2)$/;"	f	namespace:ns3
MakeEnumChecker	enum.cc	/^MakeEnumChecker (int v1, std::string n1,$/;"	f	namespace:ns3
MakeEvent	make-event.cc	/^EventImpl * MakeEvent (void (*f)(void))$/;"	f	namespace:ns3
MakeEvent	make-event.h	/^EventImpl * MakeEvent (MEM mem_ptr, OBJ obj)$/;"	f	namespace:ns3
MakeEvent	make-event.h	/^EventImpl * MakeEvent (MEM mem_ptr, OBJ obj, T1 a1)$/;"	f	namespace:ns3
MakeEvent	make-event.h	/^EventImpl * MakeEvent (MEM mem_ptr, OBJ obj, T1 a1, T2 a2)$/;"	f	namespace:ns3
MakeEvent	make-event.h	/^EventImpl * MakeEvent (MEM mem_ptr, OBJ obj, T1 a1, T2 a2, T3 a3)$/;"	f	namespace:ns3
MakeEvent	make-event.h	/^EventImpl * MakeEvent (MEM mem_ptr, OBJ obj, T1 a1, T2 a2, T3 a3, T4 a4)$/;"	f	namespace:ns3
MakeEvent	make-event.h	/^EventImpl * MakeEvent (MEM mem_ptr, OBJ obj,$/;"	f	namespace:ns3
MakeEvent	make-event.h	/^EventImpl * MakeEvent (void (*f)(U1), T1 a1)$/;"	f	namespace:ns3
MakeEvent	make-event.h	/^EventImpl * MakeEvent (void (*f)(U1,U2), T1 a1, T2 a2)$/;"	f	namespace:ns3
MakeEvent	make-event.h	/^EventImpl * MakeEvent (void (*f)(U1,U2,U3), T1 a1, T2 a2, T3 a3)$/;"	f	namespace:ns3
MakeEvent	make-event.h	/^EventImpl * MakeEvent (void (*f)(U1,U2,U3,U4), T1 a1, T2 a2, T3 a3, T4 a4)$/;"	f	namespace:ns3
MakeEvent	make-event.h	/^EventImpl * MakeEvent (void (*f)(U1,U2,U3,U4,U5), T1 a1, T2 a2, T3 a3, T4 a4, T5 a5)$/;"	f	namespace:ns3
MakeIntegerChecker	integer.cc	/^MakeIntegerChecker (int64_t min, int64_t max, std::string name)$/;"	f	namespace:ns3::internal
MakeIntegerChecker	integer.h	/^MakeIntegerChecker (int64_t min)$/;"	f	namespace:ns3
MakeIntegerChecker	integer.h	/^MakeIntegerChecker (int64_t min, int64_t max)$/;"	f	namespace:ns3
MakeIntegerChecker	integer.h	/^MakeIntegerChecker (void)$/;"	f	namespace:ns3
MakeNullCallback	callback.h	/^Callback<R,T1,T2,T3,T4,T5,T6,T7,T8,T9> MakeNullCallback (void) {$/;"	f	namespace:ns3
MakeNullCallback	callback.h	/^Callback<R,T1,T2,T3,T4,T5,T6,T7,T8> MakeNullCallback (void) {$/;"	f	namespace:ns3
MakeNullCallback	callback.h	/^Callback<R,T1,T2,T3,T4,T5,T6,T7> MakeNullCallback (void) {$/;"	f	namespace:ns3
MakeNullCallback	callback.h	/^Callback<R,T1,T2,T3,T4,T5,T6> MakeNullCallback (void) {$/;"	f	namespace:ns3
MakeNullCallback	callback.h	/^Callback<R,T1,T2,T3,T4,T5> MakeNullCallback (void) {$/;"	f	namespace:ns3
MakeNullCallback	callback.h	/^Callback<R,T1,T2,T3,T4> MakeNullCallback (void) {$/;"	f	namespace:ns3
MakeNullCallback	callback.h	/^Callback<R,T1,T2,T3> MakeNullCallback (void) {$/;"	f	namespace:ns3
MakeNullCallback	callback.h	/^Callback<R,T1,T2> MakeNullCallback (void) {$/;"	f	namespace:ns3
MakeNullCallback	callback.h	/^Callback<R,T1> MakeNullCallback (void) {$/;"	f	namespace:ns3
MakeNullCallback	callback.h	/^Callback<R> MakeNullCallback (void) {$/;"	f	namespace:ns3
MakeObjectMapAccessor	object-map.h	/^MakeObjectMapAccessor (U T::*memberVector)$/;"	f	namespace:ns3
MakeObjectMapChecker	object-map.h	/^Ptr<const AttributeChecker> MakeObjectMapChecker (void)$/;"	f	namespace:ns3
MakeObjectPtrContainerChecker	object-ptr-container.h	/^Ptr<const AttributeChecker> MakeObjectPtrContainerChecker (void)$/;"	f	namespace:ns3
MakeObjectVectorAccessor	object-vector.h	/^MakeObjectVectorAccessor (U T::*memberVector)$/;"	f	namespace:ns3
MakeObjectVectorChecker	object-vector.h	/^Ptr<const AttributeChecker> MakeObjectVectorChecker (void)$/;"	f	namespace:ns3
MakePointerChecker	pointer.h	/^MakePointerChecker (void)$/;"	f	namespace:ns3
MakeSimpleAttributeChecker	attribute-helper.h	/^MakeSimpleAttributeChecker (std::string name, std::string underlying)$/;"	f	namespace:ns3
MakeTemporaryDirectoryName	system-path.cc	/^MakeTemporaryDirectoryName (void)$/;"	f	namespace:ns3::SystemPath
MakeTimerImpl	timer-impl.h	/^MakeTimerImpl (FN fn)$/;"	f	namespace:ns3
MakeTimerImpl	timer-impl.h	/^MakeTimerImpl (IntToType<0>, FN fn)$/;"	f	namespace:ns3
MakeTimerImpl	timer-impl.h	/^MakeTimerImpl (IntToType<0>, MEM_PTR memPtr, OBJ_PTR objPtr)$/;"	f	namespace:ns3
MakeTimerImpl	timer-impl.h	/^MakeTimerImpl (IntToType<1>, FN fn)$/;"	f	namespace:ns3
MakeTimerImpl	timer-impl.h	/^MakeTimerImpl (IntToType<1>, MEM_PTR memPtr, OBJ_PTR objPtr)$/;"	f	namespace:ns3
MakeTimerImpl	timer-impl.h	/^MakeTimerImpl (IntToType<2>, FN fn)$/;"	f	namespace:ns3
MakeTimerImpl	timer-impl.h	/^MakeTimerImpl (IntToType<2>, MEM_PTR memPtr, OBJ_PTR objPtr)$/;"	f	namespace:ns3
MakeTimerImpl	timer-impl.h	/^MakeTimerImpl (IntToType<3>, FN fn)$/;"	f	namespace:ns3
MakeTimerImpl	timer-impl.h	/^MakeTimerImpl (IntToType<3>, MEM_PTR memPtr, OBJ_PTR objPtr)$/;"	f	namespace:ns3
MakeTimerImpl	timer-impl.h	/^MakeTimerImpl (IntToType<4>, FN fn)$/;"	f	namespace:ns3
MakeTimerImpl	timer-impl.h	/^MakeTimerImpl (IntToType<4>, MEM_PTR memPtr, OBJ_PTR objPtr)$/;"	f	namespace:ns3
MakeTimerImpl	timer-impl.h	/^MakeTimerImpl (IntToType<5>, FN fn)$/;"	f	namespace:ns3
MakeTimerImpl	timer-impl.h	/^MakeTimerImpl (IntToType<5>, MEM_PTR memPtr, OBJ_PTR objPtr)$/;"	f	namespace:ns3
MakeTimerImpl	timer-impl.h	/^MakeTimerImpl (IntToType<6>, FN fn)$/;"	f	namespace:ns3
MakeTimerImpl	timer-impl.h	/^MakeTimerImpl (IntToType<6>, MEM_PTR memPtr, OBJ_PTR objPtr)$/;"	f	namespace:ns3
MakeTimerImpl	timer-impl.h	/^MakeTimerImpl (MEM_PTR memPtr, OBJ_PTR objPtr)$/;"	f	namespace:ns3
MakeTraceSourceAccessor	trace-source-accessor.h	/^Ptr<const TraceSourceAccessor> MakeTraceSourceAccessor (T a)$/;"	f	namespace:ns3
MakeUintegerChecker	uinteger.cc	/^Ptr<const AttributeChecker> MakeUintegerChecker (uint64_t min, uint64_t max, std::string name)$/;"	f	namespace:ns3::internal
MakeUintegerChecker	uinteger.h	/^Ptr<const AttributeChecker> MakeUintegerChecker (uint64_t min)$/;"	f	namespace:ns3
MakeUintegerChecker	uinteger.h	/^Ptr<const AttributeChecker> MakeUintegerChecker (uint64_t min, uint64_t max)$/;"	f	namespace:ns3
MakeUintegerChecker	uinteger.h	/^Ptr<const AttributeChecker> MakeUintegerChecker (void)$/;"	f	namespace:ns3
MakeVectorChecker	vector.cc	/^Ptr<const AttributeChecker> MakeVectorChecker (void)$/;"	f	namespace:ns3
MapScheduler	map-scheduler.cc	/^MapScheduler::MapScheduler ()$/;"	f	class:ns3::MapScheduler
MapScheduler	map-scheduler.h	/^class MapScheduler : public Scheduler$/;"	c	namespace:ns3
MatMatModM	rng-stream.cc	/^void MatMatModM (const double A[3][3], const double B[3][3],$/;"	f	namespace:__anon3
MatPowModM	rng-stream.cc	/^void MatPowModM (const double A[3][3], double B[3][3], double m, int32_t n)$/;"	f	namespace:__anon3
MatTwoPowModM	rng-stream.cc	/^void MatTwoPowModM (const double A[3][3], double B[3][3], double m, int32_t e)$/;"	f	namespace:__anon3
MatVecModM	rng-stream.cc	/^void MatVecModM (const double A[3][3], const double s[3], double v[3],$/;"	f	namespace:__anon3
MatchContainer	config.cc	/^MatchContainer::MatchContainer ()$/;"	f	class:ns3::Config::MatchContainer
MatchContainer	config.cc	/^MatchContainer::MatchContainer (const std::vector<Ptr<Object> > &objects,$/;"	f	class:ns3::Config::MatchContainer
MatchContainer	config.h	/^class MatchContainer$/;"	c	namespace:ns3::Config
Matches	config.cc	/^ArrayMatcher::Matches (uint32_t i) const$/;"	f	class:ns3::ArrayMatcher
Max	int64x64.h	/^inline int64x64_t Max (const int64x64_t &a, const int64x64_t &b)$/;"	f	namespace:ns3
Max	nstime.h	/^inline Time Max (const Time &ta, const Time &tb)$/;"	f	namespace:ns3
MemPtrCallbackImpl	callback.h	/^  MemPtrCallbackImpl (OBJ_PTR const&objPtr, MEM_PTR mem_ptr)$/;"	f	class:ns3::MemPtrCallbackImpl
MemPtrCallbackImpl	callback.h	/^class MemPtrCallbackImpl : public CallbackImpl<R,T1,T2,T3,T4,T5,T6,T7,T8,T9> {$/;"	c	namespace:ns3
MicroSeconds	nstime.h	/^inline Time MicroSeconds (int64x64_t us)$/;"	f	namespace:ns3
MicroSeconds	nstime.h	/^inline Time MicroSeconds (uint64_t us)$/;"	f	namespace:ns3
MilliSeconds	nstime.h	/^inline Time MilliSeconds (int64x64_t ms)$/;"	f	namespace:ns3
MilliSeconds	nstime.h	/^inline Time MilliSeconds (uint64_t ms)$/;"	f	namespace:ns3
Min	int64x64.h	/^inline int64x64_t Min (const int64x64_t &a, const int64x64_t &b)$/;"	f	namespace:ns3
Min	nstime.h	/^inline Time Min (const Time &ta, const Time &tb)$/;"	f	namespace:ns3
MostSignificantDigit	int64x64.cc	/^static uint8_t MostSignificantDigit (uint64_t value)$/;"	f	namespace:ns3
Mul	int64x64-128.cc	/^int64x64_t::Mul (int64x64_t const &o)$/;"	f	class:ns3::int64x64_t
Mul	int64x64-cairo.cc	/^int64x64_t::Mul (int64x64_t const &o)$/;"	f	class:ns3::int64x64_t
MulByInvert	int64x64-128.cc	/^int64x64_t::MulByInvert (const int64x64_t &o)$/;"	f	class:ns3::int64x64_t
MulByInvert	int64x64-cairo.cc	/^int64x64_t::MulByInvert (const int64x64_t &o)$/;"	f	class:ns3::int64x64_t
MulByInvert	int64x64-double.h	/^  inline void MulByInvert (const int64x64_t &o)$/;"	f	class:ns3::int64x64_t
MultModM	rng-stream.cc	/^double MultModM (double a, double s, double c, double m)$/;"	f	namespace:__anon3
MustAssertOnFailure	test.cc	/^TestCase::MustAssertOnFailure (void) const$/;"	f	class:ns3::TestCase
MustAssertOnFailure	test.cc	/^TestRunnerImpl::MustAssertOnFailure (void) const$/;"	f	class:ns3::TestRunnerImpl
MustContinueOnFailure	test.cc	/^TestCase::MustContinueOnFailure (void) const$/;"	f	class:ns3::TestCase
MustContinueOnFailure	test.cc	/^TestRunnerImpl::MustContinueOnFailure (void) const$/;"	f	class:ns3::TestRunnerImpl
MustHideFromDocumentation	type-id.cc	/^IidManager::MustHideFromDocumentation (uint16_t uid) const$/;"	f	class:__anon4::IidManager
MustHideFromDocumentation	type-id.cc	/^TypeId::MustHideFromDocumentation (void) const$/;"	f	class:ns3::TypeId
MustUpdateData	test.cc	/^TestRunnerImpl::MustUpdateData (void) const$/;"	f	class:ns3::TestRunnerImpl
NS	nstime.h	/^    NS = 3,$/;"	e	enum:ns3::Time::Unit
NS3_ABORT_H	abort.h	22;"	d
NS3_DEPRECATED_H	deprecated.h	2;"	d
NS3_FATAL_ERROR_H	fatal-error.h	22;"	d
NS3_RANDOM_VARIABLE_H	random-variable.h	23;"	d
NS3_STRING_H	string.h	2;"	d
NS3_TEST_H	test.h	20;"	d
NS3_VECTOR_H	vector.h	21;"	d
NS_ABORT_IF	abort.h	69;"	d
NS_ABORT_MSG	abort.h	43;"	d
NS_ABORT_MSG_IF	abort.h	98;"	d
NS_ABORT_MSG_UNLESS	abort.h	131;"	d
NS_ABORT_UNLESS	abort.h	117;"	d
NS_ASSERT	assert.h	100;"	d
NS_ASSERT	assert.h	64;"	d
NS_ASSERT_H	assert.h	22;"	d
NS_ASSERT_MSG	assert.h	107;"	d
NS_ASSERT_MSG	assert.h	86;"	d
NS_BREAKPOINT	breakpoint.h	47;"	d
NS_DEPRECATED	deprecated.h	5;"	d
NS_DEPRECATED	deprecated.h	7;"	d
NS_DEPRECATED	test.h	/^  bool GetErrorStatus (void) const NS_DEPRECATED;$/;"	m	class:ns3::TestCase
NS_DOUBLE_H	double.h	21;"	d
NS_FATAL_ERROR	fatal-error.h	72;"	d
NS_FATAL_ERROR_NO_MSG	fatal-error.h	44;"	d
NS_LOG	log.h	202;"	d
NS_LOG_APPEND_CONTEXT	log.h	152;"	d
NS_LOG_APPEND_FUNC_PREFIX	log.h	144;"	d
NS_LOG_APPEND_NODE_PREFIX	log.h	133;"	d
NS_LOG_APPEND_TIME_PREFIX	log.h	122;"	d
NS_LOG_COMPONENT_DEFINE	log.h	119;"	d
NS_LOG_DEBUG	log.h	240;"	d
NS_LOG_ERROR	log.h	222;"	d
NS_LOG_FUNCTION	log.h	288;"	d
NS_LOG_FUNCTION_NOARGS	log.h	257;"	d
NS_LOG_INFO	log.h	249;"	d
NS_LOG_LOGIC	log.h	311;"	d
NS_LOG_UNCOND	log.h	320;"	d
NS_LOG_WARN	log.h	231;"	d
NS_OBJECT_ENSURE_REGISTERED	object-base.h	32;"	d
NS_PER_SEC	unix-system-condition.cc	/^  static const uint64_t NS_PER_SEC = (uint64_t)1000000000;$/;"	m	class:ns3::SystemConditionPrivate	file:
NS_PER_SEC	wall-clock-synchronizer.h	/^  static const uint64_t NS_PER_SEC = (uint64_t)1000000000;$/;"	m	class:ns3::WallClockSynchronizer
NS_POINTER_H	pointer.h	21;"	d
NS_TEST_ASSERT_MSG_EQ	test.h	122;"	d
NS_TEST_ASSERT_MSG_EQ_INTERNAL	test.h	77;"	d
NS_TEST_ASSERT_MSG_EQ_RETURNS_BOOL	test.h	176;"	d
NS_TEST_ASSERT_MSG_EQ_RETURNS_BOOL_INTERNAL	test.h	128;"	d
NS_TEST_ASSERT_MSG_EQ_TOL	test.h	311;"	d
NS_TEST_ASSERT_MSG_EQ_TOL_INTERNAL	test.h	240;"	d
NS_TEST_ASSERT_MSG_EQ_TOL_RETURNS_BOOL	test.h	391;"	d
NS_TEST_ASSERT_MSG_EQ_TOL_RETURNS_BOOL_INTERNAL	test.h	317;"	d
NS_TEST_ASSERT_MSG_GT	test.h	758;"	d
NS_TEST_ASSERT_MSG_GT_INTERNAL	test.h	724;"	d
NS_TEST_ASSERT_MSG_LT	test.h	673;"	d
NS_TEST_ASSERT_MSG_LT_INTERNAL	test.h	639;"	d
NS_TEST_ASSERT_MSG_NE	test.h	524;"	d
NS_TEST_ASSERT_MSG_NE_INTERNAL	test.h	480;"	d
NS_TEST_ASSERT_MSG_NE_RETURNS_BOOL	test.h	577;"	d
NS_TEST_ASSERT_MSG_NE_RETURNS_BOOL_INTERNAL	test.h	530;"	d
NS_TEST_EXPECT_MSG_EQ	test.h	229;"	d
NS_TEST_EXPECT_MSG_EQ_INTERNAL	test.h	185;"	d
NS_TEST_EXPECT_MSG_EQ_TOL	test.h	470;"	d
NS_TEST_EXPECT_MSG_EQ_TOL_INTERNAL	test.h	400;"	d
NS_TEST_EXPECT_MSG_GT	test.h	799;"	d
NS_TEST_EXPECT_MSG_GT_INTERNAL	test.h	767;"	d
NS_TEST_EXPECT_MSG_LT	test.h	714;"	d
NS_TEST_EXPECT_MSG_LT_INTERNAL	test.h	682;"	d
NS_TEST_EXPECT_MSG_NE	test.h	629;"	d
NS_TEST_EXPECT_MSG_NE_INTERNAL	test.h	586;"	d
NS_UNUSED	unused.h	5;"	d
Name	log.cc	/^LogComponent::Name (void) const$/;"	f	class:ns3::LogComponent
NameNode	names.cc	/^NameNode::NameNode ()$/;"	f	class:ns3::NameNode
NameNode	names.cc	/^NameNode::NameNode (NameNode *parent, std::string name, Ptr<Object> object)$/;"	f	class:ns3::NameNode
NameNode	names.cc	/^NameNode::NameNode (const NameNode &nameNode)$/;"	f	class:ns3::NameNode
NameNode	names.cc	/^class NameNode$/;"	c	namespace:ns3	file:
Names	names.h	/^class Names$/;"	c	namespace:ns3
NamesPriv	names.cc	/^NamesPriv::NamesPriv ()$/;"	f	class:ns3::NamesPriv
NamesPriv	names.cc	/^class NamesPriv $/;"	c	namespace:ns3	file:
NanoSeconds	nstime.h	/^inline Time NanoSeconds (int64x64_t ns)$/;"	f	namespace:ns3
NanoSeconds	nstime.h	/^inline Time NanoSeconds (uint64_t ns)$/;"	f	namespace:ns3
NanosecondToTimeStep	synchronizer.cc	/^Synchronizer::NanosecondToTimeStep (uint64_t ns)$/;"	f	class:ns3::Synchronizer
Negate	int64x64-cairo.h	/^  inline void Negate (void)$/;"	f	class:ns3::int64x64_t
NewConstant	random-variable.cc	/^void ConstantVariableImpl::NewConstant (double c)$/;"	f	class:ns3::ConstantVariableImpl
Next	object.cc	/^Object::AggregateIterator::Next (void)$/;"	f	class:ns3::Object::AggregateIterator
NextTs	realtime-simulator-impl.cc	/^RealtimeSimulatorImpl::NextTs (void) const$/;"	f	class:ns3::RealtimeSimulatorImpl
NodePrinter	simulator.cc	/^NodePrinter (std::ostream &os)$/;"	f	namespace:ns3
NonConstType	type-traits.h	/^  typedef typename UnConst<T>::Result NonConstType;$/;"	t	struct:TypeTraits
NormalVariable	random-variable.cc	/^NormalVariable::NormalVariable ()$/;"	f	class:ns3::NormalVariable
NormalVariable	random-variable.cc	/^NormalVariable::NormalVariable (double m, double v)$/;"	f	class:ns3::NormalVariable
NormalVariable	random-variable.cc	/^NormalVariable::NormalVariable (double m, double v, double b)$/;"	f	class:ns3::NormalVariable
NormalVariable	random-variable.h	/^class NormalVariable : public RandomVariable$/;"	c	namespace:ns3
NormalVariableImpl	random-variable.cc	/^NormalVariableImpl::NormalVariableImpl ()$/;"	f	class:ns3::NormalVariableImpl
NormalVariableImpl	random-variable.cc	/^NormalVariableImpl::NormalVariableImpl (const NormalVariableImpl& c)$/;"	f	class:ns3::NormalVariableImpl
NormalVariableImpl	random-variable.cc	/^NormalVariableImpl::NormalVariableImpl (double m, double v, double b)$/;"	f	class:ns3::NormalVariableImpl
NormalVariableImpl	random-variable.cc	/^class NormalVariableImpl : public RandomVariableBase   \/\/ Normally Distributed random var$/;"	c	namespace:ns3	file:
NotifyConstructionCompleted	object-base.cc	/^ObjectBase::NotifyConstructionCompleted (void)$/;"	f	class:ns3::ObjectBase
NotifyNewAggregate	object.cc	/^Object::NotifyNewAggregate ()$/;"	f	class:ns3::Object
Now	default-simulator-impl.cc	/^DefaultSimulatorImpl::Now (void) const$/;"	f	class:ns3::DefaultSimulatorImpl
Now	realtime-simulator-impl.cc	/^RealtimeSimulatorImpl::Now (void) const$/;"	f	class:ns3::RealtimeSimulatorImpl
Now	simulator.cc	/^Simulator::Now (void)$/;"	f	class:ns3::Simulator
Now	simulator.cc	/^Time Now (void)$/;"	f	namespace:ns3
NsToTimeval	wall-clock-synchronizer.cc	/^WallClockSynchronizer::NsToTimeval (int64_t ns, struct timeval *tv)$/;"	f	class:ns3::WallClockSynchronizer
NullType	type-traits.h	/^  struct NullType {};$/;"	s	struct:TypeTraits
Nullify	callback.h	/^  void Nullify (void) {$/;"	f	class:ns3::Callback
OBJECT_BASE_H	object-base.h	21;"	d
OBJECT_FACTORY_H	object-factory.h	21;"	d
OBJECT_H	object.h	22;"	d
OBJECT_MAP_H	object-map.h	21;"	d
OBJECT_NAMES_H	names.h	20;"	d
OBJECT_PTR_CONTAINER_H	object-ptr-container.h	21;"	d
OBJECT_VECTOR_H	object-vector.h	21;"	d
OUTPUT_SIGN	int64x64-128.cc	7;"	d	file:
OUTPUT_SIGN	int64x64-cairo.cc	29;"	d	file:
Object	object.cc	/^Object::Object ()$/;"	f	class:ns3::Object
Object	object.cc	/^Object::Object (const Object &o)$/;"	f	class:ns3::Object
Object	object.h	/^class Object : public SimpleRefCount<Object,ObjectBase,ObjectDeleter>$/;"	c	namespace:ns3
ObjectBase	object-base.h	/^class ObjectBase$/;"	c	namespace:ns3
ObjectDeleter	object.h	/^struct ObjectDeleter$/;"	s	namespace:ns3
ObjectFactory	object-factory.cc	/^ObjectFactory::ObjectFactory ()$/;"	f	class:ns3::ObjectFactory
ObjectFactory	object-factory.cc	/^ObjectFactory::ObjectFactory (std::string typeId)$/;"	f	class:ns3::ObjectFactory
ObjectFactory	object-factory.h	/^class ObjectFactory$/;"	c	namespace:ns3
ObjectMapValue	object-map.h	/^typedef ObjectPtrContainerValue ObjectMapValue;$/;"	t	namespace:ns3
ObjectPtrContainerAccessor	object-ptr-container.h	/^class ObjectPtrContainerAccessor : public AttributeAccessor$/;"	c	namespace:ns3
ObjectPtrContainerChecker	object-ptr-container.h	/^class ObjectPtrContainerChecker : public AttributeChecker$/;"	c	namespace:ns3
ObjectPtrContainerValue	object-ptr-container.cc	/^ObjectPtrContainerValue::ObjectPtrContainerValue ()$/;"	f	class:ns3::ObjectPtrContainerValue
ObjectPtrContainerValue	object-ptr-container.h	/^class ObjectPtrContainerValue : public AttributeValue$/;"	c	namespace:ns3
ObjectVectorValue	object-vector.h	/^typedef ObjectPtrContainerValue ObjectVectorValue;$/;"	t	namespace:ns3
PERFORMANCE	test.h	/^    PERFORMANCE \/**< This test suite implements a Performance Test *\/$/;"	e	enum:ns3::TestSuite::Type
PS	nstime.h	/^    PS = 4,$/;"	e	enum:ns3::Time::Unit
PTR_H	ptr.h	22;"	d
ParameterLogger	log.cc	/^ParameterLogger::ParameterLogger (std::ostream &os)$/;"	f	class:ns3::ParameterLogger
ParameterLogger	log.h	/^class ParameterLogger : public std::ostream$/;"	c	namespace:ns3
ParameterType	timer-impl.h	/^  typedef const StoredType &ParameterType;$/;"	t	struct:ns3::TimerTraits
Parent	heap-scheduler.cc	/^HeapScheduler::Parent (uint32_t id) const$/;"	f	class:ns3::HeapScheduler
ParetoVariable	random-variable.cc	/^ParetoVariable::ParetoVariable ()$/;"	f	class:ns3::ParetoVariable
ParetoVariable	random-variable.cc	/^ParetoVariable::ParetoVariable (double m)$/;"	f	class:ns3::ParetoVariable
ParetoVariable	random-variable.cc	/^ParetoVariable::ParetoVariable (double m, double s)$/;"	f	class:ns3::ParetoVariable
ParetoVariable	random-variable.cc	/^ParetoVariable::ParetoVariable (double m, double s, double b)$/;"	f	class:ns3::ParetoVariable
ParetoVariable	random-variable.cc	/^ParetoVariable::ParetoVariable (std::pair<double, double> params)$/;"	f	class:ns3::ParetoVariable
ParetoVariable	random-variable.cc	/^ParetoVariable::ParetoVariable (std::pair<double, double> params, double b)$/;"	f	class:ns3::ParetoVariable
ParetoVariable	random-variable.h	/^class ParetoVariable : public RandomVariable$/;"	c	namespace:ns3
ParetoVariableImpl	random-variable.cc	/^ParetoVariableImpl::ParetoVariableImpl ()$/;"	f	class:ns3::ParetoVariableImpl
ParetoVariableImpl	random-variable.cc	/^ParetoVariableImpl::ParetoVariableImpl (const ParetoVariableImpl& c)$/;"	f	class:ns3::ParetoVariableImpl
ParetoVariableImpl	random-variable.cc	/^ParetoVariableImpl::ParetoVariableImpl (double m)$/;"	f	class:ns3::ParetoVariableImpl
ParetoVariableImpl	random-variable.cc	/^ParetoVariableImpl::ParetoVariableImpl (double m, double s)$/;"	f	class:ns3::ParetoVariableImpl
ParetoVariableImpl	random-variable.cc	/^ParetoVariableImpl::ParetoVariableImpl (double m, double s, double b)$/;"	f	class:ns3::ParetoVariableImpl
ParetoVariableImpl	random-variable.cc	/^ParetoVariableImpl::ParetoVariableImpl (std::pair<double, double> params)$/;"	f	class:ns3::ParetoVariableImpl
ParetoVariableImpl	random-variable.cc	/^ParetoVariableImpl::ParetoVariableImpl (std::pair<double, double> params, double b)$/;"	f	class:ns3::ParetoVariableImpl
ParetoVariableImpl	random-variable.cc	/^class ParetoVariableImpl : public RandomVariableBase$/;"	c	namespace:ns3	file:
Parse	command-line.cc	/^CommandLine::CallbackItem::Parse (std::string value)$/;"	f	class:ns3::CommandLine::CallbackItem
Parse	command-line.cc	/^CommandLine::Parse (int iargc, char *argv[]) const$/;"	f	class:ns3::CommandLine
Parse	command-line.h	/^CommandLine::UserItem<T>::Parse (std::string value)$/;"	f	class:ns3::CommandLine::UserItem
ParsePath	config.cc	/^ConfigImpl::ParsePath (std::string path, std::string *root, std::string *leaf) const$/;"	f	class:ns3::ConfigImpl
Peek	random-variable.cc	/^RandomVariable::Peek (void) const$/;"	f	class:ns3::RandomVariable
PeekEventImpl	event-id.cc	/^EventId::PeekEventImpl (void) const$/;"	f	class:ns3::EventId
PeekImpl	simulator.cc	/^static SimulatorImpl **PeekImpl (void)$/;"	f	namespace:ns3
PeekInformation	nstime.h	/^  static inline struct Information *PeekInformation (enum Unit timeUnit)$/;"	f	class:ns3::Time
PeekNext	calendar-scheduler.cc	/^CalendarScheduler::PeekNext (void) const$/;"	f	class:ns3::CalendarScheduler
PeekNext	heap-scheduler.cc	/^HeapScheduler::PeekNext (void) const$/;"	f	class:ns3::HeapScheduler
PeekNext	list-scheduler.cc	/^ListScheduler::PeekNext (void) const$/;"	f	class:ns3::ListScheduler
PeekNext	map-scheduler.cc	/^MapScheduler::PeekNext (void) const$/;"	f	class:ns3::MapScheduler
PeekPointer	ptr.h	/^T * PeekPointer (const Ptr<T> &p)$/;"	f	namespace:ns3
PeekResolution	nstime.h	/^  static inline struct Resolution *PeekResolution (void)$/;"	f	class:ns3::Time
PeekStreamList	fatal-impl.cc	/^std::list<std::ostream*> **PeekStreamList (void)$/;"	f	namespace:ns3::FatalImpl::__anon1
PicoSeconds	nstime.h	/^inline Time PicoSeconds (int64x64_t ps)$/;"	f	namespace:ns3
PicoSeconds	nstime.h	/^inline Time PicoSeconds (uint64_t ps)$/;"	f	namespace:ns3
Ping	watchdog.cc	/^Watchdog::Ping (Time delay)$/;"	f	class:ns3::Watchdog
PointeeType	type-traits.h	/^    typedef U PointeeType;$/;"	t	struct:TypeTraits::PointerTraits
PointeeType	type-traits.h	/^  typedef typename PointerTraits<T>::PointeeType PointeeType;$/;"	t	struct:TypeTraits
PointerChecker	pointer.h	/^class PointerChecker : public AttributeChecker $/;"	c	namespace:ns3
PointerToMemberTraits	type-traits.h	/^  typedef PtrToMemberTraits<T> PointerToMemberTraits;$/;"	t	struct:TypeTraits
PointerTraits	type-traits.h	/^  template <typename U> struct PointerTraits$/;"	s	struct:TypeTraits
PointerTraits	type-traits.h	/^  template <typename U> struct PointerTraits<U *>$/;"	s	struct:TypeTraits
PointerValue	pointer.cc	/^PointerValue::PointerValue ()$/;"	f	class:ns3::PointerValue
PointerValue	pointer.cc	/^PointerValue::PointerValue (Ptr<Object> object)$/;"	f	class:ns3::PointerValue
PointerValue	pointer.h	/^PointerValue::PointerValue (const Ptr<T> &object)$/;"	f	class:ns3::PointerValue
PointerValue	pointer.h	/^class PointerValue : public AttributeValue$/;"	c	namespace:ns3
PowerOfTen	int64x64.cc	/^static uint64_t PowerOfTen (uint8_t n)$/;"	f	namespace:ns3
PrintAttributes	command-line.cc	/^CommandLine::PrintAttributes (std::string type) const$/;"	f	class:ns3::CommandLine
PrintGlobals	command-line.cc	/^CommandLine::PrintGlobals (void) const$/;"	f	class:ns3::CommandLine
PrintGroup	command-line.cc	/^CommandLine::PrintGroup (std::string group) const$/;"	f	class:ns3::CommandLine
PrintGroups	command-line.cc	/^CommandLine::PrintGroups (void) const$/;"	f	class:ns3::CommandLine
PrintHelp	command-line.cc	/^CommandLine::PrintHelp (void) const$/;"	f	class:ns3::CommandLine
PrintHelp	test.cc	/^TestRunnerImpl::PrintHelp (const char *program_name) const$/;"	f	class:ns3::TestRunnerImpl
PrintInfo	calendar-scheduler.cc	/^CalendarScheduler::PrintInfo (void)$/;"	f	class:ns3::CalendarScheduler
PrintList	log.cc	/^PrintList::PrintList ()$/;"	f	class:ns3::PrintList
PrintList	log.cc	/^static class PrintList$/;"	c	namespace:ns3	file:
PrintReport	test.cc	/^TestRunnerImpl::PrintReport (TestCase *test, std::ostream *os, bool xml, int level)$/;"	f	class:ns3::TestRunnerImpl
PrintTestNameList	test.cc	/^TestRunnerImpl::PrintTestNameList (std::list<TestCase *>::const_iterator begin, $/;"	f	class:ns3::TestRunnerImpl
PrintTestTypeList	test.cc	/^TestRunnerImpl::PrintTestTypeList (void) const$/;"	f	class:ns3::TestRunnerImpl
PrintTypeIds	command-line.cc	/^CommandLine::PrintTypeIds (void) const$/;"	f	class:ns3::CommandLine
ProcessEventsWithContext	default-simulator-impl.cc	/^DefaultSimulatorImpl::ProcessEventsWithContext (void)$/;"	f	class:ns3::DefaultSimulatorImpl
ProcessOneEvent	default-simulator-impl.cc	/^DefaultSimulatorImpl::ProcessOneEvent (void)$/;"	f	class:ns3::DefaultSimulatorImpl
ProcessOneEvent	realtime-simulator-impl.cc	/^RealtimeSimulatorImpl::ProcessOneEvent (void)$/;"	f	class:ns3::RealtimeSimulatorImpl
Ptr	ptr.h	/^Ptr<T>::Ptr ()$/;"	f	class:ns3::Ptr
Ptr	ptr.h	/^Ptr<T>::Ptr (Ptr const&o) $/;"	f	class:ns3::Ptr
Ptr	ptr.h	/^Ptr<T>::Ptr (Ptr<U> const &o)$/;"	f	class:ns3::Ptr
Ptr	ptr.h	/^Ptr<T>::Ptr (T *ptr)$/;"	f	class:ns3::Ptr
Ptr	ptr.h	/^Ptr<T>::Ptr (T *ptr, bool ref)$/;"	f	class:ns3::Ptr
Ptr	ptr.h	/^class Ptr $/;"	c	namespace:ns3
PtrToMemberTraits	type-traits.h	/^  struct PtrToMemberTraits <U (V::*) (W1) const>$/;"	s	struct:TypeTraits
PtrToMemberTraits	type-traits.h	/^  struct PtrToMemberTraits <U (V::*) (W1)>$/;"	s	struct:TypeTraits
PtrToMemberTraits	type-traits.h	/^  struct PtrToMemberTraits <U (V::*) (W1,W2) const>$/;"	s	struct:TypeTraits
PtrToMemberTraits	type-traits.h	/^  struct PtrToMemberTraits <U (V::*) (W1,W2)>$/;"	s	struct:TypeTraits
PtrToMemberTraits	type-traits.h	/^  struct PtrToMemberTraits <U (V::*) (W1,W2,W3) const>$/;"	s	struct:TypeTraits
PtrToMemberTraits	type-traits.h	/^  struct PtrToMemberTraits <U (V::*) (W1,W2,W3)>$/;"	s	struct:TypeTraits
PtrToMemberTraits	type-traits.h	/^  struct PtrToMemberTraits <U (V::*) (W1,W2,W3,W4) const>$/;"	s	struct:TypeTraits
PtrToMemberTraits	type-traits.h	/^  struct PtrToMemberTraits <U (V::*) (W1,W2,W3,W4)>$/;"	s	struct:TypeTraits
PtrToMemberTraits	type-traits.h	/^  struct PtrToMemberTraits <U (V::*) (W1,W2,W3,W4,W5) const>$/;"	s	struct:TypeTraits
PtrToMemberTraits	type-traits.h	/^  struct PtrToMemberTraits <U (V::*) (W1,W2,W3,W4,W5)>$/;"	s	struct:TypeTraits
PtrToMemberTraits	type-traits.h	/^  struct PtrToMemberTraits <U (V::*) (W1,W2,W3,W4,W5,W6) const>$/;"	s	struct:TypeTraits
PtrToMemberTraits	type-traits.h	/^  struct PtrToMemberTraits <U (V::*) (W1,W2,W3,W4,W5,W6)>$/;"	s	struct:TypeTraits
PtrToMemberTraits	type-traits.h	/^  struct PtrToMemberTraits <U (V::*) (void) const>$/;"	s	struct:TypeTraits
PtrToMemberTraits	type-traits.h	/^  struct PtrToMemberTraits <U (V::*) (void)>$/;"	s	struct:TypeTraits
PtrToMemberTraits	type-traits.h	/^  template <typename U> struct PtrToMemberTraits$/;"	s	struct:TypeTraits
REALTIME_SIMULATOR_IMPL_H	realtime-simulator-impl.h	20;"	d
REF_COUNT_BASE_H	ref-count-base.h	24;"	d
REMOVE_ON_DESTROY	timer.h	/^    REMOVE_ON_DESTROY = (1 << 4),$/;"	e	enum:ns3::Timer::DestroyPolicy
RNGSTREAM_H	rng-stream.h	21;"	d
RUNNING	timer.h	/^    RUNNING,$/;"	e	enum:ns3::Timer::State
RandInt	rng-stream.cc	/^int32_t RngStream::RandInt (int32_t low, int32_t high)$/;"	f	class:ns3::RngStream
RandU01	rng-stream.cc	/^double RngStream::RandU01 ()$/;"	f	class:ns3::RngStream
RandomVariable	random-variable.cc	/^RandomVariable::RandomVariable ()$/;"	f	class:ns3::RandomVariable
RandomVariable	random-variable.cc	/^RandomVariable::RandomVariable (const RandomVariable&o)$/;"	f	class:ns3::RandomVariable
RandomVariable	random-variable.cc	/^RandomVariable::RandomVariable (const RandomVariableBase &variable)$/;"	f	class:ns3::RandomVariable
RandomVariable	random-variable.h	/^class RandomVariable$/;"	c	namespace:ns3
RandomVariableBase	random-variable.cc	/^RandomVariableBase::RandomVariableBase ()$/;"	f	class:ns3::RandomVariableBase
RandomVariableBase	random-variable.cc	/^RandomVariableBase::RandomVariableBase (const RandomVariableBase& r)$/;"	f	class:ns3::RandomVariableBase
RandomVariableBase	random-variable.cc	/^class RandomVariableBase$/;"	c	namespace:ns3	file:
ReadDigits	int64x64.cc	/^static uint64_t ReadDigits (std::string str)$/;"	f	namespace:ns3
ReadFiles	system-path.cc	/^std::list<std::string> ReadFiles (std::string path)$/;"	f	namespace:ns3::SystemPath
Realtime	realtime-simulator-impl.cc	/^RealtimeSimulatorImpl::Realtime (void) const$/;"	f	class:ns3::RealtimeSimulatorImpl
Realtime	synchronizer.cc	/^Synchronizer::Realtime (void)$/;"	f	class:ns3::Synchronizer
RealtimeNow	realtime-simulator-impl.cc	/^RealtimeSimulatorImpl::RealtimeNow (void) const$/;"	f	class:ns3::RealtimeSimulatorImpl
RealtimeSimulatorImpl	realtime-simulator-impl.cc	/^RealtimeSimulatorImpl::RealtimeSimulatorImpl ()$/;"	f	class:ns3::RealtimeSimulatorImpl
RealtimeSimulatorImpl	realtime-simulator-impl.h	/^class RealtimeSimulatorImpl : public SimulatorImpl$/;"	c	namespace:ns3
Ref	simple-ref-count.h	/^  inline void Ref (void) const$/;"	f	class:ns3::SimpleRefCount
RefCountBase	ref-count-base.h	/^class RefCountBase : public SimpleRefCount<RefCountBase>$/;"	c	namespace:ns3
ReferenceTraits	type-traits.h	/^  template <typename U> struct ReferenceTraits$/;"	s	struct:TypeTraits
ReferenceTraits	type-traits.h	/^  template <typename U> struct ReferenceTraits<U&>$/;"	s	struct:TypeTraits
ReferencedType	type-traits.h	/^    typedef U ReferencedType;$/;"	t	struct:TypeTraits::ReferenceTraits
ReferencedType	type-traits.h	/^  typedef typename ReferenceTraits<T>::ReferencedType ReferencedType;$/;"	t	struct:TypeTraits
RegisterRootNamespaceObject	config.cc	/^ConfigImpl::RegisterRootNamespaceObject (Ptr<Object> obj)$/;"	f	class:ns3::ConfigImpl
RegisterRootNamespaceObject	config.cc	/^void RegisterRootNamespaceObject (Ptr<Object> obj)$/;"	f	namespace:ns3::Config
RegisterStream	fatal-impl.cc	/^RegisterStream (std::ostream* stream)$/;"	f	namespace:ns3::FatalImpl
Remove	calendar-scheduler.cc	/^CalendarScheduler::Remove (const Event &ev)$/;"	f	class:ns3::CalendarScheduler
Remove	default-simulator-impl.cc	/^DefaultSimulatorImpl::Remove (const EventId &id)$/;"	f	class:ns3::DefaultSimulatorImpl
Remove	heap-scheduler.cc	/^HeapScheduler::Remove (const Event &ev)$/;"	f	class:ns3::HeapScheduler
Remove	list-scheduler.cc	/^ListScheduler::Remove (const Event &ev)$/;"	f	class:ns3::ListScheduler
Remove	map-scheduler.cc	/^MapScheduler::Remove (const Event &ev)$/;"	f	class:ns3::MapScheduler
Remove	realtime-simulator-impl.cc	/^RealtimeSimulatorImpl::Remove (const EventId &id)$/;"	f	class:ns3::RealtimeSimulatorImpl
Remove	simulator.cc	/^Simulator::Remove (const EventId &ev)$/;"	f	class:ns3::Simulator
Remove	timer.cc	/^Timer::Remove (void)$/;"	f	class:ns3::Timer
RemoveNext	calendar-scheduler.cc	/^CalendarScheduler::RemoveNext (void)$/;"	f	class:ns3::CalendarScheduler
RemoveNext	heap-scheduler.cc	/^HeapScheduler::RemoveNext (void)$/;"	f	class:ns3::HeapScheduler
RemoveNext	list-scheduler.cc	/^ListScheduler::RemoveNext (void)$/;"	f	class:ns3::ListScheduler
RemoveNext	map-scheduler.cc	/^MapScheduler::RemoveNext (void)$/;"	f	class:ns3::MapScheduler
Rename	names.cc	/^Names::Rename (Ptr<Object> context, std::string oldname, std::string newname)$/;"	f	class:ns3::Names
Rename	names.cc	/^Names::Rename (std::string oldpath, std::string newname)$/;"	f	class:ns3::Names
Rename	names.cc	/^Names::Rename (std::string path, std::string oldname, std::string newname)$/;"	f	class:ns3::Names
Rename	names.cc	/^NamesPriv::Rename (Ptr<Object> context, std::string oldname, std::string newname)$/;"	f	class:ns3::NamesPriv
Rename	names.cc	/^NamesPriv::Rename (std::string oldpath, std::string newname)$/;"	f	class:ns3::NamesPriv
Rename	names.cc	/^NamesPriv::Rename (std::string path, std::string oldname, std::string newname)$/;"	f	class:ns3::NamesPriv
ReplaceXmlSpecialCharacters	test.cc	/^TestRunnerImpl::ReplaceXmlSpecialCharacters (std::string xml) const$/;"	f	class:ns3::TestRunnerImpl
ReportTestFailure	test.cc	/^TestCase::ReportTestFailure (std::string cond, std::string actual, $/;"	f	class:ns3::TestCase
Reserve	test.h	/^TestVectors<T>::Reserve (uint32_t reserve)$/;"	f	class:ns3::TestVectors
Reset	config.cc	/^void Reset (void)$/;"	f	namespace:ns3::Config
ResetInitialValue	global-value.cc	/^GlobalValue::ResetInitialValue (void)$/;"	f	class:ns3::GlobalValue
ResetNextSubstream	rng-stream.cc	/^void RngStream::ResetNextSubstream ()$/;"	f	class:ns3::RngStream
ResetNthSubstream	rng-stream.cc	/^void RngStream::ResetNthSubstream (uint32_t N)$/;"	f	class:ns3::RngStream
ResetStartStream	rng-stream.cc	/^void RngStream::ResetStartStream ()$/;"	f	class:ns3::RngStream
ResetStartSubstream	rng-stream.cc	/^void RngStream::ResetStartSubstream ()$/;"	f	class:ns3::RngStream
Resize	calendar-scheduler.cc	/^CalendarScheduler::Resize (uint32_t newSize)$/;"	f	class:ns3::CalendarScheduler
ResizeDown	calendar-scheduler.cc	/^CalendarScheduler::ResizeDown (void)$/;"	f	class:ns3::CalendarScheduler
ResizeUp	calendar-scheduler.cc	/^CalendarScheduler::ResizeUp (void)$/;"	f	class:ns3::CalendarScheduler
Resolution	nstime.h	/^  struct Resolution$/;"	s	class:ns3::Time
Resolve	config.cc	/^Resolver::Resolve (Ptr<Object> root)$/;"	f	class:ns3::Resolver
Resolver	config.cc	/^Resolver::Resolver (std::string path)$/;"	f	class:ns3::Resolver
Resolver	config.cc	/^class Resolver$/;"	c	namespace:ns3	file:
Result	attribute-accessor-helper.h	/^  typedef typename TypeTraits<typename TypeTraits<T>::ReferencedType>::NonConstType Result;$/;"	t	struct:ns3::AccessorTrait
Result	test.cc	/^TestCase::Result::Result ()$/;"	f	class:ns3::TestCase::Result
Result	test.cc	/^struct TestCase::Result$/;"	s	class:ns3::TestCase	file:
Result	type-traits.h	/^    typedef U Result;$/;"	t	struct:TypeTraits::UnConst
Resume	timer.cc	/^Timer::Resume (void)$/;"	f	class:ns3::Timer
ReturnType	type-traits.h	/^    typedef U ReturnType;$/;"	t	struct:TypeTraits::FunctionPtrTraits
ReturnType	type-traits.h	/^    typedef U ReturnType;$/;"	t	struct:TypeTraits::PtrToMemberTraits
RightChild	heap-scheduler.cc	/^HeapScheduler::RightChild (uint32_t id) const$/;"	f	class:ns3::HeapScheduler
RngStream	rng-stream.cc	/^RngStream::RngStream ()$/;"	f	class:ns3::RngStream
RngStream	rng-stream.cc	/^RngStream::RngStream(const RngStream& r)$/;"	f	class:ns3::RngStream
RngStream	rng-stream.h	/^class RngStream {$/;"	c	namespace:ns3
Root	heap-scheduler.cc	/^HeapScheduler::Root (void) const$/;"	f	class:ns3::HeapScheduler
Roots	config.cc	/^  typedef std::vector<Ptr<Object> > Roots;$/;"	t	class:ns3::ConfigImpl	file:
Run	default-simulator-impl.cc	/^DefaultSimulatorImpl::Run (void)$/;"	f	class:ns3::DefaultSimulatorImpl
Run	realtime-simulator-impl.cc	/^RealtimeSimulatorImpl::Run (void)$/;"	f	class:ns3::RealtimeSimulatorImpl
Run	simulator.cc	/^Simulator::Run (void)$/;"	f	class:ns3::Simulator
Run	test.cc	/^TestCase::Run (TestRunnerImpl *runner)$/;"	f	class:ns3::TestCase
Run	test.cc	/^TestRunner::Run (int argc, char *argv[])$/;"	f	class:ns3::TestRunner
Run	test.cc	/^TestRunnerImpl::Run (int argc, char *argv[])$/;"	f	class:ns3::TestRunnerImpl
Run	unix-fd-reader.cc	/^void FdReader::Run (void)$/;"	f	class:ns3::FdReader
Running	realtime-simulator-impl.cc	/^RealtimeSimulatorImpl::Running (void) const$/;"	f	class:ns3::RealtimeSimulatorImpl
S	nstime.h	/^    S  = 0,$/;"	e	enum:ns3::Time::Unit
SCHEDULER_H	scheduler.h	22;"	d
SIMPLE_REF_COUNT_H	simple-ref-count.h	23;"	d
SIMULATION_SINGLETON_H	simulation-singleton.h	21;"	d
SIMULATOR_H	simulator.h	22;"	d
SIMULATOR_IMPL_H	simulator-impl.h	22;"	d
SINGLETON_H	singleton.h	21;"	d
SUSPENDED	timer.h	/^    SUSPENDED,$/;"	e	enum:ns3::Timer::State
SYNCHRONIZER_H	synchronizer.h	20;"	d
SYNC_BEST_EFFORT	realtime-simulator-impl.h	/^    SYNC_BEST_EFFORT, \/** Make a best effort to keep synced to real-time *\/$/;"	e	enum:ns3::RealtimeSimulatorImpl::SynchronizationMode
SYNC_HARD_LIMIT	realtime-simulator-impl.h	/^    SYNC_HARD_LIMIT, \/** Keep to real-time within a tolerance or die trying *\/$/;"	e	enum:ns3::RealtimeSimulatorImpl::SynchronizationMode
SYSTEM	test.h	/^    SYSTEM,     \/**< This test suite implements a System Test *\/$/;"	e	enum:ns3::TestSuite::Type
SYSTEM_CONDITION_H	system-condition.h	20;"	d
SYSTEM_MUTEX_H	system-mutex.h	22;"	d
SYSTEM_PATH	system-path.h	21;"	d
SYSTEM_PATH_SEP	system-path.cc	52;"	d	file:
SYSTEM_PATH_SEP	system-path.cc	54;"	d	file:
SYSTEM_THREAD_H	system-thread.h	22;"	d
SYSTEM_WALL_CLOCK_MS_H	system-wall-clock-ms.h	22;"	d
Schedule	default-simulator-impl.cc	/^DefaultSimulatorImpl::Schedule (Time const &time, EventImpl *event)$/;"	f	class:ns3::DefaultSimulatorImpl
Schedule	realtime-simulator-impl.cc	/^RealtimeSimulatorImpl::Schedule (Time const &time, EventImpl *impl)$/;"	f	class:ns3::RealtimeSimulatorImpl
Schedule	simulator.cc	/^Simulator::Schedule (Time const &time, const Ptr<EventImpl> &ev)$/;"	f	class:ns3::Simulator
Schedule	simulator.cc	/^Simulator::Schedule (Time const &time, void (*f)(void))$/;"	f	class:ns3::Simulator
Schedule	simulator.h	/^EventId Simulator::Schedule (Time const &time, MEM mem_ptr, OBJ obj) $/;"	f	class:ns3::Simulator
Schedule	simulator.h	/^EventId Simulator::Schedule (Time const &time, MEM mem_ptr, OBJ obj, $/;"	f	class:ns3::Simulator
Schedule	simulator.h	/^EventId Simulator::Schedule (Time const &time, MEM mem_ptr, OBJ obj, T1 a1) $/;"	f	class:ns3::Simulator
Schedule	simulator.h	/^EventId Simulator::Schedule (Time const &time, MEM mem_ptr, OBJ obj, T1 a1, T2 a2)$/;"	f	class:ns3::Simulator
Schedule	simulator.h	/^EventId Simulator::Schedule (Time const &time, MEM mem_ptr, OBJ obj, T1 a1, T2 a2, T3 a3) $/;"	f	class:ns3::Simulator
Schedule	simulator.h	/^EventId Simulator::Schedule (Time const &time, MEM mem_ptr, OBJ obj, T1 a1, T2 a2, T3 a3, T4 a4) $/;"	f	class:ns3::Simulator
Schedule	simulator.h	/^EventId Simulator::Schedule (Time const &time, void (*f)(U1), T1 a1)$/;"	f	class:ns3::Simulator
Schedule	simulator.h	/^EventId Simulator::Schedule (Time const &time, void (*f)(U1,U2), T1 a1, T2 a2)$/;"	f	class:ns3::Simulator
Schedule	simulator.h	/^EventId Simulator::Schedule (Time const &time, void (*f)(U1,U2,U3), T1 a1, T2 a2, T3 a3)$/;"	f	class:ns3::Simulator
Schedule	simulator.h	/^EventId Simulator::Schedule (Time const &time, void (*f)(U1,U2,U3,U4), T1 a1, T2 a2, T3 a3, T4 a4)$/;"	f	class:ns3::Simulator
Schedule	simulator.h	/^EventId Simulator::Schedule (Time const &time, void (*f)(U1,U2,U3,U4,U5), T1 a1, T2 a2, T3 a3, T4 a4, T5 a5)$/;"	f	class:ns3::Simulator
Schedule	timer.cc	/^Timer::Schedule (Time delay)$/;"	f	class:ns3::Timer
Schedule	timer.cc	/^Timer::Schedule (void)$/;"	f	class:ns3::Timer
ScheduleDestroy	default-simulator-impl.cc	/^DefaultSimulatorImpl::ScheduleDestroy (EventImpl *event)$/;"	f	class:ns3::DefaultSimulatorImpl
ScheduleDestroy	realtime-simulator-impl.cc	/^RealtimeSimulatorImpl::ScheduleDestroy (EventImpl *impl)$/;"	f	class:ns3::RealtimeSimulatorImpl
ScheduleDestroy	simulator.cc	/^Simulator::ScheduleDestroy (const Ptr<EventImpl> &ev)$/;"	f	class:ns3::Simulator
ScheduleDestroy	simulator.cc	/^Simulator::ScheduleDestroy (void (*f)(void))$/;"	f	class:ns3::Simulator
ScheduleDestroy	simulator.h	/^Simulator::ScheduleDestroy (MEM mem_ptr, OBJ obj) $/;"	f	class:ns3::Simulator
ScheduleDestroy	simulator.h	/^Simulator::ScheduleDestroy (MEM mem_ptr, OBJ obj, $/;"	f	class:ns3::Simulator
ScheduleDestroy	simulator.h	/^Simulator::ScheduleDestroy (MEM mem_ptr, OBJ obj, T1 a1) $/;"	f	class:ns3::Simulator
ScheduleDestroy	simulator.h	/^Simulator::ScheduleDestroy (MEM mem_ptr, OBJ obj, T1 a1, T2 a2) $/;"	f	class:ns3::Simulator
ScheduleDestroy	simulator.h	/^Simulator::ScheduleDestroy (MEM mem_ptr, OBJ obj, T1 a1, T2 a2, T3 a3) $/;"	f	class:ns3::Simulator
ScheduleDestroy	simulator.h	/^Simulator::ScheduleDestroy (MEM mem_ptr, OBJ obj, T1 a1, T2 a2, T3 a3, T4 a4) $/;"	f	class:ns3::Simulator
ScheduleDestroy	simulator.h	/^Simulator::ScheduleDestroy (void (*f)(U1), T1 a1)$/;"	f	class:ns3::Simulator
ScheduleDestroy	simulator.h	/^Simulator::ScheduleDestroy (void (*f)(U1,U2), T1 a1, T2 a2)$/;"	f	class:ns3::Simulator
ScheduleDestroy	simulator.h	/^Simulator::ScheduleDestroy (void (*f)(U1,U2,U3), T1 a1, T2 a2, T3 a3)$/;"	f	class:ns3::Simulator
ScheduleDestroy	simulator.h	/^Simulator::ScheduleDestroy (void (*f)(U1,U2,U3,U4), T1 a1, T2 a2, T3 a3, T4 a4)$/;"	f	class:ns3::Simulator
ScheduleDestroy	simulator.h	/^Simulator::ScheduleDestroy (void (*f)(U1,U2,U3,U4,U5), T1 a1, T2 a2, T3 a3, T4 a4, T5 a5)$/;"	f	class:ns3::Simulator
ScheduleNow	default-simulator-impl.cc	/^DefaultSimulatorImpl::ScheduleNow (EventImpl *event)$/;"	f	class:ns3::DefaultSimulatorImpl
ScheduleNow	realtime-simulator-impl.cc	/^RealtimeSimulatorImpl::ScheduleNow (EventImpl *impl)$/;"	f	class:ns3::RealtimeSimulatorImpl
ScheduleNow	simulator.cc	/^Simulator::ScheduleNow (const Ptr<EventImpl> &ev)$/;"	f	class:ns3::Simulator
ScheduleNow	simulator.cc	/^Simulator::ScheduleNow (void (*f)(void))$/;"	f	class:ns3::Simulator
ScheduleNow	simulator.h	/^Simulator::ScheduleNow (MEM mem_ptr, OBJ obj) $/;"	f	class:ns3::Simulator
ScheduleNow	simulator.h	/^Simulator::ScheduleNow (MEM mem_ptr, OBJ obj, $/;"	f	class:ns3::Simulator
ScheduleNow	simulator.h	/^Simulator::ScheduleNow (MEM mem_ptr, OBJ obj, T1 a1) $/;"	f	class:ns3::Simulator
ScheduleNow	simulator.h	/^Simulator::ScheduleNow (MEM mem_ptr, OBJ obj, T1 a1, T2 a2) $/;"	f	class:ns3::Simulator
ScheduleNow	simulator.h	/^Simulator::ScheduleNow (MEM mem_ptr, OBJ obj, T1 a1, T2 a2, T3 a3) $/;"	f	class:ns3::Simulator
ScheduleNow	simulator.h	/^Simulator::ScheduleNow (MEM mem_ptr, OBJ obj, T1 a1, T2 a2, T3 a3, T4 a4) $/;"	f	class:ns3::Simulator
ScheduleNow	simulator.h	/^Simulator::ScheduleNow (void (*f)(U1), T1 a1)$/;"	f	class:ns3::Simulator
ScheduleNow	simulator.h	/^Simulator::ScheduleNow (void (*f)(U1,U2), T1 a1, T2 a2)$/;"	f	class:ns3::Simulator
ScheduleNow	simulator.h	/^Simulator::ScheduleNow (void (*f)(U1,U2,U3), T1 a1, T2 a2, T3 a3)$/;"	f	class:ns3::Simulator
ScheduleNow	simulator.h	/^Simulator::ScheduleNow (void (*f)(U1,U2,U3,U4), T1 a1, T2 a2, T3 a3, T4 a4)$/;"	f	class:ns3::Simulator
ScheduleNow	simulator.h	/^Simulator::ScheduleNow (void (*f)(U1,U2,U3,U4,U5), T1 a1, T2 a2, T3 a3, T4 a4, T5 a5)$/;"	f	class:ns3::Simulator
ScheduleRealtime	realtime-simulator-impl.cc	/^RealtimeSimulatorImpl::ScheduleRealtime (Time const &time, EventImpl *impl)$/;"	f	class:ns3::RealtimeSimulatorImpl
ScheduleRealtimeNow	realtime-simulator-impl.cc	/^RealtimeSimulatorImpl::ScheduleRealtimeNow (EventImpl *impl)$/;"	f	class:ns3::RealtimeSimulatorImpl
ScheduleRealtimeNowWithContext	realtime-simulator-impl.cc	/^RealtimeSimulatorImpl::ScheduleRealtimeNowWithContext (uint32_t context, EventImpl *impl)$/;"	f	class:ns3::RealtimeSimulatorImpl
ScheduleRealtimeWithContext	realtime-simulator-impl.cc	/^RealtimeSimulatorImpl::ScheduleRealtimeWithContext (uint32_t context, Time const &time, EventImpl *impl)$/;"	f	class:ns3::RealtimeSimulatorImpl
ScheduleWithContext	default-simulator-impl.cc	/^DefaultSimulatorImpl::ScheduleWithContext (uint32_t context, Time const &time, EventImpl *event)$/;"	f	class:ns3::DefaultSimulatorImpl
ScheduleWithContext	realtime-simulator-impl.cc	/^RealtimeSimulatorImpl::ScheduleWithContext (uint32_t context, Time const &time, EventImpl *impl)$/;"	f	class:ns3::RealtimeSimulatorImpl
ScheduleWithContext	simulator.cc	/^Simulator::ScheduleWithContext (uint32_t context, Time const &time, void (*f)(void))$/;"	f	class:ns3::Simulator
ScheduleWithContext	simulator.cc	/^Simulator::ScheduleWithContext (uint32_t context, const Time &time, EventImpl *impl)$/;"	f	class:ns3::Simulator
ScheduleWithContext	simulator.h	/^void Simulator::ScheduleWithContext (uint32_t context, Time const &time, MEM mem_ptr, OBJ obj)$/;"	f	class:ns3::Simulator
ScheduleWithContext	simulator.h	/^void Simulator::ScheduleWithContext (uint32_t context, Time const &time, MEM mem_ptr, OBJ obj, T1 a1)$/;"	f	class:ns3::Simulator
ScheduleWithContext	simulator.h	/^void Simulator::ScheduleWithContext (uint32_t context, Time const &time, MEM mem_ptr, OBJ obj, T1 a1, T2 a2)$/;"	f	class:ns3::Simulator
ScheduleWithContext	simulator.h	/^void Simulator::ScheduleWithContext (uint32_t context, Time const &time, MEM mem_ptr, OBJ obj, T1 a1, T2 a2, T3 a3)$/;"	f	class:ns3::Simulator
ScheduleWithContext	simulator.h	/^void Simulator::ScheduleWithContext (uint32_t context, Time const &time, MEM mem_ptr, OBJ obj, T1 a1, T2 a2, T3 a3, T4 a4)$/;"	f	class:ns3::Simulator
ScheduleWithContext	simulator.h	/^void Simulator::ScheduleWithContext (uint32_t context, Time const &time, MEM mem_ptr, OBJ obj,$/;"	f	class:ns3::Simulator
ScheduleWithContext	simulator.h	/^void Simulator::ScheduleWithContext (uint32_t context, Time const &time, void (*f)(U1), T1 a1)$/;"	f	class:ns3::Simulator
ScheduleWithContext	simulator.h	/^void Simulator::ScheduleWithContext (uint32_t context, Time const &time, void (*f)(U1,U2), T1 a1, T2 a2)$/;"	f	class:ns3::Simulator
ScheduleWithContext	simulator.h	/^void Simulator::ScheduleWithContext (uint32_t context, Time const &time, void (*f)(U1,U2,U3), T1 a1, T2 a2, T3 a3)$/;"	f	class:ns3::Simulator
ScheduleWithContext	simulator.h	/^void Simulator::ScheduleWithContext (uint32_t context, Time const &time, void (*f)(U1,U2,U3,U4), T1 a1, T2 a2, T3 a3, T4 a4)$/;"	f	class:ns3::Simulator
ScheduleWithContext	simulator.h	/^void Simulator::ScheduleWithContext (uint32_t context, Time const &time, void (*f)(U1,U2,U3,U4,U5), T1 a1, T2 a2, T3 a3, T4 a4, T5 a5)$/;"	f	class:ns3::Simulator
Scheduler	scheduler.h	/^class Scheduler : public Object$/;"	c	namespace:ns3
Seconds	nstime.h	/^inline Time Seconds (double seconds)$/;"	f	namespace:ns3
Seconds	nstime.h	/^inline Time Seconds (int64x64_t seconds)$/;"	f	namespace:ns3
SeedManager	random-variable.h	/^class SeedManager$/;"	c	namespace:ns3
Self	system-thread.cc	/^SystemThread::Self (void)$/;"	f	class:ns3::SystemThread
SequentialVariable	random-variable.cc	/^SequentialVariable::SequentialVariable (double f, double l, const RandomVariable& i, uint32_t c)$/;"	f	class:ns3::SequentialVariable
SequentialVariable	random-variable.cc	/^SequentialVariable::SequentialVariable (double f, double l, double i, uint32_t c)$/;"	f	class:ns3::SequentialVariable
SequentialVariable	random-variable.h	/^class SequentialVariable : public RandomVariable$/;"	c	namespace:ns3
SequentialVariableImpl	random-variable.cc	/^SequentialVariableImpl::SequentialVariableImpl (const SequentialVariableImpl& c)$/;"	f	class:ns3::SequentialVariableImpl
SequentialVariableImpl	random-variable.cc	/^SequentialVariableImpl::SequentialVariableImpl (double f, double l, const RandomVariable& i, uint32_t c)$/;"	f	class:ns3::SequentialVariableImpl
SequentialVariableImpl	random-variable.cc	/^SequentialVariableImpl::SequentialVariableImpl (double f, double l, double i, uint32_t c)$/;"	f	class:ns3::SequentialVariableImpl
SequentialVariableImpl	random-variable.cc	/^class SequentialVariableImpl : public RandomVariableBase$/;"	c	namespace:ns3	file:
SerializeToString	attribute.cc	/^EmptyAttributeValue::SerializeToString (Ptr<const AttributeChecker> checker) const$/;"	f	class:ns3::EmptyAttributeValue
SerializeToString	boolean.cc	/^BooleanValue::SerializeToString (Ptr<const AttributeChecker> checker) const$/;"	f	class:ns3::BooleanValue
SerializeToString	callback.cc	/^CallbackValue::SerializeToString (Ptr<const AttributeChecker> checker) const$/;"	f	class:ns3::CallbackValue
SerializeToString	enum.cc	/^EnumValue::SerializeToString (Ptr<const AttributeChecker> checker) const$/;"	f	class:ns3::EnumValue
SerializeToString	object-ptr-container.cc	/^ObjectPtrContainerValue::SerializeToString (Ptr<const AttributeChecker> checker) const$/;"	f	class:ns3::ObjectPtrContainerValue
SerializeToString	pointer.cc	/^PointerValue::SerializeToString (Ptr<const AttributeChecker> checker) const$/;"	f	class:ns3::PointerValue
Set	attribute-accessor-helper.h	/^  virtual bool Set (ObjectBase * object, const AttributeValue & val) const {$/;"	f	class:ns3::AccessorHelper
Set	boolean.cc	/^BooleanValue::Set (bool value)$/;"	f	class:ns3::BooleanValue
Set	callback.cc	/^CallbackValue::Set (CallbackBase base)$/;"	f	class:ns3::CallbackValue
Set	config.cc	/^ConfigImpl::Set (std::string path, const AttributeValue &value)$/;"	f	class:ns3::ConfigImpl
Set	config.cc	/^MatchContainer::Set (std::string name, const AttributeValue &value)$/;"	f	class:ns3::Config::MatchContainer
Set	config.cc	/^void Set (std::string path, const AttributeValue &value)$/;"	f	namespace:ns3::Config
Set	enum.cc	/^EnumValue::Set (int v)$/;"	f	class:ns3::EnumValue
Set	object-factory.cc	/^ObjectFactory::Set (std::string name, const AttributeValue &value)$/;"	f	class:ns3::ObjectFactory
Set	object-ptr-container.cc	/^ObjectPtrContainerAccessor::Set (ObjectBase * object, const AttributeValue & value) const$/;"	f	class:ns3::ObjectPtrContainerAccessor
Set	pointer.h	/^PointerValue::Set (const Ptr<T> &object)$/;"	f	class:ns3::PointerValue
Set	traced-value.h	/^  void Set (const T &v) {$/;"	f	class:ns3::TracedValue
SetAntithetic	rng-stream.cc	/^void RngStream::SetAntithetic (bool a)$/;"	f	class:ns3::RngStream
SetArgs	timer-impl.h	/^TimerImpl::SetArgs (T1 a1)$/;"	f	class:ns3::TimerImpl
SetArgs	timer-impl.h	/^TimerImpl::SetArgs (T1 a1, T2 a2)$/;"	f	class:ns3::TimerImpl
SetArgs	timer-impl.h	/^TimerImpl::SetArgs (T1 a1, T2 a2, T3 a3)$/;"	f	class:ns3::TimerImpl
SetArgs	timer-impl.h	/^TimerImpl::SetArgs (T1 a1, T2 a2, T3 a3, T4 a4)$/;"	f	class:ns3::TimerImpl
SetArgs	timer-impl.h	/^TimerImpl::SetArgs (T1 a1, T2 a2, T3 a3, T4 a4, T5 a5)$/;"	f	class:ns3::TimerImpl
SetArgs	timer-impl.h	/^TimerImpl::SetArgs (T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6)$/;"	f	class:ns3::TimerImpl
SetArguments	timer.h	/^Timer::SetArguments (T1 a1)$/;"	f	class:ns3::Timer
SetArguments	timer.h	/^Timer::SetArguments (T1 a1, T2 a2)$/;"	f	class:ns3::Timer
SetArguments	timer.h	/^Timer::SetArguments (T1 a1, T2 a2, T3 a3)$/;"	f	class:ns3::Timer
SetArguments	timer.h	/^Timer::SetArguments (T1 a1, T2 a2, T3 a3, T4 a4)$/;"	f	class:ns3::Timer
SetArguments	timer.h	/^Timer::SetArguments (T1 a1, T2 a2, T3 a3, T4 a4, T5 a5)$/;"	f	class:ns3::Timer
SetArguments	timer.h	/^Timer::SetArguments (T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6)$/;"	f	class:ns3::Timer
SetArguments	watchdog.h	/^Watchdog::SetArguments (T1 a1)$/;"	f	class:ns3::Watchdog
SetArguments	watchdog.h	/^Watchdog::SetArguments (T1 a1, T2 a2)$/;"	f	class:ns3::Watchdog
SetArguments	watchdog.h	/^Watchdog::SetArguments (T1 a1, T2 a2, T3 a3)$/;"	f	class:ns3::Watchdog
SetArguments	watchdog.h	/^Watchdog::SetArguments (T1 a1, T2 a2, T3 a3, T4 a4)$/;"	f	class:ns3::Watchdog
SetArguments	watchdog.h	/^Watchdog::SetArguments (T1 a1, T2 a2, T3 a3, T4 a4, T5 a5)$/;"	f	class:ns3::Watchdog
SetArguments	watchdog.h	/^Watchdog::SetArguments (T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6)$/;"	f	class:ns3::Watchdog
SetAttribute	object-base.cc	/^ObjectBase::SetAttribute (std::string name, const AttributeValue &value)$/;"	f	class:ns3::ObjectBase
SetAttributeFailSafe	object-base.cc	/^ObjectBase::SetAttributeFailSafe (std::string name, const AttributeValue &value)$/;"	f	class:ns3::ObjectBase
SetAttributeInitialValue	type-id.cc	/^IidManager::SetAttributeInitialValue(uint16_t uid,$/;"	f	class:__anon4::IidManager
SetAttributeInitialValue	type-id.cc	/^TypeId::SetAttributeInitialValue(uint32_t i, $/;"	f	class:ns3::TypeId
SetCondition	synchronizer.cc	/^Synchronizer::SetCondition (bool cond)$/;"	f	class:ns3::Synchronizer
SetCondition	unix-system-condition.cc	/^SystemCondition::SetCondition (bool condition) $/;"	f	class:ns3::SystemCondition
SetCondition	unix-system-condition.cc	/^SystemConditionPrivate::SetCondition (bool condition)$/;"	f	class:ns3::SystemConditionPrivate
SetConstant	random-variable.cc	/^ConstantVariable::SetConstant (double c)$/;"	f	class:ns3::ConstantVariable
SetDataDir	test.cc	/^TestCase::SetDataDir (std::string directory)$/;"	f	class:ns3::TestCase
SetDefault	config.cc	/^void SetDefault (std::string name, const AttributeValue &value)$/;"	f	namespace:ns3::Config
SetDefaultFailSafe	config.cc	/^bool SetDefaultFailSafe (std::string fullName, const AttributeValue &value)$/;"	f	namespace:ns3::Config
SetDelay	timer.cc	/^Timer::SetDelay (const Time &time)$/;"	f	class:ns3::Timer
SetFunction	timer.h	/^Timer::SetFunction (FN fn)$/;"	f	class:ns3::Timer
SetFunction	timer.h	/^Timer::SetFunction (MEM_PTR memPtr, OBJ_PTR objPtr)$/;"	f	class:ns3::Timer
SetFunction	watchdog.h	/^Watchdog::SetFunction (FN fn)$/;"	f	class:ns3::Watchdog
SetFunction	watchdog.h	/^Watchdog::SetFunction (MEM_PTR memPtr, OBJ_PTR objPtr)$/;"	f	class:ns3::Watchdog
SetGlobal	config.cc	/^void SetGlobal (std::string name, const AttributeValue &value)$/;"	f	namespace:ns3::Config
SetGlobalFailSafe	config.cc	/^bool SetGlobalFailSafe (std::string name, const AttributeValue &value)$/;"	f	namespace:ns3::Config
SetGroupName	type-id.cc	/^IidManager::SetGroupName (uint16_t uid, std::string groupName)$/;"	f	class:__anon4::IidManager
SetGroupName	type-id.cc	/^TypeId::SetGroupName (std::string groupName)$/;"	f	class:ns3::TypeId
SetHardLimit	realtime-simulator-impl.cc	/^RealtimeSimulatorImpl::SetHardLimit (Time limit)$/;"	f	class:ns3::RealtimeSimulatorImpl
SetImplementation	simulator.cc	/^Simulator::SetImplementation (Ptr<SimulatorImpl> impl)$/;"	f	class:ns3::Simulator
SetObject	pointer.cc	/^PointerValue::SetObject (Ptr<Object> object)$/;"	f	class:ns3::PointerValue
SetOrigin	synchronizer.cc	/^Synchronizer::SetOrigin (uint64_t ts)$/;"	f	class:ns3::Synchronizer
SetPackageRun	rng-stream.cc	/^RngStream::SetPackageRun (uint32_t run)$/;"	f	class:ns3::RngStream
SetPackageSeed	rng-stream.cc	/^RngStream::SetPackageSeed (uint32_t seed)$/;"	f	class:ns3::RngStream
SetPackageSeed	rng-stream.cc	/^bool RngStream::SetPackageSeed (const uint32_t seed[6])$/;"	f	class:ns3::RngStream
SetParent	type-id.cc	/^IidManager::SetParent (uint16_t uid, uint16_t parent)$/;"	f	class:__anon4::IidManager
SetParent	type-id.cc	/^TypeId::SetParent (TypeId tid)$/;"	f	class:ns3::TypeId
SetParent	type-id.h	/^TypeId::SetParent (void)$/;"	f	class:ns3::TypeId
SetResolution	time.cc	/^Time::SetResolution (enum Unit resolution)$/;"	f	class:ns3::Time
SetResolution	time.cc	/^Time::SetResolution (enum Unit unit, struct Resolution *resolution)$/;"	f	class:ns3::Time
SetRun	random-variable.cc	/^void SeedManager::SetRun (uint32_t run)$/;"	f	class:ns3::SeedManager
SetScheduler	default-simulator-impl.cc	/^DefaultSimulatorImpl::SetScheduler (ObjectFactory schedulerFactory)$/;"	f	class:ns3::DefaultSimulatorImpl
SetScheduler	realtime-simulator-impl.cc	/^RealtimeSimulatorImpl::SetScheduler (ObjectFactory schedulerFactory)$/;"	f	class:ns3::RealtimeSimulatorImpl
SetScheduler	simulator.cc	/^Simulator::SetScheduler (ObjectFactory schedulerFactory)$/;"	f	class:ns3::Simulator
SetSeed	random-variable.cc	/^void SeedManager::SetSeed (uint32_t seed)$/;"	f	class:ns3::SeedManager
SetSeeds	rng-stream.cc	/^bool RngStream::SetSeeds (const uint32_t seed[6])$/;"	f	class:ns3::RngStream
SetSynchronizationMode	realtime-simulator-impl.cc	/^RealtimeSimulatorImpl::SetSynchronizationMode (enum SynchronizationMode mode)$/;"	f	class:ns3::RealtimeSimulatorImpl
SetTypeId	object-factory.cc	/^ObjectFactory::SetTypeId (TypeId tid)$/;"	f	class:ns3::ObjectFactory
SetTypeId	object-factory.cc	/^ObjectFactory::SetTypeId (const char *tid)$/;"	f	class:ns3::ObjectFactory
SetTypeId	object-factory.cc	/^ObjectFactory::SetTypeId (std::string tid)$/;"	f	class:ns3::ObjectFactory
SetTypeId	object.cc	/^Object::SetTypeId (TypeId tid)$/;"	f	class:ns3::Object
SetUid	type-id.cc	/^TypeId::SetUid (uint16_t tid)$/;"	f	class:ns3::TypeId
SetValue	global-value.cc	/^GlobalValue::SetValue (const AttributeValue &value)$/;"	f	class:ns3::GlobalValue
Sibling	heap-scheduler.cc	/^HeapScheduler::Sibling (uint32_t id) const$/;"	f	class:ns3::HeapScheduler
Signal	synchronizer.cc	/^Synchronizer::Signal (void)$/;"	f	class:ns3::Synchronizer
Signal	unix-system-condition.cc	/^SystemCondition::Signal (void) $/;"	f	class:ns3::SystemCondition
Signal	unix-system-condition.cc	/^SystemConditionPrivate::Signal (void)$/;"	f	class:ns3::SystemConditionPrivate
SimpleRefCount	simple-ref-count.h	/^  SimpleRefCount ()$/;"	f	class:ns3::SimpleRefCount
SimpleRefCount	simple-ref-count.h	/^  SimpleRefCount (const SimpleRefCount &o)$/;"	f	class:ns3::SimpleRefCount
SimpleRefCount	simple-ref-count.h	/^class SimpleRefCount : public PARENT$/;"	c	namespace:ns3
SimulationSingleton	simulation-singleton.h	/^class SimulationSingleton$/;"	c	namespace:ns3
Simulator	simulator.h	/^class Simulator $/;"	c	namespace:ns3
SimulatorImpl	simulator-impl.h	/^class SimulatorImpl : public Object$/;"	c	namespace:ns3
Singleton	singleton.h	/^class Singleton$/;"	c	namespace:ns3
SleepWait	wall-clock-synchronizer.cc	/^WallClockSynchronizer::SleepWait (uint64_t ns)$/;"	f	class:ns3::WallClockSynchronizer
Smallest	heap-scheduler.cc	/^HeapScheduler::Smallest (uint32_t a, uint32_t b) const$/;"	f	class:ns3::HeapScheduler
SpinWait	wall-clock-synchronizer.cc	/^WallClockSynchronizer::SpinWait (uint64_t ns)$/;"	f	class:ns3::WallClockSynchronizer
Split	system-path.cc	/^std::list<std::string> Split (std::string path)$/;"	f	namespace:ns3::SystemPath
Start	object.cc	/^Object::Start (void)$/;"	f	class:ns3::Object
Start	system-thread.cc	/^SystemThread::Start (void)$/;"	f	class:ns3::SystemThread
Start	unix-fd-reader.cc	/^void FdReader::Start (int fd, Callback<void, uint8_t *, ssize_t> readCallback)$/;"	f	class:ns3::FdReader
Start	unix-system-wall-clock-ms.cc	/^SystemWallClockMs::Start (void)$/;"	f	class:ns3::SystemWallClockMs
Start	unix-system-wall-clock-ms.cc	/^SystemWallClockMsPrivate::Start (void)$/;"	f	class:ns3::SystemWallClockMsPrivate
Start	win32-system-wall-clock-ms.cc	/^SystemWallClockMs::Start (void)$/;"	f	class:ns3::SystemWallClockMs
Start	win32-system-wall-clock-ms.cc	/^SystemWallClockMsPrivate::Start (void)$/;"	f	class:ns3::SystemWallClockMsPrivate
State	timer.h	/^  enum State$/;"	g	class:ns3::Timer
StaticCast	ptr.h	/^StaticCast (Ptr<T2> const&p)$/;"	f	namespace:ns3
Stop	default-simulator-impl.cc	/^DefaultSimulatorImpl::Stop (Time const &time)$/;"	f	class:ns3::DefaultSimulatorImpl
Stop	default-simulator-impl.cc	/^DefaultSimulatorImpl::Stop (void)$/;"	f	class:ns3::DefaultSimulatorImpl
Stop	realtime-simulator-impl.cc	/^RealtimeSimulatorImpl::Stop (Time const &time)$/;"	f	class:ns3::RealtimeSimulatorImpl
Stop	realtime-simulator-impl.cc	/^RealtimeSimulatorImpl::Stop (void)$/;"	f	class:ns3::RealtimeSimulatorImpl
Stop	simulator.cc	/^Simulator::Stop (Time const &time)$/;"	f	class:ns3::Simulator
Stop	simulator.cc	/^Simulator::Stop (void)$/;"	f	class:ns3::Simulator
Stop	unix-fd-reader.cc	/^void FdReader::Stop (void)$/;"	f	class:ns3::FdReader
StoredType	timer-impl.h	/^  typedef typename TypeTraits<typename TypeTraits<T>::ReferencedType>::NonConstType StoredType;$/;"	t	struct:ns3::TimerTraits
StringToUint32	config.cc	/^ArrayMatcher::StringToUint32 (std::string str, uint32_t *value) const$/;"	f	class:ns3::ArrayMatcher
Suspend	timer.cc	/^Timer::Suspend (void)$/;"	f	class:ns3::Timer
SynchronizationMode	realtime-simulator-impl.h	/^  enum SynchronizationMode {$/;"	g	class:ns3::RealtimeSimulatorImpl
Synchronize	synchronizer.cc	/^Synchronizer::Synchronize (uint64_t tsCurrent, uint64_t tsDelay)$/;"	f	class:ns3::Synchronizer
Synchronizer	synchronizer.cc	/^Synchronizer::Synchronizer ()$/;"	f	class:ns3::Synchronizer
Synchronizer	synchronizer.h	/^class Synchronizer : public Object $/;"	c	namespace:ns3
SystemCondition	system-condition.h	/^class SystemCondition$/;"	c	namespace:ns3
SystemCondition	unix-system-condition.cc	/^SystemCondition::SystemCondition() $/;"	f	class:ns3::SystemCondition
SystemConditionPrivate	unix-system-condition.cc	/^SystemConditionPrivate::SystemConditionPrivate ()$/;"	f	class:ns3::SystemConditionPrivate
SystemConditionPrivate	unix-system-condition.cc	/^class SystemConditionPrivate {$/;"	c	namespace:ns3	file:
SystemMutex	system-mutex.h	/^class SystemMutex $/;"	c	namespace:ns3
SystemMutex	unix-system-mutex.cc	/^SystemMutex::SystemMutex() $/;"	f	class:ns3::SystemMutex
SystemMutexPrivate	unix-system-mutex.cc	/^SystemMutexPrivate::SystemMutexPrivate ()$/;"	f	class:ns3::SystemMutexPrivate
SystemMutexPrivate	unix-system-mutex.cc	/^class SystemMutexPrivate {$/;"	c	namespace:ns3	file:
SystemPath	system-path.cc	/^namespace SystemPath {$/;"	n	namespace:ns3	file:
SystemPath	system-path.h	/^namespace SystemPath {$/;"	n	namespace:ns3
SystemThread	system-thread.cc	/^SystemThread::SystemThread (Callback<void> callback)$/;"	f	class:ns3::SystemThread
SystemThread	system-thread.h	/^class SystemThread : public SimpleRefCount<SystemThread>$/;"	c	namespace:ns3
SystemWallClockMs	system-wall-clock-ms.h	/^class SystemWallClockMs {$/;"	c	namespace:ns3
SystemWallClockMs	unix-system-wall-clock-ms.cc	/^SystemWallClockMs::SystemWallClockMs ()$/;"	f	class:ns3::SystemWallClockMs
SystemWallClockMs	win32-system-wall-clock-ms.cc	/^SystemWallClockMs::SystemWallClockMs ()$/;"	f	class:ns3::SystemWallClockMs
SystemWallClockMsPrivate	unix-system-wall-clock-ms.cc	/^class SystemWallClockMsPrivate {$/;"	c	namespace:ns3	file:
SystemWallClockMsPrivate	win32-system-wall-clock-ms.cc	/^class SystemWallClockMsPrivate {$/;"	c	namespace:ns3	file:
TIMER_H	timer.h	21;"	d
TIMER_IMPL_H	timer-impl.h	21;"	d
TIMER_SUSPENDED	timer.h	/^    TIMER_SUSPENDED = (1 << 7)$/;"	e	enum:ns3::Timer::__anon5
TIME_H	nstime.h	21;"	d
TRACED_CALLBACK_H	traced-callback.h	22;"	d
TRACED_VALUE_DEBUG	traced-value.h	30;"	d
TRACED_VALUE_H	traced-value.h	21;"	d
TRACE_SOURCE_ACCESSOR_H	trace-source-accessor.h	21;"	d
TYPE_ID_H	type-id.h	21;"	d
TYPE_NAME_H	type-name.h	4;"	d
TYPE_TRAITS_H	type-traits.h	2;"	d
TestCase	test.cc	/^TestCase::TestCase (std::string name)$/;"	f	class:ns3::TestCase
TestCase	test.h	/^class TestCase$/;"	c	namespace:ns3
TestCaseFailure	test.cc	/^TestCaseFailure::TestCaseFailure (std::string _cond, std::string _actual, $/;"	f	class:ns3::TestCaseFailure
TestCaseFailure	test.cc	/^struct TestCaseFailure$/;"	s	namespace:ns3	file:
TestDoubleIsEqual	test.cc	/^TestDoubleIsEqual (const double x1, const double x2, const double epsilon)$/;"	f	namespace:ns3
TestRunner	test.h	/^class TestRunner$/;"	c	namespace:ns3
TestRunnerImpl	test.cc	/^TestRunnerImpl::TestRunnerImpl ()$/;"	f	class:ns3::TestRunnerImpl
TestRunnerImpl	test.cc	/^class TestRunnerImpl$/;"	c	namespace:ns3	file:
TestSuite	test.cc	/^TestSuite::TestSuite (std::string name, TestSuite::Type type)$/;"	f	class:ns3::TestSuite
TestSuite	test.h	/^class TestSuite : public TestCase$/;"	c	namespace:ns3
TestSuiteVector	test.cc	/^  typedef std::vector<TestSuite *> TestSuiteVector;$/;"	t	class:ns3::TestRunnerImpl	file:
TestVector	test.h	/^  typedef std::vector<T> TestVector;$/;"	t	class:ns3::TestVectors
TestVectors	test.h	/^TestVectors<T>::TestVectors ()$/;"	f	class:ns3::TestVectors
TestVectors	test.h	/^class TestVectors$/;"	c	namespace:ns3
Tester	ptr.h	/^  class Tester {$/;"	c	class:ns3::Ptr
ThreadId	system-thread.h	/^  typedef pthread_t ThreadId;$/;"	t	class:ns3::SystemThread
Time	nstime.h	/^  explicit inline Time (const int64x64_t &value)$/;"	f	class:ns3::Time
Time	nstime.h	/^  explicit inline Time (double v)$/;"	f	class:ns3::Time
Time	nstime.h	/^  explicit inline Time (int v)$/;"	f	class:ns3::Time
Time	nstime.h	/^  explicit inline Time (long int v)$/;"	f	class:ns3::Time
Time	nstime.h	/^  explicit inline Time (long long int v)$/;"	f	class:ns3::Time
Time	nstime.h	/^  explicit inline Time (unsigned int v)$/;"	f	class:ns3::Time
Time	nstime.h	/^  explicit inline Time (unsigned long int v)$/;"	f	class:ns3::Time
Time	nstime.h	/^  explicit inline Time (unsigned long long int v)$/;"	f	class:ns3::Time
Time	nstime.h	/^  inline Time ()$/;"	f	class:ns3::Time
Time	nstime.h	/^  inline Time(const Time &o)$/;"	f	class:ns3::Time
Time	nstime.h	/^class Time$/;"	c	namespace:ns3
Time	time.cc	/^Time::Time (const std::string& s)$/;"	f	class:ns3::Time
TimePrinter	simulator.cc	/^TimePrinter (std::ostream &os)$/;"	f	namespace:ns3
TimeStep	nstime.h	/^inline Time TimeStep (uint64_t ts)$/;"	f	namespace:ns3
TimeStepToNanosecond	synchronizer.cc	/^Synchronizer::TimeStepToNanosecond (uint64_t ts)$/;"	f	class:ns3::Synchronizer
TimedWait	unix-system-condition.cc	/^SystemCondition::TimedWait (uint64_t ns) $/;"	f	class:ns3::SystemCondition
TimedWait	unix-system-condition.cc	/^SystemConditionPrivate::TimedWait (uint64_t ns)$/;"	f	class:ns3::SystemConditionPrivate
Timer	timer.cc	/^Timer::Timer ()$/;"	f	class:ns3::Timer
Timer	timer.cc	/^Timer::Timer (enum DestroyPolicy destroyPolicy)$/;"	f	class:ns3::Timer
Timer	timer.h	/^class Timer$/;"	c	namespace:ns3
TimerImpl	timer-impl.h	/^class TimerImpl$/;"	c	namespace:ns3
TimerImplFive	timer-impl.h	/^struct TimerImplFive : public TimerImpl$/;"	s	namespace:ns3
TimerImplFour	timer-impl.h	/^struct TimerImplFour : public TimerImpl$/;"	s	namespace:ns3
TimerImplMemberTraits	timer-impl.h	/^struct TimerImplMemberTraits<T *>$/;"	s	namespace:ns3
TimerImplOne	timer-impl.h	/^struct TimerImplOne : public TimerImpl$/;"	s	namespace:ns3
TimerImplSix	timer-impl.h	/^struct TimerImplSix : public TimerImpl$/;"	s	namespace:ns3
TimerImplThree	timer-impl.h	/^struct TimerImplThree : public TimerImpl$/;"	s	namespace:ns3
TimerImplTwo	timer-impl.h	/^struct TimerImplTwo : public TimerImpl$/;"	s	namespace:ns3
TimerTraits	timer-impl.h	/^struct TimerTraits$/;"	s	namespace:ns3
TimevalAdd	wall-clock-synchronizer.cc	/^WallClockSynchronizer::TimevalAdd ($/;"	f	class:ns3::WallClockSynchronizer
TimevalToNs	wall-clock-synchronizer.cc	/^WallClockSynchronizer::TimevalToNs (struct timeval *tv)$/;"	f	class:ns3::WallClockSynchronizer
To	nstime.h	/^  inline int64x64_t To (enum Unit timeUnit) const$/;"	f	class:ns3::Time
ToDouble	nstime.h	/^  inline double ToDouble (enum Unit timeUnit) const$/;"	f	class:ns3::Time
ToInteger	nstime.h	/^  inline int64_t ToInteger (enum Unit timeUnit) const$/;"	f	class:ns3::Time
TopDown	heap-scheduler.cc	/^HeapScheduler::TopDown (uint32_t start)$/;"	f	class:ns3::HeapScheduler
TraceConnect	object-base.cc	/^ObjectBase::TraceConnect (std::string name, std::string context, const CallbackBase &cb)$/;"	f	class:ns3::ObjectBase
TraceConnectWithoutContext	object-base.cc	/^ObjectBase::TraceConnectWithoutContext (std::string name, const CallbackBase &cb)$/;"	f	class:ns3::ObjectBase
TraceDisconnect	object-base.cc	/^ObjectBase::TraceDisconnect (std::string name, std::string context, const CallbackBase &cb)$/;"	f	class:ns3::ObjectBase
TraceDisconnectWithoutContext	object-base.cc	/^ObjectBase::TraceDisconnectWithoutContext (std::string name, const CallbackBase &cb)$/;"	f	class:ns3::ObjectBase
TraceSourceAccessor	trace-source-accessor.cc	/^TraceSourceAccessor::TraceSourceAccessor ()$/;"	f	class:ns3::TraceSourceAccessor
TraceSourceAccessor	trace-source-accessor.h	/^class TraceSourceAccessor : public SimpleRefCount<TraceSourceAccessor>$/;"	c	namespace:ns3
TraceSourceInformation	type-id.h	/^  struct TraceSourceInformation {$/;"	s	class:ns3::TypeId
TracedCallback	traced-callback.h	/^TracedCallback<T1,T2,T3,T4,T5,T6,T7,T8>::TracedCallback ()$/;"	f	class:ns3::TracedCallback
TracedCallback	traced-callback.h	/^class TracedCallback $/;"	c	namespace:ns3
TracedValue	traced-value.h	/^  TracedValue ()$/;"	f	class:ns3::TracedValue
TracedValue	traced-value.h	/^  TracedValue (const T &v)$/;"	f	class:ns3::TracedValue
TracedValue	traced-value.h	/^  TracedValue (const TracedValue &o)$/;"	f	class:ns3::TracedValue
TracedValue	traced-value.h	/^  TracedValue (const TracedValue<U> &other)$/;"	f	class:ns3::TracedValue
TracedValue	traced-value.h	/^  TracedValue (const U &other)$/;"	f	class:ns3::TracedValue
TracedValue	traced-value.h	/^class TracedValue$/;"	c	namespace:ns3
TriangularVariable	random-variable.cc	/^TriangularVariable::TriangularVariable ()$/;"	f	class:ns3::TriangularVariable
TriangularVariable	random-variable.cc	/^TriangularVariable::TriangularVariable (double s, double l, double mean)$/;"	f	class:ns3::TriangularVariable
TriangularVariable	random-variable.h	/^class TriangularVariable : public RandomVariable$/;"	c	namespace:ns3
TriangularVariableImpl	random-variable.cc	/^TriangularVariableImpl::TriangularVariableImpl ()$/;"	f	class:ns3::TriangularVariableImpl
TriangularVariableImpl	random-variable.cc	/^TriangularVariableImpl::TriangularVariableImpl (const TriangularVariableImpl& c)$/;"	f	class:ns3::TriangularVariableImpl
TriangularVariableImpl	random-variable.cc	/^TriangularVariableImpl::TriangularVariableImpl (double s, double l, double mean)$/;"	f	class:ns3::TriangularVariableImpl
TriangularVariableImpl	random-variable.cc	/^class TriangularVariableImpl : public RandomVariableBase$/;"	c	namespace:ns3	file:
Type	test.h	/^  enum Type {$/;"	g	class:ns3::TestSuite
TypeId	type-id.cc	/^TypeId::TypeId (const char *name)$/;"	f	class:ns3::TypeId
TypeId	type-id.cc	/^TypeId::TypeId (uint16_t tid)$/;"	f	class:ns3::TypeId
TypeId	type-id.h	/^TypeId::TypeId ()$/;"	f	class:ns3::TypeId
TypeId	type-id.h	/^TypeId::TypeId (const TypeId &o)$/;"	f	class:ns3::TypeId
TypeId	type-id.h	/^class TypeId$/;"	c	namespace:ns3
TypeNameGet	type-name.h	/^std::string TypeNameGet (void)$/;"	f	namespace:ns3
TypeTraits	type-traits.h	/^struct TypeTraits$/;"	s
U	attribute-accessor-helper.h	/^DoMakeAccessorHelperOne (U (T::*getter)(void) const)$/;"	f	namespace:ns3
U01	rng-stream.cc	/^double RngStream::U01 ()$/;"	f	class:ns3::RngStream
U01d	rng-stream.cc	/^double RngStream::U01d ()$/;"	f	class:ns3::RngStream
UINT16_MAX	cairo-wideint-private.h	73;"	d
UINTEGER_H	uinteger.h	21;"	d
UNIT	test.h	/^    UNIT,       \/**< This test suite implements a Unit Test *\/$/;"	e	enum:ns3::TestSuite::Type
UNIX_FD_READER_H	unix-fd-reader.h	22;"	d
UNUSED_H	unused.h	2;"	d
US	nstime.h	/^    US = 2,$/;"	e	enum:ns3::Time::Unit
US_PER_NS	wall-clock-synchronizer.h	/^  static const uint64_t US_PER_NS = (uint64_t)1000;$/;"	m	class:ns3::WallClockSynchronizer
US_PER_SEC	wall-clock-synchronizer.h	/^  static const uint64_t US_PER_SEC = (uint64_t)1000000;$/;"	m	class:ns3::WallClockSynchronizer
Udiv	int64x64-cairo.cc	/^int64x64_t::Udiv (cairo_uint128_t a, cairo_uint128_t b)$/;"	f	class:ns3::int64x64_t
Umul	int64x64-128.cc	/^int64x64_t::Umul (uint128_t a, uint128_t b)$/;"	f	class:ns3::int64x64_t
Umul	int64x64-cairo.cc	/^int64x64_t::Umul (cairo_uint128_t a, cairo_uint128_t b)$/;"	f	class:ns3::int64x64_t
UmulByInvert	int64x64-128.cc	/^int64x64_t::UmulByInvert (uint128_t a, uint128_t b)$/;"	f	class:ns3::int64x64_t
UmulByInvert	int64x64-cairo.cc	/^int64x64_t::UmulByInvert (cairo_uint128_t a, cairo_uint128_t b)$/;"	f	class:ns3::int64x64_t
UnConst	type-traits.h	/^  template <typename U> struct UnConst$/;"	s	struct:TypeTraits
UnConst	type-traits.h	/^  template <typename U> struct UnConst<const U>$/;"	s	struct:TypeTraits
UniformVariable	random-variable.cc	/^UniformVariable::UniformVariable ()$/;"	f	class:ns3::UniformVariable
UniformVariable	random-variable.cc	/^UniformVariable::UniformVariable (double s, double l)$/;"	f	class:ns3::UniformVariable
UniformVariable	random-variable.h	/^class UniformVariable : public RandomVariable$/;"	c	namespace:ns3
UniformVariableImpl	random-variable.cc	/^UniformVariableImpl::UniformVariableImpl ()$/;"	f	class:ns3::UniformVariableImpl
UniformVariableImpl	random-variable.cc	/^UniformVariableImpl::UniformVariableImpl (const UniformVariableImpl& c)$/;"	f	class:ns3::UniformVariableImpl
UniformVariableImpl	random-variable.cc	/^UniformVariableImpl::UniformVariableImpl (double s, double l)$/;"	f	class:ns3::UniformVariableImpl
UniformVariableImpl	random-variable.cc	/^class UniformVariableImpl : public RandomVariableBase$/;"	c	namespace:ns3	file:
Unit	nstime.h	/^  enum Unit$/;"	g	class:ns3::Time
Unlock	unix-system-mutex.cc	/^SystemMutex::Unlock ()$/;"	f	class:ns3::SystemMutex
Unlock	unix-system-mutex.cc	/^SystemMutexPrivate::Unlock (void) $/;"	f	class:ns3::SystemMutexPrivate
Unref	simple-ref-count.h	/^  inline void Unref (void) const$/;"	f	class:ns3::SimpleRefCount
UnregisterRootNamespaceObject	config.cc	/^ConfigImpl::UnregisterRootNamespaceObject (Ptr<Object> obj)$/;"	f	class:ns3::ConfigImpl
UnregisterRootNamespaceObject	config.cc	/^void UnregisterRootNamespaceObject (Ptr<Object> obj)$/;"	f	namespace:ns3::Config
UnregisterStream	fatal-impl.cc	/^UnregisterStream (std::ostream* stream)$/;"	f	namespace:ns3::FatalImpl
UpdateSortedArray	object.cc	/^Object::UpdateSortedArray (struct Aggregates *aggregates, uint32_t j) const$/;"	f	class:ns3::Object
UserItem	command-line.h	/^  class UserItem : public Item$/;"	c	class:ns3::CommandLine
Validate	random-variable.cc	/^void EmpiricalVariableImpl::Validate ()$/;"	f	class:ns3::EmpiricalVariableImpl
ValueCDF	random-variable.cc	/^  class ValueCDF$/;"	c	class:ns3::EmpiricalVariableImpl	file:
ValueCDF	random-variable.cc	/^EmpiricalVariableImpl::ValueCDF::ValueCDF ()$/;"	f	class:ns3::EmpiricalVariableImpl::ValueCDF
ValueCDF	random-variable.cc	/^EmpiricalVariableImpl::ValueCDF::ValueCDF (const ValueCDF& c)$/;"	f	class:ns3::EmpiricalVariableImpl::ValueCDF
ValueCDF	random-variable.cc	/^EmpiricalVariableImpl::ValueCDF::ValueCDF (double v, double c)$/;"	f	class:ns3::EmpiricalVariableImpl::ValueCDF
ValueSet	enum.h	/^  typedef std::list<std::pair<int,std::string> > ValueSet;$/;"	t	class:ns3::EnumChecker
Vector	global-value.h	/^  typedef std::vector<GlobalValue *> Vector;$/;"	t	class:ns3::GlobalValue
Vector	vector.h	/^typedef Vector3D Vector;$/;"	t	namespace:ns3
Vector2D	vector.cc	/^Vector2D::Vector2D ()$/;"	f	class:ns3::Vector2D
Vector2D	vector.cc	/^Vector2D::Vector2D (double _x, double _y)$/;"	f	class:ns3::Vector2D
Vector2D	vector.h	/^class Vector2D$/;"	c	namespace:ns3
Vector3D	vector.cc	/^Vector3D::Vector3D ()$/;"	f	class:ns3::Vector3D
Vector3D	vector.cc	/^Vector3D::Vector3D (double _x, double _y, double _z)$/;"	f	class:ns3::Vector3D
Vector3D	vector.h	/^class Vector3D$/;"	c	namespace:ns3
VectorChecker	vector.h	/^typedef Vector3DChecker VectorChecker;$/;"	t	namespace:ns3
VectorValue	vector.h	/^typedef Vector3DValue VectorValue;$/;"	t	namespace:ns3
WALL_CLOCK_CLOCK_SYNCHRONIZER_H	wall-clock-synchronizer.h	20;"	d
WATCHDOG_H	watchdog.h	21;"	d
Wait	unix-system-condition.cc	/^SystemCondition::Wait (void) $/;"	f	class:ns3::SystemCondition
Wait	unix-system-condition.cc	/^SystemConditionPrivate::Wait (void)$/;"	f	class:ns3::SystemConditionPrivate
WallClockSynchronizer	wall-clock-synchronizer.cc	/^WallClockSynchronizer::WallClockSynchronizer ()$/;"	f	class:ns3::WallClockSynchronizer
WallClockSynchronizer	wall-clock-synchronizer.h	/^class WallClockSynchronizer : public Synchronizer$/;"	c	namespace:ns3
Watchdog	watchdog.cc	/^Watchdog::Watchdog ()$/;"	f	class:ns3::Watchdog
Watchdog	watchdog.h	/^class Watchdog $/;"	c	namespace:ns3
WeibullVariable	random-variable.cc	/^WeibullVariable::WeibullVariable ()$/;"	f	class:ns3::WeibullVariable
WeibullVariable	random-variable.cc	/^WeibullVariable::WeibullVariable (double m)$/;"	f	class:ns3::WeibullVariable
WeibullVariable	random-variable.cc	/^WeibullVariable::WeibullVariable (double m, double s)$/;"	f	class:ns3::WeibullVariable
WeibullVariable	random-variable.cc	/^WeibullVariable::WeibullVariable (double m, double s, double b)$/;"	f	class:ns3::WeibullVariable
WeibullVariable	random-variable.h	/^class WeibullVariable : public RandomVariable$/;"	c	namespace:ns3
WeibullVariableImpl	random-variable.cc	/^WeibullVariableImpl::WeibullVariableImpl () : m_mean (1.0),$/;"	f	class:ns3::WeibullVariableImpl
WeibullVariableImpl	random-variable.cc	/^WeibullVariableImpl::WeibullVariableImpl (const WeibullVariableImpl& c)$/;"	f	class:ns3::WeibullVariableImpl
WeibullVariableImpl	random-variable.cc	/^WeibullVariableImpl::WeibullVariableImpl (double m)$/;"	f	class:ns3::WeibullVariableImpl
WeibullVariableImpl	random-variable.cc	/^WeibullVariableImpl::WeibullVariableImpl (double m, double s)$/;"	f	class:ns3::WeibullVariableImpl
WeibullVariableImpl	random-variable.cc	/^WeibullVariableImpl::WeibullVariableImpl (double m, double s, double b)$/;"	f	class:ns3::WeibullVariableImpl
WeibullVariableImpl	random-variable.cc	/^class WeibullVariableImpl : public RandomVariableBase$/;"	c	namespace:ns3	file:
ZetaVariable	random-variable.cc	/^ZetaVariable::ZetaVariable ()$/;"	f	class:ns3::ZetaVariable
ZetaVariable	random-variable.cc	/^ZetaVariable::ZetaVariable (double alpha)$/;"	f	class:ns3::ZetaVariable
ZetaVariable	random-variable.h	/^class ZetaVariable : public RandomVariable$/;"	c	namespace:ns3
ZetaVariableImpl	random-variable.cc	/^ZetaVariableImpl::ZetaVariableImpl ()$/;"	f	class:ns3::ZetaVariableImpl
ZetaVariableImpl	random-variable.cc	/^ZetaVariableImpl::ZetaVariableImpl (double alpha)$/;"	f	class:ns3::ZetaVariableImpl
ZetaVariableImpl	random-variable.cc	/^class ZetaVariableImpl : public RandomVariableBase$/;"	c	namespace:ns3	file:
ZipfVariable	random-variable.cc	/^ZipfVariable::ZipfVariable ()$/;"	f	class:ns3::ZipfVariable
ZipfVariable	random-variable.cc	/^ZipfVariable::ZipfVariable (long n, double alpha)$/;"	f	class:ns3::ZipfVariable
ZipfVariable	random-variable.h	/^class ZipfVariable : public RandomVariable$/;"	c	namespace:ns3
ZipfVariableImpl	random-variable.cc	/^ZipfVariableImpl::ZipfVariableImpl ()$/;"	f	class:ns3::ZipfVariableImpl
ZipfVariableImpl	random-variable.cc	/^ZipfVariableImpl::ZipfVariableImpl (long n, double alpha)$/;"	f	class:ns3::ZipfVariableImpl
ZipfVariableImpl	random-variable.cc	/^class ZipfVariableImpl : public RandomVariableBase$/;"	c	namespace:ns3	file:
_cairo_int128_add	cairo-wideint-private.h	240;"	d
_cairo_int128_add	cairo-wideint-private.h	282;"	d
_cairo_int128_divrem	cairo-wideint.c	/^_cairo_int128_divrem (cairo_int128_t num, cairo_int128_t den)$/;"	f
_cairo_int128_eq	cairo-wideint-private.h	248;"	d
_cairo_int128_eq	cairo-wideint-private.h	287;"	d
_cairo_int128_ge	cairo-wideint-private.h	328;"	d
_cairo_int128_gt	cairo-wideint-private.h	329;"	d
_cairo_int128_le	cairo-wideint-private.h	326;"	d
_cairo_int128_lsl	cairo-wideint-private.h	244;"	d
_cairo_int128_lsl	cairo-wideint-private.h	288;"	d
_cairo_int128_lt	cairo-wideint-private.h	286;"	d
_cairo_int128_lt	cairo-wideint.c	/^_cairo_int128_lt (cairo_int128_t a, cairo_int128_t b)$/;"	f
_cairo_int128_mul	cairo-wideint-private.h	242;"	d
_cairo_int128_mul	cairo-wideint-private.h	284;"	d
_cairo_int128_ne	cairo-wideint-private.h	327;"	d
_cairo_int128_negate	cairo-wideint-private.h	249;"	d
_cairo_int128_negate	cairo-wideint-private.h	291;"	d
_cairo_int128_negate	cairo-wideint.c	/^_cairo_int128_negate (cairo_int128_t a)$/;"	f
_cairo_int128_negative	cairo-wideint-private.h	250;"	d
_cairo_int128_negative	cairo-wideint-private.h	292;"	d
_cairo_int128_not	cairo-wideint-private.h	251;"	d
_cairo_int128_not	cairo-wideint-private.h	293;"	d
_cairo_int128_not	cairo-wideint.c	/^_cairo_int128_not (cairo_int128_t a)$/;"	f
_cairo_int128_rsa	cairo-wideint-private.h	246;"	d
_cairo_int128_rsa	cairo-wideint-private.h	290;"	d
_cairo_int128_rsl	cairo-wideint-private.h	245;"	d
_cairo_int128_rsl	cairo-wideint-private.h	289;"	d
_cairo_int128_sub	cairo-wideint-private.h	241;"	d
_cairo_int128_sub	cairo-wideint-private.h	283;"	d
_cairo_int128_to_int32	cairo-wideint-private.h	239;"	d
_cairo_int128_to_int32	cairo-wideint-private.h	281;"	d
_cairo_int128_to_int64	cairo-wideint-private.h	238;"	d
_cairo_int128_to_int64	cairo-wideint-private.h	280;"	d
_cairo_int128_to_uint128	cairo-wideint-private.h	234;"	d
_cairo_int128_to_uint128	cairo-wideint-private.h	276;"	d
_cairo_int32_to_int128	cairo-wideint-private.h	278;"	d
_cairo_int32_to_int128	cairo-wideint.c	/^_cairo_int32_to_int128 (int32_t i)$/;"	f
_cairo_int32_to_int64	cairo-wideint-private.h	153;"	d
_cairo_int32_to_int64	cairo-wideint.c	/^_cairo_int32_to_int64 (int32_t i)$/;"	f
_cairo_int32x32_64_mul	cairo-wideint-private.h	158;"	d
_cairo_int32x32_64_mul	cairo-wideint.c	/^_cairo_int32x32_64_mul (int32_t a, int32_t b)$/;"	f
_cairo_int64_add	cairo-wideint-private.h	117;"	d
_cairo_int64_add	cairo-wideint-private.h	155;"	d
_cairo_int64_divrem	cairo-wideint.c	/^_cairo_int64_divrem (cairo_int64_t num, cairo_int64_t den)$/;"	f
_cairo_int64_eq	cairo-wideint-private.h	122;"	d
_cairo_int64_eq	cairo-wideint-private.h	160;"	d
_cairo_int64_ge	cairo-wideint-private.h	180;"	d
_cairo_int64_gt	cairo-wideint-private.h	181;"	d
_cairo_int64_le	cairo-wideint-private.h	178;"	d
_cairo_int64_lsl	cairo-wideint-private.h	123;"	d
_cairo_int64_lsl	cairo-wideint-private.h	161;"	d
_cairo_int64_lt	cairo-wideint-private.h	159;"	d
_cairo_int64_lt	cairo-wideint.c	/^_cairo_int64_lt (cairo_int64_t a, cairo_int64_t b)$/;"	f
_cairo_int64_mul	cairo-wideint-private.h	119;"	d
_cairo_int64_mul	cairo-wideint-private.h	157;"	d
_cairo_int64_ne	cairo-wideint-private.h	179;"	d
_cairo_int64_negate	cairo-wideint-private.h	126;"	d
_cairo_int64_negate	cairo-wideint-private.h	164;"	d
_cairo_int64_negative	cairo-wideint-private.h	127;"	d
_cairo_int64_negative	cairo-wideint-private.h	165;"	d
_cairo_int64_not	cairo-wideint-private.h	128;"	d
_cairo_int64_not	cairo-wideint-private.h	166;"	d
_cairo_int64_rsa	cairo-wideint-private.h	125;"	d
_cairo_int64_rsa	cairo-wideint-private.h	163;"	d
_cairo_int64_rsl	cairo-wideint-private.h	124;"	d
_cairo_int64_rsl	cairo-wideint-private.h	162;"	d
_cairo_int64_sub	cairo-wideint-private.h	118;"	d
_cairo_int64_sub	cairo-wideint-private.h	156;"	d
_cairo_int64_to_int128	cairo-wideint-private.h	279;"	d
_cairo_int64_to_int128	cairo-wideint.c	/^_cairo_int64_to_int128 (cairo_int64_t i)$/;"	f
_cairo_int64_to_int32	cairo-wideint-private.h	116;"	d
_cairo_int64_to_int32	cairo-wideint-private.h	154;"	d
_cairo_int64_to_uint64	cairo-wideint-private.h	113;"	d
_cairo_int64_to_uint64	cairo-wideint-private.h	151;"	d
_cairo_int64x64_128_mul	cairo-wideint-private.h	285;"	d
_cairo_int64x64_128_mul	cairo-wideint.c	/^_cairo_int64x64_128_mul (cairo_int64_t a, cairo_int64_t b)$/;"	f
_cairo_int_96by64_32x64_divrem	cairo-wideint.c	/^_cairo_int_96by64_32x64_divrem (cairo_int128_t num, cairo_int64_t den)$/;"	f
_cairo_msbset64	cairo-wideint.c	575;"	d	file:
_cairo_msbset64	cairo-wideint.c	577;"	d	file:
_cairo_quorem128	cairo-wideint-private.h	/^typedef struct _cairo_quorem128 {$/;"	s
_cairo_quorem64	cairo-wideint-private.h	/^typedef struct _cairo_quorem64 {$/;"	s
_cairo_uint128_add	cairo-wideint-private.h	262;"	d
_cairo_uint128_add	cairo-wideint.c	/^_cairo_uint128_add (cairo_uint128_t a, cairo_uint128_t b)$/;"	f
_cairo_uint128_divrem	cairo-wideint.c	/^_cairo_uint128_divrem (cairo_uint128_t num, cairo_uint128_t den)$/;"	f
_cairo_uint128_eq	cairo-wideint-private.h	270;"	d
_cairo_uint128_eq	cairo-wideint.c	/^_cairo_uint128_eq (cairo_uint128_t a, cairo_uint128_t b)$/;"	f
_cairo_uint128_ge	cairo-wideint-private.h	323;"	d
_cairo_uint128_gt	cairo-wideint-private.h	324;"	d
_cairo_uint128_le	cairo-wideint-private.h	321;"	d
_cairo_uint128_lsl	cairo-wideint-private.h	266;"	d
_cairo_uint128_lsl	cairo-wideint.c	/^_cairo_uint128_lsl (cairo_uint128_t a, int shift)$/;"	f
_cairo_uint128_lt	cairo-wideint-private.h	269;"	d
_cairo_uint128_lt	cairo-wideint.c	/^_cairo_uint128_lt (cairo_uint128_t a, cairo_uint128_t b)$/;"	f
_cairo_uint128_mul	cairo-wideint-private.h	264;"	d
_cairo_uint128_mul	cairo-wideint.c	/^_cairo_uint128_mul (cairo_uint128_t a, cairo_uint128_t b)$/;"	f
_cairo_uint128_ne	cairo-wideint-private.h	322;"	d
_cairo_uint128_negate	cairo-wideint-private.h	271;"	d
_cairo_uint128_negative	cairo-wideint-private.h	230;"	d
_cairo_uint128_negative	cairo-wideint-private.h	272;"	d
_cairo_uint128_not	cairo-wideint-private.h	273;"	d
_cairo_uint128_rsa	cairo-wideint-private.h	268;"	d
_cairo_uint128_rsa	cairo-wideint.c	/^_cairo_uint128_rsa (cairo_int128_t a, int shift)$/;"	f
_cairo_uint128_rsl	cairo-wideint-private.h	267;"	d
_cairo_uint128_rsl	cairo-wideint.c	/^_cairo_uint128_rsl (cairo_uint128_t a, int shift)$/;"	f
_cairo_uint128_sub	cairo-wideint-private.h	263;"	d
_cairo_uint128_sub	cairo-wideint.c	/^_cairo_uint128_sub (cairo_uint128_t a, cairo_uint128_t b)$/;"	f
_cairo_uint128_to_int128	cairo-wideint-private.h	233;"	d
_cairo_uint128_to_int128	cairo-wideint-private.h	275;"	d
_cairo_uint128_to_uint32	cairo-wideint-private.h	219;"	d
_cairo_uint128_to_uint32	cairo-wideint-private.h	261;"	d
_cairo_uint128_to_uint64	cairo-wideint-private.h	218;"	d
_cairo_uint128_to_uint64	cairo-wideint-private.h	260;"	d
_cairo_uint32_rsa	cairo-wideint.c	191;"	d	file:
_cairo_uint32_to_uint128	cairo-wideint-private.h	258;"	d
_cairo_uint32_to_uint128	cairo-wideint.c	/^_cairo_uint32_to_uint128 (uint32_t i)$/;"	f
_cairo_uint32_to_uint64	cairo-wideint-private.h	135;"	d
_cairo_uint32_to_uint64	cairo-wideint.c	/^_cairo_uint32_to_uint64 (uint32_t i)$/;"	f
_cairo_uint32s_to_uint64	cairo-wideint.c	/^_cairo_uint32s_to_uint64 (uint32_t h, uint32_t l)$/;"	f	file:
_cairo_uint32s_to_uint64	cairo-wideint.c	35;"	d	file:
_cairo_uint32x32_64_mul	cairo-wideint-private.h	140;"	d
_cairo_uint32x32_64_mul	cairo-wideint.c	/^_cairo_uint32x32_64_mul (uint32_t a, uint32_t b)$/;"	f
_cairo_uint64	cairo-wideint-private.h	/^typedef struct _cairo_uint64 {$/;"	s
_cairo_uint64_add	cairo-wideint-private.h	137;"	d
_cairo_uint64_add	cairo-wideint.c	/^_cairo_uint64_add (cairo_uint64_t a, cairo_uint64_t b)$/;"	f
_cairo_uint64_divrem	cairo-wideint.c	/^_cairo_uint64_divrem (cairo_uint64_t num, cairo_uint64_t den)$/;"	f
_cairo_uint64_eq	cairo-wideint-private.h	145;"	d
_cairo_uint64_eq	cairo-wideint.c	/^_cairo_uint64_eq (cairo_uint64_t a, cairo_uint64_t b)$/;"	f
_cairo_uint64_ge	cairo-wideint-private.h	175;"	d
_cairo_uint64_gt	cairo-wideint-private.h	176;"	d
_cairo_uint64_le	cairo-wideint-private.h	173;"	d
_cairo_uint64_lsl	cairo-wideint-private.h	141;"	d
_cairo_uint64_lsl	cairo-wideint.c	/^_cairo_uint64_lsl (cairo_uint64_t a, int shift)$/;"	f
_cairo_uint64_lt	cairo-wideint-private.h	144;"	d
_cairo_uint64_lt	cairo-wideint.c	/^_cairo_uint64_lt (cairo_uint64_t a, cairo_uint64_t b)$/;"	f
_cairo_uint64_mul	cairo-wideint-private.h	139;"	d
_cairo_uint64_mul	cairo-wideint.c	/^_cairo_uint64_mul (cairo_uint64_t a, cairo_uint64_t b)$/;"	f
_cairo_uint64_ne	cairo-wideint-private.h	174;"	d
_cairo_uint64_negate	cairo-wideint-private.h	146;"	d
_cairo_uint64_negate	cairo-wideint.c	/^_cairo_uint64_negate (cairo_uint64_t a)$/;"	f
_cairo_uint64_negative	cairo-wideint-private.h	109;"	d
_cairo_uint64_negative	cairo-wideint-private.h	147;"	d
_cairo_uint64_not	cairo-wideint-private.h	148;"	d
_cairo_uint64_not	cairo-wideint.c	/^_cairo_uint64_not (cairo_uint64_t a)$/;"	f
_cairo_uint64_rsa	cairo-wideint-private.h	143;"	d
_cairo_uint64_rsa	cairo-wideint.c	/^_cairo_uint64_rsa (cairo_int64_t a, int shift)$/;"	f
_cairo_uint64_rsl	cairo-wideint-private.h	142;"	d
_cairo_uint64_rsl	cairo-wideint.c	/^_cairo_uint64_rsl (cairo_uint64_t a, int shift)$/;"	f
_cairo_uint64_sub	cairo-wideint-private.h	138;"	d
_cairo_uint64_sub	cairo-wideint.c	/^_cairo_uint64_sub (cairo_uint64_t a, cairo_uint64_t b)$/;"	f
_cairo_uint64_to_int64	cairo-wideint-private.h	112;"	d
_cairo_uint64_to_int64	cairo-wideint-private.h	150;"	d
_cairo_uint64_to_uint128	cairo-wideint-private.h	259;"	d
_cairo_uint64_to_uint128	cairo-wideint.c	/^_cairo_uint64_to_uint128 (cairo_uint64_t i)$/;"	f
_cairo_uint64_to_uint32	cairo-wideint-private.h	136;"	d
_cairo_uint64_to_uint32	cairo-wideint-private.h	98;"	d
_cairo_uint64x64_128_mul	cairo-wideint-private.h	265;"	d
_cairo_uint64x64_128_mul	cairo-wideint.c	/^_cairo_uint64x64_128_mul (cairo_uint64_t a, cairo_uint64_t b)$/;"	f
_cairo_uint_96by64_32x64_divrem	cairo-wideint.c	/^_cairo_uint_96by64_32x64_divrem (cairo_uint128_t num,$/;"	f
_cairo_uquorem128	cairo-wideint-private.h	/^typedef struct _cairo_uquorem128 {$/;"	s
_cairo_uquorem64	cairo-wideint-private.h	/^typedef struct _cairo_uquorem64 {$/;"	s
_v	int64x64-128.h	/^  int128_t _v;$/;"	m	class:ns3::int64x64_t
_v	int64x64-cairo.h	/^  cairo_int128_t _v;$/;"	m	class:ns3::int64x64_t
_v	int64x64-double.h	/^  double _v;$/;"	m	class:ns3::int64x64_t
a12	rng-stream.cc	/^const double a12  =       1403580.0;$/;"	m	namespace:__anon3	file:
a13n	rng-stream.cc	/^const double a13n =       810728.0;$/;"	m	namespace:__anon3	file:
a21	rng-stream.cc	/^const double a21  =       527612.0;$/;"	m	namespace:__anon3	file:
a23n	rng-stream.cc	/^const double a23n =       1370589.0;$/;"	m	namespace:__anon3	file:
accessor	type-id.h	/^    ns3::Ptr<const ns3::AttributeAccessor> accessor;$/;"	m	struct:ns3::TypeId::AttributeInformation
accessor	type-id.h	/^    ns3::Ptr<const ns3::TraceSourceAccessor> accessor;$/;"	m	struct:ns3::TypeId::TraceSourceInformation
actual	test.cc	/^  std::string actual;$/;"	m	struct:ns3::TestCaseFailure	file:
anti	rng-stream.h	/^  bool anti, incPrec;$/;"	m	class:ns3::RngStream
attributes	type-id.cc	/^    std::vector<struct ns3::TypeId::AttributeInformation> attributes;$/;"	m	struct:__anon4::IidManager::IidInformation	file:
buffer	object.h	/^    Object *buffer[1];$/;"	m	struct:ns3::Object::Aggregates
cairo_int128_t	cairo-wideint-private.h	/^typedef int128_t        cairo_int128_t;$/;"	t
cairo_int128_t	cairo-wideint-private.h	/^} cairo_uint128_t, cairo_int128_t;$/;"	t	typeref:struct:cairo_uint128
cairo_int64_t	cairo-wideint-private.h	/^typedef int64_t     cairo_int64_t;$/;"	t
cairo_int64_t	cairo-wideint-private.h	/^} cairo_uint64_t, cairo_int64_t;$/;"	t	typeref:struct:_cairo_uint64
cairo_private	cairo-wideint-private.h	36;"	d
cairo_quorem128_t	cairo-wideint-private.h	/^} cairo_quorem128_t;$/;"	t	typeref:struct:_cairo_quorem128
cairo_quorem64_t	cairo-wideint-private.h	/^} cairo_quorem64_t;$/;"	t	typeref:struct:_cairo_quorem64
cairo_uint128	cairo-wideint-private.h	/^typedef struct cairo_uint128 {$/;"	s
cairo_uint128_t	cairo-wideint-private.h	/^typedef uint128_t       cairo_uint128_t;$/;"	t
cairo_uint128_t	cairo-wideint-private.h	/^} cairo_uint128_t, cairo_int128_t;$/;"	t	typeref:struct:cairo_uint128
cairo_uint64_t	cairo-wideint-private.h	/^typedef uint64_t    cairo_uint64_t;$/;"	t
cairo_uint64_t	cairo-wideint-private.h	/^} cairo_uint64_t, cairo_int64_t;$/;"	t	typeref:struct:_cairo_uint64
cairo_uquorem128_t	cairo-wideint-private.h	/^} cairo_uquorem128_t;$/;"	t	typeref:struct:_cairo_uquorem128
cairo_uquorem64_t	cairo-wideint-private.h	/^} cairo_uquorem64_t;$/;"	t	typeref:struct:_cairo_uquorem64
cdf	random-variable.cc	/^    double    cdf;$/;"	m	class:ns3::EmpiricalVariableImpl::ValueCDF	file:
checker	attribute-construction-list.h	/^    Ptr<const AttributeChecker> checker;$/;"	m	struct:ns3::AttributeConstructionList::Item
checker	type-id.h	/^    ns3::Ptr<const ns3::AttributeChecker> checker;$/;"	m	struct:ns3::TypeId::AttributeInformation
childrenFailed	test.cc	/^  bool childrenFailed;$/;"	m	struct:ns3::TestCase::Result	file:
clock	test.cc	/^  SystemWallClockMs clock;$/;"	m	struct:ns3::TestCase::Result	file:
cond	test.cc	/^  std::string cond;$/;"	m	struct:ns3::TestCaseFailure	file:
constructor	type-id.cc	/^    ns3::Callback<ns3::ObjectBase *> constructor;$/;"	m	struct:__anon4::IidManager::IidInformation	file:
context	default-simulator-impl.h	/^    uint32_t context;$/;"	m	struct:ns3::DefaultSimulatorImpl::EventWithContext
count	random-variable.cc	/^  uint32_t   count;$/;"	m	class:ns3::DeterministicVariableImpl	file:
data	random-variable.cc	/^  double* data;$/;"	m	class:ns3::DeterministicVariableImpl	file:
destructor	fatal-impl.cc	/^struct destructor$/;"	s	namespace:ns3::FatalImpl::__anon1	file:
emp	random-variable.cc	/^  std::vector<ValueCDF> emp;       \/\/ Empicical CDF$/;"	m	class:ns3::EmpiricalVariableImpl	file:
empty	empty.h	/^class empty {};$/;"	c	namespace:ns3
event	default-simulator-impl.h	/^    EventImpl *event;$/;"	m	struct:ns3::DefaultSimulatorImpl::EventWithContext
fact	rng-stream.cc	/^const double fact =       5.9604644775390625e-8;     \/* 1 \/ 2^24  *\/$/;"	m	namespace:__anon3	file:
factor	nstime.h	/^    uint64_t factor;$/;"	m	struct:ns3::Time::Information
failure	test.cc	/^  std::vector<TestCaseFailure> failure;$/;"	m	struct:ns3::TestCase::Result	file:
file	test.cc	/^  std::string file;$/;"	m	struct:ns3::TestCaseFailure	file:
flags	type-id.h	/^    uint32_t flags;$/;"	m	struct:ns3::TypeId::AttributeInformation
fromMul	nstime.h	/^    bool fromMul;$/;"	m	struct:ns3::Time::Information
g_logNodePrinter	log.cc	/^LogNodePrinter g_logNodePrinter = 0;$/;"	m	namespace:ns3	file:
g_logTimePrinter	log.cc	/^LogTimePrinter g_logTimePrinter = 0;$/;"	m	namespace:ns3	file:
g_printList	log.cc	/^} g_printList;$/;"	m	namespace:ns3	typeref:class:ns3::PrintList	file:
g_schedTypeImpl	simulator.cc	/^GlobalValue g_schedTypeImpl = GlobalValue ("SchedulerType", $/;"	m	namespace:ns3	file:
g_simTypeImpl	simulator.cc	/^GlobalValue g_simTypeImpl = GlobalValue ("SimulatorImplementationType", $/;"	m	namespace:ns3	file:
get	object-map.h	/^		       Ptr<U> (T::*get)(INDEX) const)$/;"	f	namespace:ns3
get	object-map.h	/^                       Ptr<U> (T::*get)(INDEX) const);$/;"	m	namespace:ns3
get	object-ptr-container.h	/^				Ptr<U> (T::*get)(INDEX) const)$/;"	f	namespace:ns3
get	object-ptr-container.h	/^				Ptr<U> (T::*get)(INDEX) const);$/;"	m	namespace:ns3
get	object-vector.h	/^			  Ptr<U> (T::*get)(INDEX) const)$/;"	f	namespace:ns3
get	object-vector.h	/^                          Ptr<U> (T::*get)(INDEX) const);$/;"	m	namespace:ns3
getN	object-map.h	/^		       INDEX (T::*getN)(void) const)$/;"	f	namespace:ns3
getN	object-map.h	/^                          INDEX (T::*getN)(void) const);$/;"	m	namespace:ns3
getN	object-ptr-container.h	/^				INDEX (T::*getN)(void) const)$/;"	f	namespace:ns3
getN	object-ptr-container.h	/^				INDEX (T::*getN)(void) const);$/;"	m	namespace:ns3
getN	object-vector.h	/^			  INDEX (T::*getN)(void) const)$/;"	f	namespace:ns3
getN	object-vector.h	/^                          INDEX (T::*getN)(void) const);$/;"	m	namespace:ns3
getter	attribute-accessor-helper.h	/^                         V (T::*getter)(void) const)$/;"	f	namespace:ns3
groupName	type-id.cc	/^    std::string groupName;$/;"	m	struct:__anon4::IidManager::IidInformation	file:
hasConstructor	type-id.cc	/^    bool hasConstructor;$/;"	m	struct:__anon4::IidManager::IidInformation	file:
help	type-id.h	/^    std::string help;$/;"	m	struct:ns3::TypeId::AttributeInformation
help	type-id.h	/^    std::string help;$/;"	m	struct:ns3::TypeId::TraceSourceInformation
hi	cairo-wideint-private.h	/^  cairo_uint64_t      lo, hi;$/;"	m	struct:cairo_uint128
hi	cairo-wideint-private.h	/^  uint32_t    lo, hi;$/;"	m	struct:_cairo_uint64
impl	scheduler.h	/^    EventImpl *impl;$/;"	m	struct:ns3::Scheduler::Event
incPrec	rng-stream.h	/^  bool anti, incPrec;$/;"	m	class:ns3::RngStream
info	nstime.h	/^    struct Information info[LAST];$/;"	m	struct:ns3::Time::Resolution	typeref:struct:ns3::Time::Resolution::Information
initialValue	type-id.h	/^    ns3::Ptr<const ns3::AttributeValue> initialValue;$/;"	m	struct:ns3::TypeId::AttributeInformation
int128_t	int64x64-128.h	/^typedef __int128_t int128_t;$/;"	t
int16_t	cairo-wideint-private.h	/^typedef __int16 int16_t;$/;"	t
int32_t	cairo-wideint-private.h	/^typedef __int32 int32_t;$/;"	t
int64_t	cairo-wideint-private.h	/^typedef __int64 int64_t;$/;"	t
int64x64_t	int64x64-128.h	/^  explicit inline int64x64_t (int64_t hi, uint64_t lo)$/;"	f	class:ns3::int64x64_t
int64x64_t	int64x64-128.h	/^  inline int64x64_t ()$/;"	f	class:ns3::int64x64_t
int64x64_t	int64x64-128.h	/^  inline int64x64_t (const int64x64_t &o)$/;"	f	class:ns3::int64x64_t
int64x64_t	int64x64-128.h	/^  inline int64x64_t (double value)$/;"	f	class:ns3::int64x64_t
int64x64_t	int64x64-128.h	/^  inline int64x64_t (int v)$/;"	f	class:ns3::int64x64_t
int64x64_t	int64x64-128.h	/^  inline int64x64_t (int128_t v)$/;"	f	class:ns3::int64x64_t
int64x64_t	int64x64-128.h	/^  inline int64x64_t (long int v)$/;"	f	class:ns3::int64x64_t
int64x64_t	int64x64-128.h	/^  inline int64x64_t (long long int v)$/;"	f	class:ns3::int64x64_t
int64x64_t	int64x64-128.h	/^  inline int64x64_t (unsigned int v)$/;"	f	class:ns3::int64x64_t
int64x64_t	int64x64-128.h	/^  inline int64x64_t (unsigned long int v)$/;"	f	class:ns3::int64x64_t
int64x64_t	int64x64-128.h	/^  inline int64x64_t (unsigned long long int v)$/;"	f	class:ns3::int64x64_t
int64x64_t	int64x64-128.h	/^class int64x64_t$/;"	c	namespace:ns3
int64x64_t	int64x64-cairo.h	/^  inline int64x64_t ()$/;"	f	class:ns3::int64x64_t
int64x64_t	int64x64-cairo.h	/^  inline int64x64_t (const int64x64_t &o)$/;"	f	class:ns3::int64x64_t
int64x64_t	int64x64-cairo.h	/^  inline int64x64_t (double value)$/;"	f	class:ns3::int64x64_t
int64x64_t	int64x64-cairo.h	/^  inline int64x64_t (int v)$/;"	f	class:ns3::int64x64_t
int64x64_t	int64x64-cairo.h	/^  inline int64x64_t (int64_t hi, uint64_t lo)$/;"	f	class:ns3::int64x64_t
int64x64_t	int64x64-cairo.h	/^  inline int64x64_t (long int v)$/;"	f	class:ns3::int64x64_t
int64x64_t	int64x64-cairo.h	/^  inline int64x64_t (long long int v)$/;"	f	class:ns3::int64x64_t
int64x64_t	int64x64-cairo.h	/^  inline int64x64_t (unsigned int v)$/;"	f	class:ns3::int64x64_t
int64x64_t	int64x64-cairo.h	/^  inline int64x64_t (unsigned long int v)$/;"	f	class:ns3::int64x64_t
int64x64_t	int64x64-cairo.h	/^  inline int64x64_t (unsigned long long int v)$/;"	f	class:ns3::int64x64_t
int64x64_t	int64x64-cairo.h	/^class int64x64_t$/;"	c	namespace:ns3
int64x64_t	int64x64-double.h	/^  inline int64x64_t ()$/;"	f	class:ns3::int64x64_t
int64x64_t	int64x64-double.h	/^  inline int64x64_t (const int64x64_t &o)$/;"	f	class:ns3::int64x64_t
int64x64_t	int64x64-double.h	/^  inline int64x64_t (double v)$/;"	f	class:ns3::int64x64_t
int64x64_t	int64x64-double.h	/^  inline int64x64_t (int v)$/;"	f	class:ns3::int64x64_t
int64x64_t	int64x64-double.h	/^  inline int64x64_t (int64_t hi, uint64_t lo)$/;"	f	class:ns3::int64x64_t
int64x64_t	int64x64-double.h	/^  inline int64x64_t (long int v)$/;"	f	class:ns3::int64x64_t
int64x64_t	int64x64-double.h	/^  inline int64x64_t (long long int v)$/;"	f	class:ns3::int64x64_t
int64x64_t	int64x64-double.h	/^  inline int64x64_t (unsigned int v)$/;"	f	class:ns3::int64x64_t
int64x64_t	int64x64-double.h	/^  inline int64x64_t (unsigned long int v)$/;"	f	class:ns3::int64x64_t
int64x64_t	int64x64-double.h	/^  inline int64x64_t (unsigned long long int v)$/;"	f	class:ns3::int64x64_t
int64x64_t	int64x64-double.h	/^class int64x64_t$/;"	c	namespace:ns3
int8_t	cairo-wideint-private.h	/^typedef __int8 int8_t;$/;"	t
internal	double.cc	/^namespace internal {$/;"	n	namespace:ns3	file:
internal	double.h	/^namespace internal {$/;"	n	namespace:ns3
internal	integer.cc	/^namespace internal {$/;"	n	namespace:ns3	file:
internal	integer.h	/^namespace internal {$/;"	n	namespace:ns3
internal	object-ptr-container.h	/^namespace internal {$/;"	n	namespace:ns3
internal	pointer.h	/^namespace internal {$/;"	n	namespace:ns3
internal	uinteger.cc	/^namespace internal {$/;"	n	namespace:ns3	file:
internal	uinteger.h	/^namespace internal {$/;"	n	namespace:ns3
key	scheduler.h	/^    EventKey key;$/;"	m	struct:ns3::Scheduler::Event
level	test.cc	/^  int level;$/;"	m	struct:ns3::Indent	file:
limit	test.cc	/^  std::string limit;$/;"	m	struct:ns3::TestCaseFailure	file:
line	test.cc	/^  int32_t line;$/;"	m	struct:ns3::TestCaseFailure	file:
lo	cairo-wideint-private.h	/^  cairo_uint64_t      lo, hi;$/;"	m	struct:cairo_uint128
lo	cairo-wideint-private.h	/^  uint32_t    lo, hi;$/;"	m	struct:_cairo_uint64
m1	rng-stream.cc	/^const double m1   =       4294967087.0;$/;"	m	namespace:__anon3	file:
m2	rng-stream.cc	/^const double m2   =       4294944443.0;$/;"	m	namespace:__anon3	file:
m_a	callback.h	/^  typename TypeTraits<TX>::ReferencedType m_a;$/;"	m	class:ns3::BoundFunctorCallbackImpl
m_aggregates	object.h	/^  struct Aggregates * m_aggregates;$/;"	m	class:ns3::Object	typeref:struct:ns3::Object::Aggregates
m_alpha	random-variable.cc	/^  double m_alpha; \/\/ Shape parameter$/;"	m	class:ns3::WeibullVariableImpl	file:
m_alpha	random-variable.cc	/^  double m_alpha;$/;"	m	class:ns3::GammaVariableImpl	file:
m_alpha	random-variable.cc	/^  double m_alpha;$/;"	m	class:ns3::ZetaVariableImpl	file:
m_alpha	random-variable.cc	/^  double m_alpha;$/;"	m	class:ns3::ZipfVariableImpl	file:
m_assertOnFailure	test.cc	/^  bool m_assertOnFailure;$/;"	m	class:ns3::TestRunnerImpl	file:
m_b	random-variable.cc	/^  double m_b; \/\/ just for calculus simplifications$/;"	m	class:ns3::ZetaVariableImpl	file:
m_beta	random-variable.cc	/^  double m_beta;$/;"	m	class:ns3::GammaVariableImpl	file:
m_bound	random-variable.cc	/^  double m_bound;     \/\/ Bound on value's difference from the mean (absolute value)$/;"	m	class:ns3::NormalVariableImpl	file:
m_bound	random-variable.cc	/^  double m_bound; \/\/ Upper bound on value (if non-zero)$/;"	m	class:ns3::ExponentialVariableImpl	file:
m_bound	random-variable.cc	/^  double m_bound; \/\/ Upper bound on value (if non-zero)$/;"	m	class:ns3::ParetoVariableImpl	file:
m_bound	random-variable.cc	/^  double m_bound; \/\/ Upper bound on value (if non-zero)$/;"	m	class:ns3::WeibullVariableImpl	file:
m_bucketTop	calendar-scheduler.h	/^  uint64_t m_bucketTop;$/;"	m	class:ns3::CalendarScheduler
m_buckets	calendar-scheduler.h	/^  Bucket *m_buckets;$/;"	m	class:ns3::CalendarScheduler
m_buf	unix-fd-reader.h	/^    uint8_t *m_buf;$/;"	m	struct:ns3::FdReader::Data
m_c	random-variable.cc	/^  double m_c; \/\/ the normalization constant$/;"	m	class:ns3::ZipfVariableImpl	file:
m_callback	command-line.h	/^    Callback<bool, std::string> m_callback;$/;"	m	class:ns3::CommandLine::CallbackItem
m_callback	system-thread.h	/^  Callback<void> m_callback;$/;"	m	class:ns3::SystemThread
m_callbackList	traced-callback.h	/^  CallbackList m_callbackList;$/;"	m	class:ns3::TracedCallback
m_cancel	event-impl.h	/^  bool m_cancel;$/;"	m	class:ns3::EventImpl
m_cb	traced-value.h	/^  TracedCallback<T,T> m_cb;$/;"	m	class:ns3::TracedValue
m_checker	global-value.h	/^  Ptr<const AttributeChecker> m_checker;$/;"	m	class:ns3::GlobalValue
m_children	test.h	/^  std::vector<TestCase *> m_children;$/;"	m	class:ns3::TestCase
m_cond	unix-system-condition.cc	/^  pthread_cond_t  m_cond;$/;"	m	class:ns3::SystemConditionPrivate	file:
m_condition	unix-system-condition.cc	/^  bool m_condition;$/;"	m	class:ns3::SystemConditionPrivate	file:
m_condition	wall-clock-synchronizer.h	/^  SystemCondition m_condition;$/;"	m	class:ns3::WallClockSynchronizer
m_consecutive	random-variable.cc	/^  uint32_t  m_consecutive;$/;"	m	class:ns3::SequentialVariableImpl	file:
m_const	random-variable.cc	/^  double m_const;$/;"	m	class:ns3::ConstantVariableImpl	file:
m_context	event-id.h	/^  uint32_t m_context;$/;"	m	class:ns3::EventId
m_context	scheduler.h	/^    uint32_t m_context;$/;"	m	struct:ns3::Scheduler::EventKey
m_contexts	config.h	/^  std::vector<std::string> m_contexts;$/;"	m	class:ns3::Config::MatchContainer
m_continueOnFailure	test.cc	/^  bool m_continueOnFailure;$/;"	m	class:ns3::TestRunnerImpl	file:
m_count	simple-ref-count.h	/^  mutable uint32_t m_count;$/;"	m	class:ns3::SimpleRefCount
m_cpuTick	wall-clock-synchronizer.h	/^  uint64_t m_cpuTick;$/;"	m	class:ns3::WallClockSynchronizer
m_current	object.h	/^    uint32_t m_current;$/;"	m	class:ns3::Object::AggregateIterator
m_current	random-variable.cc	/^  double m_current;$/;"	m	class:ns3::SequentialVariableImpl	file:
m_currentConsecutive	random-variable.cc	/^  uint32_t  m_currentConsecutive;$/;"	m	class:ns3::SequentialVariableImpl	file:
m_currentContext	default-simulator-impl.h	/^  uint32_t m_currentContext;$/;"	m	class:ns3::DefaultSimulatorImpl
m_currentContext	realtime-simulator-impl.h	/^  uint32_t m_currentContext;$/;"	m	class:ns3::RealtimeSimulatorImpl
m_currentTs	default-simulator-impl.h	/^  uint64_t m_currentTs;$/;"	m	class:ns3::DefaultSimulatorImpl
m_currentTs	realtime-simulator-impl.h	/^  uint64_t m_currentTs;$/;"	m	class:ns3::RealtimeSimulatorImpl
m_currentUid	default-simulator-impl.h	/^  uint32_t m_currentUid;$/;"	m	class:ns3::DefaultSimulatorImpl
m_currentUid	realtime-simulator-impl.h	/^  uint32_t m_currentUid;$/;"	m	class:ns3::RealtimeSimulatorImpl
m_currentValue	global-value.h	/^  Ptr<AttributeValue> m_currentValue;$/;"	m	class:ns3::GlobalValue
m_data	nstime.h	/^  int64_t m_data;$/;"	m	class:ns3::Time
m_dataDir	test.h	/^  std::string m_dataDir;$/;"	m	class:ns3::TestCase
m_delay	timer.h	/^  Time m_delay;$/;"	m	class:ns3::Timer
m_delayLeft	timer.h	/^  Time m_delayLeft;$/;"	m	class:ns3::Timer
m_destroyEvent	unix-fd-reader.h	/^  EventId m_destroyEvent;$/;"	m	class:ns3::FdReader
m_destroyEvents	default-simulator-impl.h	/^  DestroyEvents m_destroyEvents;$/;"	m	class:ns3::DefaultSimulatorImpl
m_destroyEvents	realtime-simulator-impl.h	/^  DestroyEvents m_destroyEvents;$/;"	m	class:ns3::RealtimeSimulatorImpl
m_disposed	object.h	/^  bool m_disposed;$/;"	m	class:ns3::Object
m_elapsedReal	unix-system-wall-clock-ms.cc	/^  int64_t m_elapsedReal;$/;"	m	class:ns3::SystemWallClockMsPrivate	file:
m_elapsedReal	win32-system-wall-clock-ms.cc	/^  int64_t m_elapsedReal;$/;"	m	class:ns3::SystemWallClockMsPrivate	file:
m_elapsedSystem	unix-system-wall-clock-ms.cc	/^  int64_t m_elapsedSystem;$/;"	m	class:ns3::SystemWallClockMsPrivate	file:
m_elapsedSystem	win32-system-wall-clock-ms.cc	/^  int64_t m_elapsedSystem;$/;"	m	class:ns3::SystemWallClockMsPrivate	file:
m_elapsedUser	unix-system-wall-clock-ms.cc	/^  int64_t m_elapsedUser;$/;"	m	class:ns3::SystemWallClockMsPrivate	file:
m_elapsedUser	win32-system-wall-clock-ms.cc	/^  int64_t m_elapsedUser;$/;"	m	class:ns3::SystemWallClockMsPrivate	file:
m_element	config.cc	/^  std::string m_element;$/;"	m	class:ns3::ArrayMatcher	file:
m_end	watchdog.h	/^  Time m_end;$/;"	m	class:ns3::Watchdog
m_event	timer.h	/^  EventId m_event;$/;"	m	class:ns3::Timer
m_event	watchdog.h	/^  EventId m_event;$/;"	m	class:ns3::Watchdog
m_eventImpl	event-id.h	/^  Ptr<EventImpl> m_eventImpl;$/;"	m	class:ns3::EventId
m_events	default-simulator-impl.h	/^  Ptr<Scheduler> m_events;$/;"	m	class:ns3::DefaultSimulatorImpl
m_events	list-scheduler.h	/^  Events m_events;$/;"	m	class:ns3::ListScheduler
m_events	realtime-simulator-impl.h	/^  Ptr<Scheduler> m_events;$/;"	m	class:ns3::RealtimeSimulatorImpl
m_eventsWithContext	default-simulator-impl.h	/^  EventsWithContext m_eventsWithContext;$/;"	m	class:ns3::DefaultSimulatorImpl
m_eventsWithContextEmpty	default-simulator-impl.h	/^  bool m_eventsWithContextEmpty;$/;"	m	class:ns3::DefaultSimulatorImpl
m_eventsWithContextMutex	default-simulator-impl.h	/^  SystemMutex m_eventsWithContextMutex;$/;"	m	class:ns3::DefaultSimulatorImpl
m_evpipe	unix-fd-reader.h	/^  int m_evpipe[2];           \/\/ pipe used to signal events between threads$/;"	m	class:ns3::FdReader
m_fd	unix-fd-reader.h	/^  int m_fd;$/;"	m	class:ns3::FdReader
m_flags	timer.h	/^  int m_flags;$/;"	m	class:ns3::Timer
m_functor	callback.h	/^  T m_functor;$/;"	m	class:ns3::BoundFunctorCallbackImpl
m_functor	callback.h	/^  T m_functor;$/;"	m	class:ns3::FunctorCallbackImpl
m_generator	random-variable.cc	/^  RngStream* m_generator;  \/\/ underlying generator being wrapped$/;"	m	class:ns3::RandomVariableBase	file:
m_getObjectCount	object.h	/^  uint32_t m_getObjectCount;$/;"	m	class:ns3::Object
m_hardLimit	realtime-simulator-impl.h	/^  Time m_hardLimit;$/;"	m	class:ns3::RealtimeSimulatorImpl
m_heap	heap-scheduler.h	/^  BinaryHeap m_heap;$/;"	m	class:ns3::HeapScheduler
m_help	command-line.h	/^    std::string m_help;$/;"	m	class:ns3::CommandLine::Item
m_help	global-value.h	/^  std::string m_help;$/;"	m	class:ns3::GlobalValue
m_impl	callback.h	/^  Ptr<CallbackImplBase> m_impl;$/;"	m	class:ns3::CallbackBase
m_impl	timer.h	/^  TimerImpl *m_impl;$/;"	m	class:ns3::Timer
m_impl	watchdog.h	/^  TimerImpl *m_impl;$/;"	m	class:ns3::Watchdog
m_increment	random-variable.cc	/^  RandomVariable  m_increment;$/;"	m	class:ns3::SequentialVariableImpl	file:
m_information	type-id.cc	/^  std::vector<struct IidInformation> m_information;$/;"	m	class:__anon4::IidManager	file:
m_initialValue	global-value.h	/^  Ptr<AttributeValue> m_initialValue;$/;"	m	class:ns3::GlobalValue
m_itemNumber	log.h	/^  int m_itemNumber;$/;"	m	class:ns3::ParameterLogger
m_items	command-line.h	/^  Items m_items;$/;"	m	class:ns3::CommandLine
m_jiffy	wall-clock-synchronizer.h	/^  uint64_t m_jiffy;$/;"	m	class:ns3::WallClockSynchronizer
m_k	random-variable.cc	/^  unsigned int m_k;$/;"	m	class:ns3::ErlangVariableImpl	file:
m_lambda	random-variable.cc	/^  double m_lambda;$/;"	m	class:ns3::ErlangVariableImpl	file:
m_lastBucket	calendar-scheduler.h	/^  uint32_t m_lastBucket;$/;"	m	class:ns3::CalendarScheduler
m_lastPrio	calendar-scheduler.h	/^  uint64_t m_lastPrio;$/;"	m	class:ns3::CalendarScheduler
m_len	unix-fd-reader.h	/^    ssize_t m_len;$/;"	m	struct:ns3::FdReader::Data
m_levels	log.h	/^  int32_t     m_levels;$/;"	m	class:ns3::LogComponent
m_list	attribute-construction-list.h	/^  std::list<struct Item> m_list;$/;"	m	class:ns3::AttributeConstructionList
m_list	map-scheduler.h	/^  EventMap m_list;$/;"	m	class:ns3::MapScheduler
m_main	default-simulator-impl.h	/^  SystemThread::ThreadId m_main;$/;"	m	class:ns3::DefaultSimulatorImpl
m_main	realtime-simulator-impl.h	/^  SystemThread::ThreadId m_main;$/;"	m	class:ns3::RealtimeSimulatorImpl
m_max	random-variable.cc	/^  double m_max;$/;"	m	class:ns3::SequentialVariableImpl	file:
m_max	random-variable.cc	/^  double m_max;$/;"	m	class:ns3::TriangularVariableImpl	file:
m_max	random-variable.cc	/^  double m_max;$/;"	m	class:ns3::UniformVariableImpl	file:
m_mean	random-variable.cc	/^  double m_mean;      \/\/ Mean value of RV$/;"	m	class:ns3::NormalVariableImpl	file:
m_mean	random-variable.cc	/^  double m_mean;  \/\/ Mean value of RV$/;"	m	class:ns3::ExponentialVariableImpl	file:
m_mean	random-variable.cc	/^  double m_mean;  \/\/ Mean value of RV$/;"	m	class:ns3::WeibullVariableImpl	file:
m_memPtr	callback.h	/^  MEM_PTR m_memPtr;$/;"	m	class:ns3::MemPtrCallbackImpl
m_min	random-variable.cc	/^  double m_min;$/;"	m	class:ns3::SequentialVariableImpl	file:
m_min	random-variable.cc	/^  double m_min;$/;"	m	class:ns3::TriangularVariableImpl	file:
m_min	random-variable.cc	/^  double m_min;$/;"	m	class:ns3::UniformVariableImpl	file:
m_mode	random-variable.cc	/^  double m_mode;  \/\/ easier to work with the mode internally instead of the mean$/;"	m	class:ns3::TriangularVariableImpl	file:
m_mu	random-variable.cc	/^  double m_mu;$/;"	m	class:ns3::LogNormalVariableImpl	file:
m_mutex	realtime-simulator-impl.h	/^  mutable SystemMutex m_mutex;$/;"	m	class:ns3::RealtimeSimulatorImpl
m_mutex	system-mutex.h	/^  SystemMutex &m_mutex;$/;"	m	class:ns3::CriticalSection
m_mutex	unix-system-condition.cc	/^  pthread_mutex_t m_mutex;$/;"	m	class:ns3::SystemConditionPrivate	file:
m_mutex	unix-system-mutex.cc	/^  pthread_mutex_t m_mutex;$/;"	m	class:ns3::SystemMutexPrivate	file:
m_n	random-variable.cc	/^  long m_n;$/;"	m	class:ns3::ZipfVariableImpl	file:
m_nBuckets	calendar-scheduler.h	/^  uint32_t m_nBuckets;$/;"	m	class:ns3::CalendarScheduler
m_name	command-line.h	/^    std::string m_name;$/;"	m	class:ns3::CommandLine::Item
m_name	global-value.h	/^  std::string m_name;$/;"	m	class:ns3::GlobalValue
m_name	log.h	/^  char const *m_name;$/;"	m	class:ns3::LogComponent
m_name	names.cc	/^  std::string m_name;$/;"	m	class:ns3::NameNode	file:
m_name	test.h	/^  std::string m_name;$/;"	m	class:ns3::TestCase
m_nameMap	names.cc	/^  std::map<std::string, NameNode *> m_nameMap;$/;"	m	class:ns3::NameNode	file:
m_next	random-variable.cc	/^  double m_next;      \/\/ The algorithm produces two values at a time$/;"	m	class:ns3::NormalVariableImpl	file:
m_nextValid	random-variable.cc	/^  bool   m_nextValid; \/\/ True if next valid$/;"	m	class:ns3::NormalVariableImpl	file:
m_normal	random-variable.cc	/^  NormalVariable m_normal;$/;"	m	class:ns3::GammaVariableImpl	file:
m_nsEventStart	wall-clock-synchronizer.h	/^  uint64_t m_nsEventStart;$/;"	m	class:ns3::WallClockSynchronizer
m_objPtr	callback.h	/^  OBJ_PTR const m_objPtr;$/;"	m	class:ns3::MemPtrCallbackImpl
m_object	names.cc	/^  Ptr<Object> m_object;$/;"	m	class:ns3::NameNode	file:
m_object	object.h	/^    Ptr<const Object> m_object;$/;"	m	class:ns3::Object::AggregateIterator
m_objectMap	names.cc	/^  std::map<Ptr<Object>, NameNode *> m_objectMap;$/;"	m	class:ns3::NamesPriv	file:
m_objects	config.h	/^  std::vector<Ptr<Object> > m_objects;$/;"	m	class:ns3::Config::MatchContainer
m_objects	object-ptr-container.h	/^  std::map<uint32_t, Ptr<Object> > m_objects;$/;"	m	class:ns3::ObjectPtrContainerValue
m_os	log.h	/^  std::ostream &m_os;$/;"	m	class:ns3::ParameterLogger
m_parameters	object-factory.h	/^  AttributeConstructionList m_parameters;$/;"	m	class:ns3::ObjectFactory
m_parent	names.cc	/^  NameNode *m_parent;$/;"	m	class:ns3::NameNode	file:
m_parent	test.h	/^  TestCase *m_parent;$/;"	m	class:ns3::TestCase
m_path	config.cc	/^  std::string m_path;$/;"	m	class:ns3::Resolver	file:
m_path	config.h	/^  std::string m_path;$/;"	m	class:ns3::Config::MatchContainer
m_priv	system-condition.h	/^  SystemConditionPrivate * m_priv;$/;"	m	class:ns3::SystemCondition
m_priv	system-mutex.h	/^  SystemMutexPrivate * m_priv;$/;"	m	class:ns3::SystemMutex
m_priv	system-wall-clock-ms.h	/^  class SystemWallClockMsPrivate *m_priv;$/;"	m	class:ns3::SystemWallClockMs	typeref:class:ns3::SystemWallClockMs::SystemWallClockMsPrivate
m_ptr	ptr.h	/^  T *m_ptr;$/;"	m	class:ns3::Ptr
m_qSize	calendar-scheduler.h	/^  uint32_t m_qSize;$/;"	m	class:ns3::CalendarScheduler
m_readCallback	unix-fd-reader.h	/^  Callback<void, uint8_t *, ssize_t> m_readCallback;$/;"	m	class:ns3::FdReader
m_readThread	unix-fd-reader.h	/^  Ptr<SystemThread> m_readThread;$/;"	m	class:ns3::FdReader
m_realtimeOriginNano	synchronizer.h	/^  uint64_t m_realtimeOriginNano;$/;"	m	class:ns3::Synchronizer
m_realtimeTick	wall-clock-synchronizer.h	/^  uint64_t m_realtimeTick;$/;"	m	class:ns3::WallClockSynchronizer
m_result	test.h	/^  struct Result *m_result;$/;"	m	class:ns3::TestCase	typeref:struct:ns3::TestCase::Result
m_ret	system-thread.h	/^  void *    m_ret;$/;"	m	class:ns3::SystemThread
m_root	names.cc	/^  NameNode m_root;$/;"	m	class:ns3::NamesPriv	file:
m_roots	config.cc	/^  Roots m_roots;$/;"	m	class:ns3::ConfigImpl	file:
m_runner	test.h	/^  TestRunnerImpl *m_runner;$/;"	m	class:ns3::TestCase
m_running	realtime-simulator-impl.h	/^  bool m_running;$/;"	m	class:ns3::RealtimeSimulatorImpl
m_scale	random-variable.cc	/^  double m_scale; \/\/ Scale value of RV$/;"	m	class:ns3::ParetoVariableImpl	file:
m_shape	random-variable.cc	/^  double m_shape; \/\/ Shape parameter$/;"	m	class:ns3::ParetoVariableImpl	file:
m_sigma	random-variable.cc	/^  double m_sigma;$/;"	m	class:ns3::LogNormalVariableImpl	file:
m_simOriginNano	synchronizer.h	/^  uint64_t m_simOriginNano;$/;"	m	class:ns3::Synchronizer
m_startTime	unix-system-wall-clock-ms.cc	/^  clock_t m_startTime;$/;"	m	class:ns3::SystemWallClockMsPrivate	file:
m_startTime	win32-system-wall-clock-ms.cc	/^  clock_t m_startTime;$/;"	m	class:ns3::SystemWallClockMsPrivate	file:
m_startTimes	unix-system-wall-clock-ms.cc	/^  struct tms m_startTimes;$/;"	m	class:ns3::SystemWallClockMsPrivate	typeref:struct:ns3::SystemWallClockMsPrivate::tms	file:
m_started	object.h	/^  bool m_started;$/;"	m	class:ns3::Object
m_stop	default-simulator-impl.h	/^  bool m_stop;$/;"	m	class:ns3::DefaultSimulatorImpl
m_stop	realtime-simulator-impl.h	/^  bool m_stop;$/;"	m	class:ns3::RealtimeSimulatorImpl
m_stop	unix-fd-reader.h	/^  bool m_stop;               \/\/ true means the read thread should stop$/;"	m	class:ns3::FdReader
m_suites	test.cc	/^  TestSuiteVector m_suites;$/;"	m	class:ns3::TestRunnerImpl	file:
m_synchronizationMode	realtime-simulator-impl.h	/^  SynchronizationMode m_synchronizationMode;$/;"	m	class:ns3::RealtimeSimulatorImpl
m_synchronizer	realtime-simulator-impl.h	/^  Ptr<Synchronizer> m_synchronizer;$/;"	m	class:ns3::RealtimeSimulatorImpl
m_tempDir	test.cc	/^  std::string m_tempDir;$/;"	m	class:ns3::TestRunnerImpl	file:
m_thread	system-thread.h	/^  pthread_t m_thread;$/;"	m	class:ns3::SystemThread
m_tid	object-factory.h	/^  TypeId m_tid;$/;"	m	class:ns3::ObjectFactory
m_tid	object.h	/^  TypeId m_tid;$/;"	m	class:ns3::Object
m_tid	type-id.h	/^  uint16_t m_tid;$/;"	m	class:ns3::TypeId
m_ts	event-id.h	/^  uint64_t m_ts;$/;"	m	class:ns3::EventId
m_ts	scheduler.h	/^    uint64_t m_ts;$/;"	m	struct:ns3::Scheduler::EventKey
m_type	test.h	/^  TestSuite::Type m_type;  $/;"	m	class:ns3::TestSuite
m_uid	default-simulator-impl.h	/^  uint32_t m_uid;$/;"	m	class:ns3::DefaultSimulatorImpl
m_uid	event-id.h	/^  uint32_t m_uid;$/;"	m	class:ns3::EventId
m_uid	realtime-simulator-impl.h	/^  uint32_t m_uid;$/;"	m	class:ns3::RealtimeSimulatorImpl
m_uid	scheduler.h	/^    uint32_t m_uid;$/;"	m	struct:ns3::Scheduler::EventKey
m_unscheduledEvents	default-simulator-impl.h	/^  int m_unscheduledEvents;$/;"	m	class:ns3::DefaultSimulatorImpl
m_unscheduledEvents	realtime-simulator-impl.h	/^  int m_unscheduledEvents;$/;"	m	class:ns3::RealtimeSimulatorImpl
m_updateData	test.cc	/^  bool m_updateData;$/;"	m	class:ns3::TestRunnerImpl	file:
m_v	enum.h	/^  int m_v;$/;"	m	class:ns3::EnumValue
m_v	traced-value.h	/^  T m_v;$/;"	m	class:ns3::TracedValue
m_value	boolean.h	/^  bool m_value;$/;"	m	class:ns3::BooleanValue
m_value	callback.h	/^  CallbackBase m_value;$/;"	m	class:ns3::CallbackValue
m_value	pointer.h	/^  Ptr<Object> m_value;$/;"	m	class:ns3::PointerValue
m_valuePtr	command-line.h	/^    T *m_valuePtr;$/;"	m	class:ns3::CommandLine::UserItem
m_valueSet	enum.h	/^  ValueSet m_valueSet;$/;"	m	class:ns3::EnumChecker
m_variable	random-variable.h	/^  RandomVariableBase *m_variable;$/;"	m	class:ns3::RandomVariable
m_variance	random-variable.cc	/^  double m_variance;  \/\/ Mean value of RV$/;"	m	class:ns3::NormalVariableImpl	file:
m_vectors	test.h	/^  TestVector m_vectors;$/;"	m	class:ns3::TestVectors
m_verbose	test.cc	/^  bool m_verbose;$/;"	m	class:ns3::TestRunnerImpl	file:
m_width	calendar-scheduler.h	/^  uint64_t m_width;$/;"	m	class:ns3::CalendarScheduler
m_workStack	config.cc	/^  std::vector<std::string> m_workStack;$/;"	m	class:ns3::Resolver	file:
message	test.cc	/^  std::string message; $/;"	m	struct:ns3::TestCaseFailure	file:
mustHideFromDocumentation	type-id.cc	/^    bool mustHideFromDocumentation;$/;"	m	struct:__anon4::IidManager::IidInformation	file:
n	object.h	/^    uint32_t n;$/;"	m	struct:ns3::Object::Aggregates
nArgs	type-traits.h	/^    enum { nArgs = 0};$/;"	e	enum:TypeTraits::FunctionPtrTraits::__anon12
nArgs	type-traits.h	/^    enum { nArgs = 0};$/;"	e	enum:TypeTraits::PtrToMemberTraits::__anon27
nArgs	type-traits.h	/^    enum { nArgs = 0};$/;"	e	enum:TypeTraits::PtrToMemberTraits::__anon29
nArgs	type-traits.h	/^    enum { nArgs = 1};$/;"	e	enum:TypeTraits::FunctionPtrTraits::__anon14
nArgs	type-traits.h	/^    enum { nArgs = 1};$/;"	e	enum:TypeTraits::PtrToMemberTraits::__anon31
nArgs	type-traits.h	/^    enum { nArgs = 1};$/;"	e	enum:TypeTraits::PtrToMemberTraits::__anon33
nArgs	type-traits.h	/^    enum { nArgs = 2};$/;"	e	enum:TypeTraits::FunctionPtrTraits::__anon16
nArgs	type-traits.h	/^    enum { nArgs = 2};$/;"	e	enum:TypeTraits::PtrToMemberTraits::__anon35
nArgs	type-traits.h	/^    enum { nArgs = 2};$/;"	e	enum:TypeTraits::PtrToMemberTraits::__anon37
nArgs	type-traits.h	/^    enum { nArgs = 3};$/;"	e	enum:TypeTraits::FunctionPtrTraits::__anon18
nArgs	type-traits.h	/^    enum { nArgs = 3};$/;"	e	enum:TypeTraits::PtrToMemberTraits::__anon39
nArgs	type-traits.h	/^    enum { nArgs = 3};$/;"	e	enum:TypeTraits::PtrToMemberTraits::__anon41
nArgs	type-traits.h	/^    enum { nArgs = 4};$/;"	e	enum:TypeTraits::FunctionPtrTraits::__anon20
nArgs	type-traits.h	/^    enum { nArgs = 4};$/;"	e	enum:TypeTraits::PtrToMemberTraits::__anon43
nArgs	type-traits.h	/^    enum { nArgs = 4};$/;"	e	enum:TypeTraits::PtrToMemberTraits::__anon45
nArgs	type-traits.h	/^    enum { nArgs = 5};$/;"	e	enum:TypeTraits::FunctionPtrTraits::__anon22
nArgs	type-traits.h	/^    enum { nArgs = 5};$/;"	e	enum:TypeTraits::PtrToMemberTraits::__anon47
nArgs	type-traits.h	/^    enum { nArgs = 5};$/;"	e	enum:TypeTraits::PtrToMemberTraits::__anon49
nArgs	type-traits.h	/^    enum { nArgs = 6};$/;"	e	enum:TypeTraits::FunctionPtrTraits::__anon24
nArgs	type-traits.h	/^    enum { nArgs = 6};$/;"	e	enum:TypeTraits::PtrToMemberTraits::__anon51
nArgs	type-traits.h	/^    enum { nArgs = 6};$/;"	e	enum:TypeTraits::PtrToMemberTraits::__anon53
name	attribute-construction-list.h	/^    std::string name;$/;"	m	struct:ns3::AttributeConstructionList::Item
name	type-id.cc	/^    std::string name;$/;"	m	struct:__anon4::IidManager::IidInformation	file:
name	type-id.h	/^    std::string name;$/;"	m	struct:ns3::TypeId::AttributeInformation
name	type-id.h	/^    std::string name;$/;"	m	struct:ns3::TypeId::TraceSourceInformation
next	random-variable.cc	/^  uint32_t   next;$/;"	m	class:ns3::DeterministicVariableImpl	file:
nextSeed	rng-stream.cc	/^double RngStream::nextSeed[6] =$/;"	m	class:ns3::RngStream	file:
nextSeed	rng-stream.h	/^  static double nextSeed[6];$/;"	m	class:ns3::RngStream
noInt64x64_CAIRO_ASM	int64x64-cairo.h	11;"	d
norm	rng-stream.cc	/^const double norm =       1.0 \/ (m1 + 1.0);$/;"	m	namespace:__anon3	file:
ns3	attribute-accessor-helper.h	/^namespace ns3 {$/;"	n
ns3	attribute-construction-list.cc	/^namespace ns3 {$/;"	n	file:
ns3	attribute-construction-list.h	/^namespace ns3 {$/;"	n
ns3	attribute-helper.h	/^namespace ns3 {$/;"	n
ns3	attribute.cc	/^namespace ns3 {$/;"	n	file:
ns3	attribute.h	/^namespace ns3 {$/;"	n
ns3	boolean.cc	/^namespace ns3 {$/;"	n	file:
ns3	boolean.h	/^namespace ns3 {$/;"	n
ns3	breakpoint.cc	/^namespace ns3 {$/;"	n	file:
ns3	breakpoint.h	/^namespace ns3 {$/;"	n
ns3	calendar-scheduler.cc	/^namespace ns3 {$/;"	n	file:
ns3	calendar-scheduler.h	/^namespace ns3 {$/;"	n
ns3	callback.cc	/^namespace ns3 {$/;"	n	file:
ns3	callback.h	/^namespace ns3 {$/;"	n
ns3	command-line.cc	/^namespace ns3 {$/;"	n	file:
ns3	command-line.h	/^namespace ns3 {$/;"	n
ns3	config.cc	/^namespace ns3 {$/;"	n	file:
ns3	config.h	/^namespace ns3 {$/;"	n
ns3	default-deleter.h	/^namespace ns3 {$/;"	n
ns3	default-simulator-impl.cc	/^namespace ns3 {$/;"	n	file:
ns3	default-simulator-impl.h	/^namespace ns3 {$/;"	n
ns3	double.cc	/^namespace ns3 {$/;"	n	file:
ns3	double.h	/^namespace ns3 {$/;"	n
ns3	empty.h	/^namespace ns3 {$/;"	n
ns3	enum.cc	/^namespace ns3 {$/;"	n	file:
ns3	enum.h	/^namespace ns3 {$/;"	n
ns3	event-id.cc	/^namespace ns3 {$/;"	n	file:
ns3	event-id.h	/^namespace ns3 {$/;"	n
ns3	event-impl.cc	/^namespace ns3 {$/;"	n	file:
ns3	event-impl.h	/^namespace ns3 {$/;"	n
ns3	fatal-impl.cc	/^namespace ns3 {$/;"	n	file:
ns3	fatal-impl.h	/^namespace ns3 {$/;"	n
ns3	global-value.cc	/^namespace ns3 {$/;"	n	file:
ns3	global-value.h	/^namespace ns3 {$/;"	n
ns3	heap-scheduler.cc	/^namespace ns3 {$/;"	n	file:
ns3	heap-scheduler.h	/^namespace ns3 {$/;"	n
ns3	int-to-type.h	/^namespace ns3 {$/;"	n
ns3	int64x64-128.cc	/^namespace ns3 {$/;"	n	file:
ns3	int64x64-128.h	/^namespace ns3 {$/;"	n
ns3	int64x64-cairo.cc	/^namespace ns3 {$/;"	n	file:
ns3	int64x64-cairo.h	/^namespace ns3 {$/;"	n
ns3	int64x64-double.h	/^namespace ns3 {$/;"	n
ns3	int64x64.cc	/^namespace ns3 {$/;"	n	file:
ns3	int64x64.h	/^namespace ns3 {$/;"	n
ns3	integer.cc	/^namespace ns3 {$/;"	n	file:
ns3	integer.h	/^namespace ns3 {$/;"	n
ns3	list-scheduler.cc	/^namespace ns3 {$/;"	n	file:
ns3	list-scheduler.h	/^namespace ns3 {$/;"	n
ns3	log.cc	/^namespace ns3 {$/;"	n	file:
ns3	log.h	/^namespace ns3 {$/;"	n
ns3	make-event.cc	/^namespace ns3 {$/;"	n	file:
ns3	make-event.h	/^namespace ns3 {$/;"	n
ns3	map-scheduler.cc	/^namespace ns3 {$/;"	n	file:
ns3	map-scheduler.h	/^namespace ns3 {$/;"	n
ns3	names.cc	/^namespace ns3 {$/;"	n	file:
ns3	names.h	/^namespace ns3 {$/;"	n
ns3	nstime.h	/^namespace ns3 {$/;"	n
ns3	object-base.cc	/^namespace ns3 {$/;"	n	file:
ns3	object-base.h	/^namespace ns3 {$/;"	n
ns3	object-factory.cc	/^namespace ns3 {$/;"	n	file:
ns3	object-factory.h	/^namespace ns3 {$/;"	n
ns3	object-map.h	/^namespace ns3 {$/;"	n
ns3	object-ptr-container.cc	/^namespace ns3 {$/;"	n	file:
ns3	object-ptr-container.h	/^namespace ns3 {$/;"	n
ns3	object-vector.h	/^namespace ns3 {$/;"	n
ns3	object.cc	/^namespace ns3 {$/;"	n	file:
ns3	object.h	/^namespace ns3 {$/;"	n
ns3	pointer.cc	/^namespace ns3 {$/;"	n	file:
ns3	pointer.h	/^namespace ns3 {$/;"	n
ns3	ptr.h	/^namespace ns3 {$/;"	n
ns3	random-variable.cc	/^namespace ns3 {$/;"	n	file:
ns3	random-variable.h	/^namespace ns3 {$/;"	n
ns3	realtime-simulator-impl.cc	/^namespace ns3 {$/;"	n	file:
ns3	realtime-simulator-impl.h	/^namespace ns3 {$/;"	n
ns3	ref-count-base.cc	/^namespace ns3 {$/;"	n	file:
ns3	ref-count-base.h	/^namespace ns3 {$/;"	n
ns3	rng-stream.cc	/^namespace ns3 {$/;"	n	file:
ns3	rng-stream.h	/^namespace ns3 {$/;"	n
ns3	scheduler.cc	/^namespace ns3 {$/;"	n	file:
ns3	scheduler.h	/^namespace ns3 {$/;"	n
ns3	simple-ref-count.h	/^namespace ns3 {$/;"	n
ns3	simulation-singleton.h	/^namespace ns3 {$/;"	n
ns3	simulator-impl.cc	/^namespace ns3 {$/;"	n	file:
ns3	simulator-impl.h	/^namespace ns3 {$/;"	n
ns3	simulator.cc	/^namespace ns3 {$/;"	n	file:
ns3	simulator.h	/^namespace ns3 {$/;"	n
ns3	singleton.h	/^namespace ns3 {$/;"	n
ns3	string.cc	/^namespace ns3 {$/;"	n	file:
ns3	string.h	/^namespace ns3 {$/;"	n
ns3	synchronizer.cc	/^namespace ns3 {$/;"	n	file:
ns3	synchronizer.h	/^namespace ns3 {$/;"	n
ns3	system-condition.h	/^namespace ns3 { $/;"	n
ns3	system-mutex.h	/^namespace ns3 { $/;"	n
ns3	system-path.cc	/^namespace ns3 {$/;"	n	file:
ns3	system-path.h	/^namespace ns3 {$/;"	n
ns3	system-thread.cc	/^namespace ns3 {$/;"	n	file:
ns3	system-thread.h	/^namespace ns3 { $/;"	n
ns3	system-wall-clock-ms.h	/^namespace ns3 {$/;"	n
ns3	test.cc	/^namespace ns3 {$/;"	n	file:
ns3	test.h	/^namespace ns3 {$/;"	n
ns3	time.cc	/^namespace ns3 {$/;"	n	file:
ns3	timer-impl.h	/^namespace ns3 {$/;"	n
ns3	timer.cc	/^namespace ns3 {$/;"	n	file:
ns3	timer.h	/^namespace ns3 {$/;"	n
ns3	trace-source-accessor.cc	/^namespace ns3 {$/;"	n	file:
ns3	trace-source-accessor.h	/^namespace ns3 {$/;"	n
ns3	traced-callback.h	/^namespace ns3 {$/;"	n
ns3	traced-value.h	/^namespace ns3 {$/;"	n
ns3	type-id.cc	/^namespace ns3 {$/;"	n	file:
ns3	type-id.h	/^namespace ns3 {$/;"	n
ns3	type-name.cc	/^namespace ns3 {$/;"	n	file:
ns3	type-name.h	/^namespace ns3 {$/;"	n
ns3	uinteger.cc	/^namespace ns3 {$/;"	n	file:
ns3	uinteger.h	/^namespace ns3 {$/;"	n
ns3	unix-fd-reader.cc	/^namespace ns3 {$/;"	n	file:
ns3	unix-fd-reader.h	/^namespace ns3 {$/;"	n
ns3	unix-system-condition.cc	/^namespace ns3 {$/;"	n	file:
ns3	unix-system-mutex.cc	/^namespace ns3 {$/;"	n	file:
ns3	unix-system-wall-clock-ms.cc	/^namespace ns3 {$/;"	n	file:
ns3	vector.cc	/^namespace ns3 {$/;"	n	file:
ns3	vector.h	/^namespace ns3 {$/;"	n
ns3	wall-clock-synchronizer.cc	/^namespace ns3 {$/;"	n	file:
ns3	wall-clock-synchronizer.h	/^namespace ns3 {$/;"	n
ns3	watchdog.cc	/^namespace ns3 {$/;"	n	file:
ns3	watchdog.h	/^namespace ns3 {$/;"	n
ns3	win32-system-wall-clock-ms.cc	/^namespace ns3 {$/;"	n	file:
operator !	int64x64-128.h	/^inline int64x64_t operator ! (const int64x64_t &lhs)$/;"	f	namespace:ns3
operator !	int64x64-cairo.h	/^inline int64x64_t operator ! (const int64x64_t &lhs)$/;"	f	namespace:ns3
operator !	int64x64-double.h	/^inline int64x64_t operator ! (const int64x64_t &lhs)$/;"	f	namespace:ns3
operator !	ptr.h	/^Ptr<T>::operator! () $/;"	f	class:ns3::Ptr
operator !	traced-value.h	/^TracedValue<T> operator ! (const TracedValue<T> &lhs) {$/;"	f	namespace:ns3
operator !=	callback.h	/^bool operator != (Callback<R,T1,T2,T3,T4,T5,T6,T7,T8,T9> a, Callback<R,T1,T2,T3,T4,T5,T6,T7,T8,T9> b)$/;"	f	namespace:ns3
operator !=	event-id.cc	/^bool operator != (const EventId &a, const EventId &b)$/;"	f	namespace:ns3
operator !=	int64x64-128.h	/^inline bool operator != (const int64x64_t &lhs, const int64x64_t &rhs)$/;"	f	namespace:ns3
operator !=	int64x64-cairo.h	/^inline bool operator != (const int64x64_t &lhs, const int64x64_t &rhs)$/;"	f	namespace:ns3
operator !=	int64x64-double.h	/^inline bool operator != (const int64x64_t &lhs, const int64x64_t &rhs)$/;"	f	namespace:ns3
operator !=	nstime.h	/^operator != (const Time &lhs, const Time &rhs)$/;"	f	namespace:ns3
operator !=	ptr.h	/^operator != (Ptr<T1> const &lhs, Ptr<T2> const &rhs)$/;"	f	namespace:ns3
operator !=	ptr.h	/^operator != (Ptr<T1> const &lhs, T2 const *rhs)$/;"	f	namespace:ns3
operator !=	ptr.h	/^operator != (T1 const *lhs, Ptr<T2> &rhs)$/;"	f	namespace:ns3
operator !=	scheduler.h	/^inline bool operator != (const Scheduler::EventKey &a, const Scheduler::EventKey &b)$/;"	f	namespace:ns3
operator !=	traced-value.h	/^bool operator != (const TracedValue<T> &lhs, const TracedValue<U> &rhs)$/;"	f	namespace:ns3
operator !=	traced-value.h	/^bool operator != (const TracedValue<T> &lhs, const U &rhs)$/;"	f	namespace:ns3
operator !=	traced-value.h	/^bool operator != (const U &lhs, const TracedValue<T> &rhs)$/;"	f	namespace:ns3
operator !=	type-id.h	/^inline bool operator != (TypeId a, TypeId b)$/;"	f	namespace:ns3
operator %	traced-value.h	/^TracedValue<T> operator % (const TracedValue<T> &lhs, const TracedValue<U> &rhs) {$/;"	f	namespace:ns3
operator %	traced-value.h	/^TracedValue<T> operator % (const TracedValue<T> &lhs, const U &rhs) {$/;"	f	namespace:ns3
operator %	traced-value.h	/^TracedValue<T> operator % (const U &lhs, const TracedValue<T> &rhs) {$/;"	f	namespace:ns3
operator %=	traced-value.h	/^TracedValue<T> &operator %= (TracedValue<T> &lhs, const U &rhs) {$/;"	f	namespace:ns3
operator &	traced-value.h	/^TracedValue<T> operator & (const TracedValue<T> &lhs, const TracedValue<U> &rhs) {$/;"	f	namespace:ns3
operator &	traced-value.h	/^TracedValue<T> operator & (const TracedValue<T> &lhs, const U &rhs) {$/;"	f	namespace:ns3
operator &	traced-value.h	/^TracedValue<T> operator & (const U &lhs, const TracedValue<T> &rhs) {$/;"	f	namespace:ns3
operator &=	traced-value.h	/^TracedValue<T> &operator &= (TracedValue<T> &lhs, const U &rhs) {$/;"	f	namespace:ns3
operator ()	callback.h	/^  R operator() (T1 a1) const {$/;"	f	class:ns3::Callback
operator ()	callback.h	/^  R operator() (T1 a1) {$/;"	f	class:ns3::BoundFunctorCallbackImpl
operator ()	callback.h	/^  R operator() (T1 a1) {$/;"	f	class:ns3::FunctorCallbackImpl
operator ()	callback.h	/^  R operator() (T1 a1) {$/;"	f	class:ns3::MemPtrCallbackImpl
operator ()	callback.h	/^  R operator() (T1 a1, T2 a2) const {$/;"	f	class:ns3::Callback
operator ()	callback.h	/^  R operator() (T1 a1, T2 a2, T3 a3) const {$/;"	f	class:ns3::Callback
operator ()	callback.h	/^  R operator() (T1 a1, T2 a2, T3 a3, T4 a4) const {$/;"	f	class:ns3::Callback
operator ()	callback.h	/^  R operator() (T1 a1, T2 a2, T3 a3, T4 a4,T5 a5) const {$/;"	f	class:ns3::Callback
operator ()	callback.h	/^  R operator() (T1 a1, T2 a2, T3 a3, T4 a4,T5 a5,T6 a6) const {$/;"	f	class:ns3::Callback
operator ()	callback.h	/^  R operator() (T1 a1, T2 a2, T3 a3, T4 a4,T5 a5,T6 a6,T7 a7) const {$/;"	f	class:ns3::Callback
operator ()	callback.h	/^  R operator() (T1 a1, T2 a2, T3 a3, T4 a4,T5 a5,T6 a6,T7 a7,T8 a8) const {$/;"	f	class:ns3::Callback
operator ()	callback.h	/^  R operator() (T1 a1, T2 a2, T3 a3, T4 a4,T5 a5,T6 a6,T7 a7,T8 a8, T9 a9) const {$/;"	f	class:ns3::Callback
operator ()	callback.h	/^  R operator() (T1 a1,T2 a2) {$/;"	f	class:ns3::BoundFunctorCallbackImpl
operator ()	callback.h	/^  R operator() (T1 a1,T2 a2) {$/;"	f	class:ns3::FunctorCallbackImpl
operator ()	callback.h	/^  R operator() (T1 a1,T2 a2) {$/;"	f	class:ns3::MemPtrCallbackImpl
operator ()	callback.h	/^  R operator() (T1 a1,T2 a2,T3 a3) {$/;"	f	class:ns3::BoundFunctorCallbackImpl
operator ()	callback.h	/^  R operator() (T1 a1,T2 a2,T3 a3) {$/;"	f	class:ns3::FunctorCallbackImpl
operator ()	callback.h	/^  R operator() (T1 a1,T2 a2,T3 a3) {$/;"	f	class:ns3::MemPtrCallbackImpl
operator ()	callback.h	/^  R operator() (T1 a1,T2 a2,T3 a3,T4 a4) {$/;"	f	class:ns3::BoundFunctorCallbackImpl
operator ()	callback.h	/^  R operator() (T1 a1,T2 a2,T3 a3,T4 a4) {$/;"	f	class:ns3::FunctorCallbackImpl
operator ()	callback.h	/^  R operator() (T1 a1,T2 a2,T3 a3,T4 a4) {$/;"	f	class:ns3::MemPtrCallbackImpl
operator ()	callback.h	/^  R operator() (T1 a1,T2 a2,T3 a3,T4 a4,T5 a5) {$/;"	f	class:ns3::BoundFunctorCallbackImpl
operator ()	callback.h	/^  R operator() (T1 a1,T2 a2,T3 a3,T4 a4,T5 a5) {$/;"	f	class:ns3::FunctorCallbackImpl
operator ()	callback.h	/^  R operator() (T1 a1,T2 a2,T3 a3,T4 a4,T5 a5) {$/;"	f	class:ns3::MemPtrCallbackImpl
operator ()	callback.h	/^  R operator() (T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6) {$/;"	f	class:ns3::BoundFunctorCallbackImpl
operator ()	callback.h	/^  R operator() (T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6) {$/;"	f	class:ns3::FunctorCallbackImpl
operator ()	callback.h	/^  R operator() (T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6) {$/;"	f	class:ns3::MemPtrCallbackImpl
operator ()	callback.h	/^  R operator() (T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7) {$/;"	f	class:ns3::BoundFunctorCallbackImpl
operator ()	callback.h	/^  R operator() (T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7) {$/;"	f	class:ns3::FunctorCallbackImpl
operator ()	callback.h	/^  R operator() (T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7) {$/;"	f	class:ns3::MemPtrCallbackImpl
operator ()	callback.h	/^  R operator() (T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7,T8 a8) {$/;"	f	class:ns3::BoundFunctorCallbackImpl
operator ()	callback.h	/^  R operator() (T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7,T8 a8) {$/;"	f	class:ns3::FunctorCallbackImpl
operator ()	callback.h	/^  R operator() (T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7,T8 a8) {$/;"	f	class:ns3::MemPtrCallbackImpl
operator ()	callback.h	/^  R operator() (T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7,T8 a8, T9 a9) {$/;"	f	class:ns3::MemPtrCallbackImpl
operator ()	callback.h	/^  R operator() (T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7,T8 a8,T9 a9) {$/;"	f	class:ns3::FunctorCallbackImpl
operator ()	callback.h	/^  R operator() (void) const {$/;"	f	class:ns3::Callback
operator ()	callback.h	/^  R operator() (void) {$/;"	f	class:ns3::BoundFunctorCallbackImpl
operator ()	callback.h	/^  R operator() (void) {$/;"	f	class:ns3::FunctorCallbackImpl
operator ()	callback.h	/^  R operator() (void) {$/;"	f	class:ns3::MemPtrCallbackImpl
operator ()	traced-callback.h	/^TracedCallback<T1,T2,T3,T4,T5,T6,T7,T8>::operator() (T1 a1) const$/;"	f	class:ns3::TracedCallback
operator ()	traced-callback.h	/^TracedCallback<T1,T2,T3,T4,T5,T6,T7,T8>::operator() (T1 a1, T2 a2) const$/;"	f	class:ns3::TracedCallback
operator ()	traced-callback.h	/^TracedCallback<T1,T2,T3,T4,T5,T6,T7,T8>::operator() (T1 a1, T2 a2, T3 a3) const$/;"	f	class:ns3::TracedCallback
operator ()	traced-callback.h	/^TracedCallback<T1,T2,T3,T4,T5,T6,T7,T8>::operator() (T1 a1, T2 a2, T3 a3, T4 a4) const$/;"	f	class:ns3::TracedCallback
operator ()	traced-callback.h	/^TracedCallback<T1,T2,T3,T4,T5,T6,T7,T8>::operator() (T1 a1, T2 a2, T3 a3, T4 a4, T5 a5) const$/;"	f	class:ns3::TracedCallback
operator ()	traced-callback.h	/^TracedCallback<T1,T2,T3,T4,T5,T6,T7,T8>::operator() (T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6) const$/;"	f	class:ns3::TracedCallback
operator ()	traced-callback.h	/^TracedCallback<T1,T2,T3,T4,T5,T6,T7,T8>::operator() (T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7) const$/;"	f	class:ns3::TracedCallback
operator ()	traced-callback.h	/^TracedCallback<T1,T2,T3,T4,T5,T6,T7,T8>::operator() (T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8) const$/;"	f	class:ns3::TracedCallback
operator ()	traced-callback.h	/^TracedCallback<T1,T2,T3,T4,T5,T6,T7,T8>::operator() (void) const$/;"	f	class:ns3::TracedCallback
operator *	ptr.h	/^Ptr<T>::operator * () const$/;"	f	class:ns3::Ptr
operator *	ptr.h	/^Ptr<T>::operator * ()$/;"	f	class:ns3::Ptr
operator *	traced-value.h	/^TracedValue<T> operator * (const TracedValue<T> &lhs, const TracedValue<U> &rhs) {$/;"	f	namespace:ns3
operator *	traced-value.h	/^TracedValue<T> operator * (const TracedValue<T> &lhs, const U &rhs) {$/;"	f	namespace:ns3
operator *	traced-value.h	/^TracedValue<T> operator * (const U &lhs, const TracedValue<T> &rhs) {$/;"	f	namespace:ns3
operator *=	int64x64-128.h	/^inline int64x64_t &operator *= (int64x64_t &lhs, const int64x64_t &rhs)$/;"	f	namespace:ns3
operator *=	int64x64-cairo.h	/^inline int64x64_t &operator *= (int64x64_t &lhs, const int64x64_t &rhs)$/;"	f	namespace:ns3
operator *=	int64x64-double.h	/^inline int64x64_t &operator *= (int64x64_t &lhs, const int64x64_t &rhs)$/;"	f	namespace:ns3
operator *=	traced-value.h	/^TracedValue<T> &operator *= (TracedValue<T> &lhs, const U &rhs) {$/;"	f	namespace:ns3
operator +	int64x64-128.h	/^inline int64x64_t operator + (const int64x64_t &lhs)$/;"	f	namespace:ns3
operator +	int64x64-cairo.h	/^inline int64x64_t operator + (const int64x64_t &lhs)$/;"	f	namespace:ns3
operator +	int64x64-double.h	/^inline int64x64_t operator + (const int64x64_t &lhs)$/;"	f	namespace:ns3
operator +	nstime.h	/^inline Time operator + (const Time &lhs, const Time &rhs)$/;"	f	namespace:ns3
operator +	traced-value.h	/^TracedValue<T> operator + (const TracedValue<T> &lhs) {$/;"	f	namespace:ns3
operator +	traced-value.h	/^TracedValue<T> operator + (const TracedValue<T> &lhs, const TracedValue<U> &rhs) {$/;"	f	namespace:ns3
operator +	traced-value.h	/^TracedValue<T> operator + (const TracedValue<T> &lhs, const U &rhs) {$/;"	f	namespace:ns3
operator +	traced-value.h	/^TracedValue<T> operator + (const U &lhs, const TracedValue<T> &rhs) {$/;"	f	namespace:ns3
operator ++	traced-value.h	/^  TracedValue &operator++ () {$/;"	f	class:ns3::TracedValue
operator ++	traced-value.h	/^  TracedValue operator++ (int) {$/;"	f	class:ns3::TracedValue
operator +=	int64x64-128.h	/^inline int64x64_t &operator += (int64x64_t &lhs, const int64x64_t &rhs)$/;"	f	namespace:ns3
operator +=	int64x64-cairo.h	/^inline int64x64_t &operator += (int64x64_t &lhs, const int64x64_t &rhs)$/;"	f	namespace:ns3
operator +=	int64x64-double.h	/^inline int64x64_t &operator += (int64x64_t &lhs, const int64x64_t &rhs)$/;"	f	namespace:ns3
operator +=	nstime.h	/^inline Time &operator += (Time &lhs, const Time &rhs)$/;"	f	namespace:ns3
operator +=	traced-value.h	/^TracedValue<T> &operator += (TracedValue<T> &lhs, const U &rhs) {$/;"	f	namespace:ns3
operator -	int64x64-128.h	/^inline int64x64_t operator - (const int64x64_t &lhs)$/;"	f	namespace:ns3
operator -	int64x64-cairo.h	/^inline int64x64_t operator - (const int64x64_t &lhs)$/;"	f	namespace:ns3
operator -	int64x64-double.h	/^inline int64x64_t operator - (const int64x64_t &lhs)$/;"	f	namespace:ns3
operator -	nstime.h	/^inline Time operator - (const Time &lhs, const Time &rhs)$/;"	f	namespace:ns3
operator -	traced-value.h	/^TracedValue<T> operator - (const TracedValue<T> &lhs) {$/;"	f	namespace:ns3
operator -	traced-value.h	/^TracedValue<T> operator - (const TracedValue<T> &lhs, const TracedValue<U> &rhs) {$/;"	f	namespace:ns3
operator -	traced-value.h	/^TracedValue<T> operator - (const TracedValue<T> &lhs, const U &rhs) {$/;"	f	namespace:ns3
operator -	traced-value.h	/^TracedValue<T> operator - (const U &lhs, const TracedValue<T> &rhs) {$/;"	f	namespace:ns3
operator --	traced-value.h	/^  TracedValue &operator-- () {$/;"	f	class:ns3::TracedValue
operator --	traced-value.h	/^  TracedValue operator-- (int) {$/;"	f	class:ns3::TracedValue
operator -=	int64x64-128.h	/^inline int64x64_t &operator -= (int64x64_t &lhs, const int64x64_t &rhs)$/;"	f	namespace:ns3
operator -=	int64x64-cairo.h	/^inline int64x64_t &operator -= (int64x64_t &lhs, const int64x64_t &rhs)$/;"	f	namespace:ns3
operator -=	int64x64-double.h	/^inline int64x64_t &operator -= (int64x64_t &lhs, const int64x64_t &rhs)$/;"	f	namespace:ns3
operator -=	nstime.h	/^inline Time &operator -= (Time &lhs, const Time &rhs)$/;"	f	namespace:ns3
operator -=	traced-value.h	/^TracedValue<T> &operator -= (TracedValue<T> &lhs, const U &rhs) {$/;"	f	namespace:ns3
operator ->	ptr.h	/^Ptr<T>::operator -> () $/;"	f	class:ns3::Ptr
operator ->	ptr.h	/^Ptr<T>::operator -> () const$/;"	f	class:ns3::Ptr
operator /	traced-value.h	/^TracedValue<T> operator \/ (const TracedValue<T> &lhs, const TracedValue<U> &rhs) {$/;"	f	namespace:ns3
operator /	traced-value.h	/^TracedValue<T> operator \/ (const TracedValue<T> &lhs, const U &rhs) {$/;"	f	namespace:ns3
operator /	traced-value.h	/^TracedValue<T> operator \/ (const U &lhs, const TracedValue<T> &rhs) {$/;"	f	namespace:ns3
operator /=	int64x64-128.h	/^inline int64x64_t &operator \/= (int64x64_t &lhs, const int64x64_t &rhs)$/;"	f	namespace:ns3
operator /=	int64x64-cairo.h	/^inline int64x64_t &operator \/= (int64x64_t &lhs, const int64x64_t &rhs)$/;"	f	namespace:ns3
operator /=	int64x64-double.h	/^inline int64x64_t &operator \/= (int64x64_t &lhs, const int64x64_t &rhs)$/;"	f	namespace:ns3
operator /=	traced-value.h	/^TracedValue<T> &operator \/= (TracedValue<T> &lhs, const U &rhs) {$/;"	f	namespace:ns3
operator <	int64x64-128.h	/^inline bool operator < (const int64x64_t &lhs, const int64x64_t &rhs)$/;"	f	namespace:ns3
operator <	int64x64-cairo.h	/^inline bool operator < (const int64x64_t &lhs, const int64x64_t &rhs)$/;"	f	namespace:ns3
operator <	int64x64-double.h	/^inline bool operator < (const int64x64_t &lhs, const int64x64_t &rhs)$/;"	f	namespace:ns3
operator <	nstime.h	/^operator < (const Time &lhs, const Time &rhs)$/;"	f	namespace:ns3
operator <	ptr.h	/^bool operator < (const Ptr<T> &lhs, const Ptr<T> &rhs)$/;"	f	namespace:ns3
operator <	scheduler.h	/^inline bool operator < (const Scheduler::Event &a, const Scheduler::Event &b)$/;"	f	namespace:ns3
operator <	scheduler.h	/^inline bool operator < (const Scheduler::EventKey &a, const Scheduler::EventKey &b)$/;"	f	namespace:ns3
operator <	traced-value.h	/^bool operator < (const TracedValue<T> &lhs, const TracedValue<U> &rhs)$/;"	f	namespace:ns3
operator <	traced-value.h	/^bool operator < (const TracedValue<T> &lhs, const U &rhs)$/;"	f	namespace:ns3
operator <	traced-value.h	/^bool operator < (const U &lhs, const TracedValue<T> &rhs)$/;"	f	namespace:ns3
operator <	type-id.cc	/^bool operator < (TypeId a, TypeId b)$/;"	f	namespace:ns3
operator <<	boolean.cc	/^std::ostream & operator << (std::ostream &os, const BooleanValue &value)$/;"	f	namespace:ns3
operator <<	int64x64.cc	/^std::ostream &operator << (std::ostream &os, const int64x64_t &value)$/;"	f	namespace:ns3
operator <<	log.h	/^  ParameterLogger& operator<< (T param)$/;"	f	class:ns3::ParameterLogger
operator <<	object-factory.cc	/^std::ostream & operator << (std::ostream &os, const ObjectFactory &factory)$/;"	f	namespace:ns3
operator <<	ptr.h	/^std::ostream &operator << (std::ostream &os, const Ptr<T> &p)$/;"	f	namespace:ns3
operator <<	random-variable.cc	/^std::ostream & operator << (std::ostream &os, const RandomVariable &var)$/;"	f	namespace:ns3
operator <<	test.cc	/^std::ostream &operator << (std::ostream &os, const Indent &val)$/;"	f	namespace:ns3
operator <<	time.cc	/^operator<< (std::ostream& os, const Time & time)$/;"	f	namespace:ns3
operator <<	traced-value.h	/^TracedValue<T> operator << (const TracedValue<T> &lhs, const TracedValue<U> &rhs) {$/;"	f	namespace:ns3
operator <<	traced-value.h	/^TracedValue<T> operator << (const TracedValue<T> &lhs, const U &rhs) {$/;"	f	namespace:ns3
operator <<	traced-value.h	/^TracedValue<T> operator << (const U &lhs, const TracedValue<T> &rhs) {$/;"	f	namespace:ns3
operator <<	traced-value.h	/^std::ostream& operator << (std::ostream& os, const TracedValue<T>& rhs)$/;"	f	namespace:ns3
operator <<	type-id.cc	/^std::ostream & operator << (std::ostream &os, TypeId tid)$/;"	f	namespace:ns3
operator <<	vector.cc	/^std::ostream &operator << (std::ostream &os, const Vector2D &vector)$/;"	f	namespace:ns3
operator <<	vector.cc	/^std::ostream &operator << (std::ostream &os, const Vector3D &vector)$/;"	f	namespace:ns3
operator <<=	traced-value.h	/^TracedValue<T> &operator <<= (TracedValue<T> &lhs, const U &rhs) {$/;"	f	namespace:ns3
operator <=	int64x64-128.h	/^inline bool operator <= (const int64x64_t &lhs, const int64x64_t &rhs)$/;"	f	namespace:ns3
operator <=	int64x64-cairo.h	/^inline bool operator <= (const int64x64_t &lhs, const int64x64_t &rhs)$/;"	f	namespace:ns3
operator <=	int64x64-double.h	/^inline bool operator <= (const int64x64_t &lhs, const int64x64_t &rhs)$/;"	f	namespace:ns3
operator <=	nstime.h	/^operator <= (const Time &lhs, const Time &rhs)$/;"	f	namespace:ns3
operator <=	ptr.h	/^bool operator <= (const Ptr<T> &lhs, const Ptr<T> &rhs)$/;"	f	namespace:ns3
operator <=	traced-value.h	/^bool operator <= (const TracedValue<T> &lhs, const TracedValue<U> &rhs)$/;"	f	namespace:ns3
operator <=	traced-value.h	/^bool operator <= (const TracedValue<T> &lhs, const U &rhs)$/;"	f	namespace:ns3
operator <=	traced-value.h	/^bool operator <= (const U &lhs, const TracedValue<T> &rhs)$/;"	f	namespace:ns3
operator =	command-line.cc	/^CommandLine::operator = (const CommandLine &cmd)$/;"	f	class:ns3::CommandLine
operator =	int64x64-128.h	/^  inline int64x64_t &operator = (const int64x64_t &o)$/;"	f	class:ns3::int64x64_t
operator =	int64x64-cairo.h	/^  inline int64x64_t &operator = (const int64x64_t &o)$/;"	f	class:ns3::int64x64_t
operator =	int64x64-double.h	/^  inline int64x64_t &operator = (const int64x64_t &o)$/;"	f	class:ns3::int64x64_t
operator =	names.cc	/^NameNode::operator = (const NameNode &rhs)$/;"	f	class:ns3::NameNode
operator =	nstime.h	/^  inline Time &operator = (const Time &o)$/;"	f	class:ns3::Time
operator =	ptr.h	/^Ptr<T>::operator = (Ptr const& o) $/;"	f	class:ns3::Ptr
operator =	random-variable.cc	/^RandomVariable::operator = (const RandomVariable &o)$/;"	f	class:ns3::RandomVariable
operator =	simple-ref-count.h	/^  SimpleRefCount &operator = (const SimpleRefCount &o)$/;"	f	class:ns3::SimpleRefCount
operator =	traced-value.h	/^  TracedValue &operator = (const TracedValue &o) {$/;"	f	class:ns3::TracedValue
operator =	type-id.h	/^TypeId &TypeId::operator = (const TypeId &o)$/;"	f	class:ns3::TypeId
operator ==	event-id.cc	/^bool operator == (const EventId &a, const EventId &b)$/;"	f	namespace:ns3
operator ==	int64x64-128.h	/^inline bool operator == (const int64x64_t &lhs, const int64x64_t &rhs)$/;"	f	namespace:ns3
operator ==	int64x64-cairo.h	/^inline bool operator == (const int64x64_t &lhs, const int64x64_t &rhs)$/;"	f	namespace:ns3
operator ==	int64x64-double.h	/^inline bool operator == (const int64x64_t &lhs, const int64x64_t &rhs)$/;"	f	namespace:ns3
operator ==	nstime.h	/^operator == (const Time &lhs, const Time &rhs)$/;"	f	namespace:ns3
operator ==	ptr.h	/^operator == (Ptr<T1> const &lhs, Ptr<T2> const &rhs)$/;"	f	namespace:ns3
operator ==	ptr.h	/^operator == (Ptr<T1> const &lhs, T2 const *rhs)$/;"	f	namespace:ns3
operator ==	ptr.h	/^operator == (T1 const *lhs, Ptr<T2> &rhs)$/;"	f	namespace:ns3
operator ==	traced-value.h	/^bool operator == (const TracedValue<T> &lhs, const TracedValue<U> &rhs)$/;"	f	namespace:ns3
operator ==	traced-value.h	/^bool operator == (const TracedValue<T> &lhs, const U &rhs)$/;"	f	namespace:ns3
operator ==	traced-value.h	/^bool operator == (const U &lhs, const TracedValue<T> &rhs)$/;"	f	namespace:ns3
operator ==	type-id.h	/^inline bool operator == (TypeId a, TypeId b)$/;"	f	namespace:ns3
operator >	int64x64-128.h	/^inline bool operator > (const int64x64_t &lhs, const int64x64_t &rhs)$/;"	f	namespace:ns3
operator >	int64x64-cairo.h	/^inline bool operator > (const int64x64_t &lhs, const int64x64_t &rhs)$/;"	f	namespace:ns3
operator >	int64x64-double.h	/^inline bool operator > (const int64x64_t &lhs, const int64x64_t &rhs)$/;"	f	namespace:ns3
operator >	nstime.h	/^operator > (const Time &lhs, const Time &rhs)$/;"	f	namespace:ns3
operator >	ptr.h	/^bool operator > (const Ptr<T> &lhs, const Ptr<T> &rhs)$/;"	f	namespace:ns3
operator >	scheduler.h	/^inline bool operator > (const Scheduler::EventKey &a, const Scheduler::EventKey &b)$/;"	f	namespace:ns3
operator >	traced-value.h	/^bool operator > (const TracedValue<T> &lhs, const TracedValue<U> &rhs)$/;"	f	namespace:ns3
operator >	traced-value.h	/^bool operator > (const TracedValue<T> &lhs, const U &rhs)$/;"	f	namespace:ns3
operator >	traced-value.h	/^bool operator > (const U &lhs, const TracedValue<T> &rhs)$/;"	f	namespace:ns3
operator >=	int64x64-128.h	/^inline bool operator >= (const int64x64_t &lhs, const int64x64_t &rhs)$/;"	f	namespace:ns3
operator >=	int64x64-cairo.h	/^inline bool operator >= (const int64x64_t &lhs, const int64x64_t &rhs)$/;"	f	namespace:ns3
operator >=	int64x64-double.h	/^inline bool operator >= (const int64x64_t &lhs, const int64x64_t &rhs)$/;"	f	namespace:ns3
operator >=	nstime.h	/^operator >= (const Time &lhs, const Time &rhs)$/;"	f	namespace:ns3
operator >=	ptr.h	/^bool operator >= (const Ptr<T> &lhs, const Ptr<T> &rhs)$/;"	f	namespace:ns3
operator >=	traced-value.h	/^bool operator >= (const TracedValue<T> &lhs, const TracedValue<U> &rhs)$/;"	f	namespace:ns3
operator >=	traced-value.h	/^bool operator >= (const TracedValue<T> &lhs, const U &rhs)$/;"	f	namespace:ns3
operator >=	traced-value.h	/^bool operator >= (const U &lhs, const TracedValue<T> &rhs)$/;"	f	namespace:ns3
operator >>	int64x64.cc	/^std::istream &operator >> (std::istream &is, int64x64_t &value)$/;"	f	namespace:ns3
operator >>	object-factory.cc	/^std::istream & operator >> (std::istream &is, ObjectFactory &factory)$/;"	f	namespace:ns3
operator >>	random-variable.cc	/^std::istream & operator >> (std::istream &is, RandomVariable &var)$/;"	f	namespace:ns3
operator >>	time.cc	/^std::istream& operator>> (std::istream& is, Time & time)$/;"	f	namespace:ns3
operator >>	traced-value.h	/^TracedValue<T> operator >> (const TracedValue<T> &lhs, const TracedValue<U> &rhs) {$/;"	f	namespace:ns3
operator >>	traced-value.h	/^TracedValue<T> operator >> (const TracedValue<T> &lhs, const U &rhs) {$/;"	f	namespace:ns3
operator >>	traced-value.h	/^TracedValue<T> operator >> (const U &lhs, const TracedValue<T> &rhs) {$/;"	f	namespace:ns3
operator >>	type-id.cc	/^std::istream & operator >> (std::istream &is, TypeId &tid)$/;"	f	namespace:ns3
operator >>	vector.cc	/^std::istream &operator >> (std::istream &is, Vector2D &vector)$/;"	f	namespace:ns3
operator >>	vector.cc	/^std::istream &operator >> (std::istream &is, Vector3D &vector)$/;"	f	namespace:ns3
operator >>=	traced-value.h	/^TracedValue<T> &operator >>= (TracedValue<T> &lhs, const U &rhs) {$/;"	f	namespace:ns3
operator Ptr<T>	pointer.h	/^PointerValue::operator Ptr<T> () const$/;"	f	class:ns3::PointerValue
operator T	traced-value.h	/^  operator T () const {$/;"	f	class:ns3::TracedValue
operator Tester *	ptr.h	/^Ptr<T>::operator Tester * () const$/;"	f	class:ns3::Ptr
operator ^	traced-value.h	/^TracedValue<T> operator ^ (const TracedValue<T> &lhs, const TracedValue<U> &rhs) {$/;"	f	namespace:ns3
operator ^	traced-value.h	/^TracedValue<T> operator ^ (const TracedValue<T> &lhs, const U &rhs) {$/;"	f	namespace:ns3
operator ^	traced-value.h	/^TracedValue<T> operator ^ (const U &lhs, const TracedValue<T> &rhs) {$/;"	f	namespace:ns3
operator ^=	traced-value.h	/^TracedValue<T> &operator ^= (TracedValue<T> &lhs, const U &rhs) {$/;"	f	namespace:ns3
operator bool	boolean.cc	/^BooleanValue::operator bool () const$/;"	f	class:ns3::BooleanValue
operator int64x64_t	nstime.h	/^  inline operator int64x64_t () const$/;"	f	class:ns3::Time
operator |	traced-value.h	/^TracedValue<T> operator | (const TracedValue<T> &lhs, const TracedValue<U> &rhs) {$/;"	f	namespace:ns3
operator |	traced-value.h	/^TracedValue<T> operator | (const TracedValue<T> &lhs, const U &rhs) {$/;"	f	namespace:ns3
operator |	traced-value.h	/^TracedValue<T> operator | (const U &lhs, const TracedValue<T> &rhs) {$/;"	f	namespace:ns3
operator |=	traced-value.h	/^TracedValue<T> &operator |= (TracedValue<T> &lhs, const U &rhs) {$/;"	f	namespace:ns3
operator ~	traced-value.h	/^TracedValue<T> operator ~ (const TracedValue<T> &lhs) {$/;"	f	namespace:ns3
originalInitialValue	type-id.h	/^    ns3::Ptr<const ns3::AttributeValue> originalInitialValue;$/;"	m	struct:ns3::TypeId::AttributeInformation
parent	type-id.cc	/^    uint16_t parent;$/;"	m	struct:__anon4::IidManager::IidInformation	file:
quo	cairo-wideint-private.h	/^  cairo_int128_t      quo;$/;"	m	struct:_cairo_quorem128
quo	cairo-wideint-private.h	/^  cairo_int64_t       quo;$/;"	m	struct:_cairo_quorem64
quo	cairo-wideint-private.h	/^  cairo_uint128_t     quo;$/;"	m	struct:_cairo_uquorem128
quo	cairo-wideint-private.h	/^  cairo_uint64_t      quo;$/;"	m	struct:_cairo_uquorem64
rem	cairo-wideint-private.h	/^  cairo_int128_t      rem;$/;"	m	struct:_cairo_quorem128
rem	cairo-wideint-private.h	/^  cairo_int64_t       rem;$/;"	m	struct:_cairo_quorem64
rem	cairo-wideint-private.h	/^  cairo_uint128_t     rem;$/;"	m	struct:_cairo_uquorem128
rem	cairo-wideint-private.h	/^  cairo_uint64_t      rem;$/;"	m	struct:_cairo_uquorem64
setter	attribute-accessor-helper.h	/^                         void (T::*setter)(U))$/;"	f	namespace:ns3
sigHandler	fatal-impl.cc	/^void sigHandler (int sig)$/;"	f	namespace:ns3::FatalImpl::__anon2
timeFrom	nstime.h	/^    int64x64_t timeFrom;$/;"	m	struct:ns3::Time::Information
timeTo	nstime.h	/^    int64x64_t timeTo;$/;"	m	struct:ns3::Time::Information
timestamp	default-simulator-impl.h	/^    uint64_t timestamp;$/;"	m	struct:ns3::DefaultSimulatorImpl::EventWithContext
toMul	nstime.h	/^    bool toMul;$/;"	m	struct:ns3::Time::Information
traceSources	type-id.cc	/^    std::vector<struct ns3::TypeId::TraceSourceInformation> traceSources;$/;"	m	struct:__anon4::IidManager::IidInformation	file:
two17	rng-stream.cc	/^const double two17 =      131072.0;$/;"	m	namespace:__anon3	file:
two53	rng-stream.cc	/^const double two53 =      9007199254740992.0;$/;"	m	namespace:__anon3	file:
uint128_t	int64x64-128.h	/^typedef __uint128_t uint128_t;$/;"	t
uint16_t	cairo-wideint-private.h	/^typedef unsigned __int16 uint16_t;$/;"	t
uint32_carry16	cairo-wideint.c	105;"	d	file:
uint32_hi	cairo-wideint.c	104;"	d	file:
uint32_lo	cairo-wideint.c	103;"	d	file:
uint32_t	cairo-wideint-private.h	/^typedef unsigned __int32 uint32_t;$/;"	t
uint64_carry32	cairo-wideint.c	/^static const cairo_uint64_t uint64_carry32 = { 0, 1 };$/;"	v	file:
uint64_carry32	cairo-wideint.c	398;"	d	file:
uint64_hi	cairo-wideint.c	/^uint64_hi (cairo_uint64_t i)$/;"	f	file:
uint64_hi	cairo-wideint.c	396;"	d	file:
uint64_hi32	cairo-wideint.c	394;"	d	file:
uint64_hi32	cairo-wideint.c	403;"	d	file:
uint64_lo	cairo-wideint.c	/^uint64_lo (cairo_uint64_t i)$/;"	f	file:
uint64_lo	cairo-wideint.c	395;"	d	file:
uint64_lo32	cairo-wideint.c	393;"	d	file:
uint64_lo32	cairo-wideint.c	402;"	d	file:
uint64_shift32	cairo-wideint.c	/^uint64_shift32 (cairo_uint64_t i)$/;"	f	file:
uint64_shift32	cairo-wideint.c	397;"	d	file:
uint64_t	cairo-wideint-private.h	/^typedef unsigned __int64 uint64_t;$/;"	t
uint8_t	cairo-wideint-private.h	/^typedef unsigned __int8 uint8_t;$/;"	t
unit	nstime.h	/^    enum Time::Unit unit;$/;"	m	struct:ns3::Time::Resolution	typeref:enum:ns3::Time::Resolution::Unit
v_e	int-to-type.h	/^  enum v_e { value = v};$/;"	g	struct:ns3::IntToType
validated	random-variable.cc	/^  bool validated; \/\/ True if non-decreasing validated$/;"	m	class:ns3::EmpiricalVariableImpl	file:
value	attribute-construction-list.h	/^    Ptr<AttributeValue> value;$/;"	m	struct:ns3::AttributeConstructionList::Item
value	int-to-type.h	/^  enum v_e { value = v};$/;"	e	enum:ns3::IntToType::v_e
value	random-variable.cc	/^    double value;$/;"	m	class:ns3::EmpiricalVariableImpl::ValueCDF	file:
x	vector.h	/^  double x;$/;"	m	class:ns3::Vector2D
x	vector.h	/^  double x;$/;"	m	class:ns3::Vector3D
y	vector.h	/^  double y;$/;"	m	class:ns3::Vector2D
y	vector.h	/^  double y;$/;"	m	class:ns3::Vector3D
z	vector.h	/^  double z;$/;"	m	class:ns3::Vector3D
~AttributeAccessor	attribute.cc	/^AttributeAccessor::~AttributeAccessor ()$/;"	f	class:ns3::AttributeAccessor
~AttributeChecker	attribute.cc	/^AttributeChecker::~AttributeChecker ()$/;"	f	class:ns3::AttributeChecker
~AttributeValue	attribute.cc	/^AttributeValue::~AttributeValue ()$/;"	f	class:ns3::AttributeValue
~BoundFunctorCallbackImpl	callback.h	/^  virtual ~BoundFunctorCallbackImpl () {}$/;"	f	class:ns3::BoundFunctorCallbackImpl
~CalendarScheduler	calendar-scheduler.cc	/^CalendarScheduler::~CalendarScheduler ()$/;"	f	class:ns3::CalendarScheduler
~CallbackImpl	callback.h	/^  virtual ~CallbackImpl () {}$/;"	f	class:ns3::CallbackImpl
~CallbackImplBase	callback.h	/^  virtual ~CallbackImplBase () {}$/;"	f	class:ns3::CallbackImplBase
~CallbackValue	callback.cc	/^CallbackValue::~CallbackValue ()$/;"	f	class:ns3::CallbackValue
~CommandLine	command-line.cc	/^CommandLine::~CommandLine ()$/;"	f	class:ns3::CommandLine
~CriticalSection	unix-system-mutex.cc	/^CriticalSection::~CriticalSection ()$/;"	f	class:ns3::CriticalSection
~DefaultSimulatorImpl	default-simulator-impl.cc	/^DefaultSimulatorImpl::~DefaultSimulatorImpl ()$/;"	f	class:ns3::DefaultSimulatorImpl
~DeterministicVariableImpl	random-variable.cc	/^DeterministicVariableImpl::~DeterministicVariableImpl ()$/;"	f	class:ns3::DeterministicVariableImpl
~EmpiricalVariableImpl	random-variable.cc	/^EmpiricalVariableImpl::~EmpiricalVariableImpl ()$/;"	f	class:ns3::EmpiricalVariableImpl
~EventImpl	event-impl.cc	/^EventImpl::~EventImpl ()$/;"	f	class:ns3::EventImpl
~FdReader	unix-fd-reader.cc	/^FdReader::~FdReader ()$/;"	f	class:ns3::FdReader
~FunctorCallbackImpl	callback.h	/^  virtual ~FunctorCallbackImpl () {}$/;"	f	class:ns3::FunctorCallbackImpl
~HeapScheduler	heap-scheduler.cc	/^HeapScheduler::~HeapScheduler ()$/;"	f	class:ns3::HeapScheduler
~Item	command-line.cc	/^CommandLine::Item::~Item ()$/;"	f	class:ns3::CommandLine::Item
~ListScheduler	list-scheduler.cc	/^ListScheduler::~ListScheduler ()$/;"	f	class:ns3::ListScheduler
~MapScheduler	map-scheduler.cc	/^MapScheduler::~MapScheduler ()$/;"	f	class:ns3::MapScheduler
~MemPtrCallbackImpl	callback.h	/^  virtual ~MemPtrCallbackImpl () {}$/;"	f	class:ns3::MemPtrCallbackImpl
~NameNode	names.cc	/^NameNode::~NameNode ()$/;"	f	class:ns3::NameNode
~NamesPriv	names.cc	/^NamesPriv::~NamesPriv ()$/;"	f	class:ns3::NamesPriv
~Object	object.cc	/^Object::~Object () $/;"	f	class:ns3::Object
~ObjectBase	object-base.cc	/^ObjectBase::~ObjectBase () $/;"	f	class:ns3::ObjectBase
~Ptr	ptr.h	/^Ptr<T>::~Ptr () $/;"	f	class:ns3::Ptr
~RandomVariable	random-variable.cc	/^RandomVariable::~RandomVariable ()$/;"	f	class:ns3::RandomVariable
~RandomVariableBase	random-variable.cc	/^RandomVariableBase::~RandomVariableBase ()$/;"	f	class:ns3::RandomVariableBase
~RealtimeSimulatorImpl	realtime-simulator-impl.cc	/^RealtimeSimulatorImpl::~RealtimeSimulatorImpl ()$/;"	f	class:ns3::RealtimeSimulatorImpl
~RefCountBase	ref-count-base.cc	/^RefCountBase::~RefCountBase ()$/;"	f	class:ns3::RefCountBase
~Resolver	config.cc	/^Resolver::~Resolver ()$/;"	f	class:ns3::Resolver
~Scheduler	scheduler.cc	/^Scheduler::~Scheduler ()$/;"	f	class:ns3::Scheduler
~SequentialVariableImpl	random-variable.cc	/^SequentialVariableImpl::~SequentialVariableImpl ()$/;"	f	class:ns3::SequentialVariableImpl
~Synchronizer	synchronizer.cc	/^Synchronizer::~Synchronizer ()$/;"	f	class:ns3::Synchronizer
~SystemCondition	unix-system-condition.cc	/^SystemCondition::~SystemCondition () $/;"	f	class:ns3::SystemCondition
~SystemConditionPrivate	unix-system-condition.cc	/^SystemConditionPrivate::~SystemConditionPrivate() $/;"	f	class:ns3::SystemConditionPrivate
~SystemMutex	unix-system-mutex.cc	/^SystemMutex::~SystemMutex() $/;"	f	class:ns3::SystemMutex
~SystemMutexPrivate	unix-system-mutex.cc	/^SystemMutexPrivate::~SystemMutexPrivate() $/;"	f	class:ns3::SystemMutexPrivate
~SystemThread	system-thread.cc	/^SystemThread::~SystemThread()$/;"	f	class:ns3::SystemThread
~SystemWallClockMs	unix-system-wall-clock-ms.cc	/^SystemWallClockMs::~SystemWallClockMs ()$/;"	f	class:ns3::SystemWallClockMs
~SystemWallClockMs	win32-system-wall-clock-ms.cc	/^SystemWallClockMs::~SystemWallClockMs ()$/;"	f	class:ns3::SystemWallClockMs
~TestCase	test.cc	/^TestCase::~TestCase ()$/;"	f	class:ns3::TestCase
~TestRunnerImpl	test.cc	/^TestRunnerImpl::~TestRunnerImpl ()$/;"	f	class:ns3::TestRunnerImpl
~TestVectors	test.h	/^TestVectors<T>::~TestVectors ()$/;"	f	class:ns3::TestVectors
~Timer	timer.cc	/^Timer::~Timer ()$/;"	f	class:ns3::Timer
~TimerImpl	timer-impl.h	/^  virtual ~TimerImpl ()$/;"	f	class:ns3::TimerImpl
~TraceSourceAccessor	trace-source-accessor.cc	/^TraceSourceAccessor::~TraceSourceAccessor ()$/;"	f	class:ns3::TraceSourceAccessor
~TypeId	type-id.h	/^TypeId::~TypeId ()$/;"	f	class:ns3::TypeId
~WallClockSynchronizer	wall-clock-synchronizer.cc	/^WallClockSynchronizer::~WallClockSynchronizer ()$/;"	f	class:ns3::WallClockSynchronizer
~Watchdog	watchdog.cc	/^Watchdog::~Watchdog ()$/;"	f	class:ns3::Watchdog
~destructor	fatal-impl.cc	/^  ~destructor ()$/;"	f	struct:ns3::FatalImpl::__anon1::destructor
